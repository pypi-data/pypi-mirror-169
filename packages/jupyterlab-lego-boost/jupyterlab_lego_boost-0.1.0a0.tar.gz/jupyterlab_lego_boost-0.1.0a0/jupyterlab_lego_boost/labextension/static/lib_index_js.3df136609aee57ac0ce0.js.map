{"version":3,"file":"lib_index_js.3df136609aee57ac0ce0.js","mappings":";;;;;;;;;;;;;;;;AAAsD;AACe;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAgB;AAC/B;AACA;AACA;AACA,yCAAyC,wFAAoB;AAC7D;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;ACftB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACmC;AACI;AACvC;AACA;AACA;AACA;AACA,8DAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA+B;AAC/B,kCAAkC,iEAAqB,6BAA6B,oEAAsB;AAC1G;AACA;AACA;AACA;AACA;AACA,4EAAkD;AAClD;AACA;AACA;;AAEA;AACA,mFAAwC;AACxC,qBAAqB,iEAAqB,gBAAgB,oEAAsB;AAChF,sBAAsB,iEAAqB,iBAAiB,oEAAsB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAA0C;AAC1C,qBAAqB,iEAAqB,gBAAgB,oEAAsB;AAChF,sBAAsB,iEAAqB,iBAAiB,oEAAsB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAA6C;AAC7C;AACA;AACA;AACA,uFAA4C;AAC5C;AACA;AACA;AACA,2FAAgD;AAChD;AACA;AACA;AACA,4FAAiD;AACjD;AACA;AACA;AACA,2FAAgD;AAChD;AACA;AACA;AACA,4FAAiD;AACjD;AACA;AACA;AACA,4FAAiD;AACjD,qBAAqB,iEAAqB,gBAAgB,oEAAsB;AAChF,sBAAsB,iEAAqB,iBAAiB,oEAAsB;AAClF;AACA;AACA;AACA,2FAAgD;AAChD,qBAAqB,iEAAqB,gBAAgB,oEAAsB;AAChF,sBAAsB,iEAAqB,iBAAiB,oEAAsB;AAClF;AACA;AACA;AACA,6FAAkD;AAClD,sBAAsB,iEAAqB,iBAAiB,oEAAsB;AAClF,sBAAsB,iEAAqB,iBAAiB,oEAAsB;AAClF;AACA;AACA;AACA,4FAAiD;AACjD,sBAAsB,iEAAqB,iBAAiB,oEAAsB;AAClF,sBAAsB,iEAAqB,iBAAiB,oEAAsB;AAClF;AACA;AACA;AACA,sFAA2C;AAC3C,qBAAqB,iEAAqB,gBAAgB,oEAAsB;AAChF,wBAAwB,iEAAqB,mBAAmB,oEAAsB;AACtF,wBAAwB,iEAAqB,mBAAmB,oEAAsB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAA4C;AAC5C,sBAAsB,iEAAqB,iBAAiB,oEAAsB;AAClF,wBAAwB,iEAAqB,mBAAmB,oEAAsB;AACtF,wBAAwB,iEAAqB,mBAAmB,oEAAsB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAAmC;AACnC,sBAAsB,iEAAqB,iBAAiB,oEAAsB;AAClF;AACA;AACA;AACA,8EAAmC;AACnC;AACA;AACA;AACA,6EAAkC;AAClC;AACA;AACA;AACA,wEAA6B;AAC7B,wBAAwB,iEAAqB,mBAAmB,oEAAsB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2CAAc;AAC1B,eAAe,uDAAS;AACxB;AACA;AACA,iEAAe,YAAY,EAAC","sources":["webpack://jupyterlab-lego-boost/./lib/index.js","webpack://jupyterlab-lego-boost/./lib/lego_boost_python_generators_and_blocks.js"],"sourcesContent":["import { IBlocklyRegistry } from 'jupyterlab-blockly';\nimport BlocklyBoost from './lego_boost_python_generators_and_blocks';\n/**\n * Initialization data for the jupyterlab-lego-boost extension.\n */\nconst plugin = {\n    id: 'jupyterlab-lego-boost:plugin',\n    autoStart: true,\n    requires: [IBlocklyRegistry],\n    activate: (app, blockly) => {\n        console.log('JupyterLab extension jupyterlab-lego-boost is activated!');\n        //Registering the new toolbox containing all Lego Boost blocks.\n        blockly.registerToolbox('boost', BlocklyBoost.Toolbox);\n    }\n};\nexport default plugin;\n","/*\nThis extension uses the pylgbst library, which is under the following license:\n\nMIT License\n\nCopyright (c) 2017 Andrey Pokhilko\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\nimport * as Blockly from 'blockly';\nimport BlocklyPy from 'blockly/python';\nvar lego_boost_color = '#550a8a';\n/*\n * Block definitions\n */\nBlockly.Blocks['lego_boost_connect'] = {\n    init: function () {\n        this.appendValueInput('BLUETOOTH_ADDRESS')\n            .setCheck('String')\n            .appendField('Connect to MoveHub on address');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Connect to Lego Boost given its Bluetooth address.');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_movement_forward'] = {\n    init: function () {\n        this.appendValueInput('TIME')\n            .setCheck('Number')\n            .appendField('Move forward for time');\n        this.appendValueInput('SPEED')\n            .setCheck('Number')\n            .appendField('and with speed');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Move motors AB straight forward for a certain time and speed.');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_movement_backwards'] = {\n    init: function () {\n        this.appendValueInput('TIME')\n            .setCheck('Number')\n            .appendField('Move backwards for time');\n        this.appendValueInput('SPEED')\n            .setCheck('Number')\n            .appendField('and with speed');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Move motors AB straight backwards for a certain time and speed.');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_movement_rotate_left'] = {\n    init: function () {\n        this.appendDummyInput().appendField('Rotate left');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Rotate left.');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_movement_rotate_right'] = {\n    init: function () {\n        this.appendDummyInput().appendField('Rotate right');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Rotate right.');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_movement_rotate_180_left'] = {\n    init: function () {\n        this.appendDummyInput().appendField('Rotate 180° to the left');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Rotate 180° to the left');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_movement_rotate_180_right'] = {\n    init: function () {\n        this.appendDummyInput().appendField('Rotate 180° to the right');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Rotate 180° to the right');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_movement_rotate_360_left'] = {\n    init: function () {\n        this.appendDummyInput().appendField('Rotate 360° to the left');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Rotate 360° to the left');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_movement_rotate_360_right'] = {\n    init: function () {\n        this.appendDummyInput().appendField('Rotate 360° to the right');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Rotate 360° to the right');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_movement_turn_right_timed'] = {\n    init: function () {\n        this.appendValueInput('TIME')\n            .setCheck('Number')\n            .appendField('Turn right for time');\n        this.appendValueInput('SPEED')\n            .setCheck('Number')\n            .appendField('and with speed');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Turn right for a certain time and speed.');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_movement_turn_left_timed'] = {\n    init: function () {\n        this.appendValueInput('TIME')\n            .setCheck('Number')\n            .appendField('Turn left for time');\n        this.appendValueInput('SPEED')\n            .setCheck('Number')\n            .appendField('and with speed');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Turn left for a certain time and speed.');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_movement_turn_right_angled'] = {\n    init: function () {\n        this.appendValueInput('ANGLE')\n            .setCheck('Number')\n            .appendField('Turn right at ');\n        this.appendValueInput('SPEED')\n            .setCheck('Number')\n            .appendField('angle and with speed');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Turn right at a certain angle and speed.');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_movement_turn_left_angled'] = {\n    init: function () {\n        this.appendValueInput('ANGLE')\n            .setCheck('Number')\n            .appendField('Turn left at ');\n        this.appendValueInput('SPEED')\n            .setCheck('Number')\n            .appendField('angle and with speed');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Turn left at a certain angle and speed.');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_move_motor_ab_timed'] = {\n    init: function () {\n        this.appendValueInput('TIME')\n            .setCheck('Number')\n            .appendField('Move both motors for time');\n        this.appendValueInput('SPEED_A')\n            .setCheck('Number')\n            .appendField('and speeds for the right motor');\n        this.appendValueInput('SPEED_B')\n            .setCheck('Number')\n            .appendField('and left motor');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Move motors AB for a certain time and speed.');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_move_motor_ab_angled'] = {\n    init: function () {\n        this.appendValueInput('ANGLE')\n            .setCheck('Number')\n            .appendField('Move both motors at angle');\n        this.appendValueInput('SPEED_A')\n            .setCheck('Number')\n            .appendField('with speeds for right motor');\n        this.appendValueInput('SPEED_B')\n            .setCheck('Number')\n            .appendField('and left motor');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Move group motors AB at a certain angle and speed.');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_stop_motors'] = {\n    init: function () {\n        this.appendDummyInput().appendField('Stop motors');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Stop motor.');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_disconnect'] = {\n    init: function () {\n        this.appendDummyInput().appendField('Disconnect from MoveHub');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Disconnect from Lego Boost.');\n        this.setHelpUrl('');\n    }\n};\nBlockly.Blocks['lego_boost_sleep'] = {\n    init: function () {\n        this.appendValueInput('SECONDS').setCheck('Number').appendField('Wait for');\n        this.appendDummyInput('minutes');\n        this.setInputsInline(true);\n        this.setPreviousStatement(true, null);\n        this.setNextStatement(true, null);\n        this.setColour(lego_boost_color);\n        this.setTooltip('Wait for a given time.');\n        this.setHelpUrl('');\n    }\n};\n/*\n * Generators\n */\nBlocklyPy['lego_boost_connect'] = function (block) {\n    var value_bluetooth_address = BlocklyPy.valueToCode(block, 'BLUETOOTH_ADDRESS', BlocklyPy.ORDER_ATOMIC);\n    var code = 'conn = get_connection_bleak(hub_mac=' +\n        value_bluetooth_address +\n        ', hub_name=MoveHub.DEFAULT_NAME)\\nhub = MoveHub(conn)\\n';\n    return code;\n};\nBlockly.Blocks['lego_boost_connect'].toplevel_init = `\nfrom pylgbst.hub import MoveHub\nfrom pylgbst import get_connection_bleak\nimport time \n\n`;\nBlocklyPy['lego_boost_movement_forward'] = function (block) {\n    var value_time = BlocklyPy.valueToCode(block, 'TIME', BlocklyPy.ORDER_ATOMIC);\n    var value_speed = BlocklyPy.valueToCode(block, 'SPEED', BlocklyPy.ORDER_ATOMIC);\n    var code = 'hub.motor_AB.timed(' +\n        value_time +\n        ', ' +\n        value_speed +\n        ', ' +\n        value_speed +\n        ')\\n';\n    return code;\n};\nBlocklyPy['lego_boost_movement_backwards'] = function (block) {\n    var value_time = BlocklyPy.valueToCode(block, 'TIME', BlocklyPy.ORDER_ATOMIC);\n    var value_speed = BlocklyPy.valueToCode(block, 'SPEED', BlocklyPy.ORDER_ATOMIC);\n    var code = 'hub.motor_AB.timed( ' +\n        value_time +\n        ', -' +\n        value_speed +\n        ', -' +\n        value_speed +\n        ')\\n';\n    return code;\n};\nBlocklyPy['lego_boost_movement_rotate_right'] = function (block) {\n    var code = 'hub.motor_A.angled(540, 1)\\n';\n    return code;\n};\nBlocklyPy['lego_boost_movement_rotate_left'] = function (block) {\n    var code = 'hub.motor_B.angled(540, 1)\\n';\n    return code;\n};\nBlocklyPy['lego_boost_movement_rotate_180_left'] = function (block) {\n    var code = 'hub.motor_B.angled(1080, 1)\\n';\n    return code;\n};\nBlocklyPy['lego_boost_movement_rotate_180_right'] = function (block) {\n    var code = 'hub.motor_A.angled(1080, 1)\\n';\n    return code;\n};\nBlocklyPy['lego_boost_movement_rotate_360_left'] = function (block) {\n    var code = 'hub.motor_B.timed(1.7, 1)\\n';\n    return code;\n};\nBlocklyPy['lego_boost_movement_rotate_360_right'] = function (block) {\n    var code = 'hub.motor_A.timed(1.7, 1)\\n';\n    return code;\n};\nBlocklyPy['lego_boost_movement_turn_right_timed'] = function (block) {\n    var value_time = BlocklyPy.valueToCode(block, 'TIME', BlocklyPy.ORDER_ATOMIC);\n    var value_speed = BlocklyPy.valueToCode(block, 'SPEED', BlocklyPy.ORDER_ATOMIC);\n    var code = 'hub.motor_A.timed(' + value_time + ', ' + value_speed + ')\\n';\n    return code;\n};\nBlocklyPy['lego_boost_movement_turn_left_timed'] = function (block) {\n    var value_time = BlocklyPy.valueToCode(block, 'TIME', BlocklyPy.ORDER_ATOMIC);\n    var value_speed = BlocklyPy.valueToCode(block, 'SPEED', BlocklyPy.ORDER_ATOMIC);\n    var code = 'hub.motor_B.timed(' + value_time + ', ' + value_speed + ')\\n';\n    return code;\n};\nBlocklyPy['lego_boost_movement_turn_right_angled'] = function (block) {\n    var value_angle = BlocklyPy.valueToCode(block, 'ANGLE', BlocklyPy.ORDER_ATOMIC);\n    var value_speed = BlocklyPy.valueToCode(block, 'SPEED', BlocklyPy.ORDER_ATOMIC);\n    var code = 'hub.motor_A.angled(' + value_angle * 6 + ', ' + value_speed + ')\\n';\n    return code;\n};\nBlocklyPy['lego_boost_movement_turn_left_angled'] = function (block) {\n    var value_angle = BlocklyPy.valueToCode(block, 'ANGLE', BlocklyPy.ORDER_ATOMIC);\n    var value_speed = BlocklyPy.valueToCode(block, 'SPEED', BlocklyPy.ORDER_ATOMIC);\n    var code = 'hub.motor_B.angled(' + value_angle * 6 + ', ' + value_speed + ')\\n';\n    return code;\n};\nBlocklyPy['lego_boost_move_motor_ab_timed'] = function (block) {\n    var value_time = BlocklyPy.valueToCode(block, 'TIME', BlocklyPy.ORDER_ATOMIC);\n    var value_speed_a = BlocklyPy.valueToCode(block, 'SPEED_A', BlocklyPy.ORDER_ATOMIC);\n    var value_speed_b = BlocklyPy.valueToCode(block, 'SPEED_B', BlocklyPy.ORDER_ATOMIC);\n    var code = 'hub.motor_AB.timed(' +\n        value_time +\n        ', ' +\n        value_speed_a +\n        ', ' +\n        value_speed_b +\n        ')\\n';\n    return code;\n};\nBlocklyPy['lego_boost_move_motor_ab_angled'] = function (block) {\n    var value_angle = BlocklyPy.valueToCode(block, 'ANGLE', BlocklyPy.ORDER_ATOMIC);\n    var value_speed_a = BlocklyPy.valueToCode(block, 'SPEED_A', BlocklyPy.ORDER_ATOMIC);\n    var value_speed_b = BlocklyPy.valueToCode(block, 'SPEED_B', BlocklyPy.ORDER_ATOMIC);\n    var code = 'hub.motor_AB.angled(' +\n        value_angle +\n        ', ' +\n        value_speed_a * ', ' +\n        value_speed_b +\n        ')\\n';\n    return code;\n};\nBlocklyPy['lego_boost_start_speed'] = function (block) {\n    var value_speed = BlocklyPy.valueToCode(block, 'SPEED', BlocklyPy.ORDER_ATOMIC);\n    var code = 'hub.motor_external.start_speed(' + value_speed + ')\\n';\n    return code;\n};\nBlocklyPy['lego_boost_stop_motors'] = function (block) {\n    var code = 'hub.motor_external.stop()\\n';\n    return code;\n};\nBlocklyPy['lego_boost_disconnect'] = function (block) {\n    var code = 'hub.disconnect()\\n';\n    return code;\n};\nBlocklyPy['lego_boost_sleep'] = function (block) {\n    var value_seconds = BlocklyPy.valueToCode(block, 'SECONDS', BlocklyPy.ORDER_ATOMIC);\n    var code = 'time.sleep(' + value_seconds + ')\\n';\n    return code;\n};\n// Creating a toolbox containing all the main blocks\n// and adding the lego boost catgory.\nconst TOOLBOX = {\n    kind: 'categoryToolbox',\n    contents: [\n        {\n            kind: 'category',\n            name: 'Logic',\n            colour: '210',\n            contents: [\n                {\n                    kind: 'block',\n                    type: 'controls_if'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'logic_compare'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"logic_operation\"></block>',\n                    type: 'logic_operation'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"logic_negate\"></block>',\n                    type: 'logic_negate'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"logic_boolean\"></block>',\n                    type: 'logic_boolean'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"logic_null\"></block>',\n                    type: 'logic_null'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"logic_ternary\"></block>',\n                    type: 'logic_ternary'\n                }\n            ]\n        },\n        {\n            kind: 'category',\n            name: 'Loops',\n            colour: '120',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"controls_repeat_ext\">\\n          <value name=\"TIMES\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">10</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'controls_repeat_ext'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"controls_whileUntil\"></block>',\n                    type: 'controls_whileUntil'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"controls_for\">\\n          <value name=\"FROM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n          <value name=\"TO\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">10</field>\\n            </shadow>\\n          </value>\\n          <value name=\"BY\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'controls_for'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"controls_forEach\"></block>',\n                    type: 'controls_forEach'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"controls_flow_statements\"></block>',\n                    type: 'controls_flow_statements'\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: 'Math',\n            colour: '230',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_number\"></block>',\n                    type: 'math_number'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_arithmetic\">\\n          <value name=\"A\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n          <value name=\"B\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_arithmetic'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_single\">\\n          <value name=\"NUM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">9</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_single'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_trig\">\\n          <value name=\"NUM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">45</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_trig'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_constant\"></block>',\n                    type: 'math_constant'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_number_property\">\\n          <value name=\"NUMBER_TO_CHECK\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">0</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_number_property'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_change\">\\n          <value name=\"DELTA\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_change'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_round\">\\n          <value name=\"NUM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">3.1</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_round'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_on_list\"></block>',\n                    type: 'math_on_list'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_modulo\">\\n          <value name=\"DIVIDEND\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">64</field>\\n            </shadow>\\n          </value>\\n          <value name=\"DIVISOR\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">10</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_modulo'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_constrain\">\\n          <value name=\"VALUE\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">50</field>\\n            </shadow>\\n          </value>\\n          <value name=\"LOW\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n          <value name=\"HIGH\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">100</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_constrain'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_random_int\">\\n          <value name=\"FROM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n          <value name=\"TO\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">100</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_random_int'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_random_float\"></block>',\n                    type: 'math_random_float'\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: 'Text',\n            colour: '160',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text\"></block>',\n                    type: 'text'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_join\"></block>',\n                    type: 'text_join'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_append\">\\n          <value name=\"TEXT\">\\n            <shadow type=\"text\"></shadow>\\n          </value>\\n        </block>',\n                    type: 'text_append'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_length\">\\n          <value name=\"VALUE\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_length'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_isEmpty\">\\n          <value name=\"VALUE\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\"></field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_isEmpty'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_indexOf\">\\n          <value name=\"VALUE\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">text</field>\\n            </block>\\n          </value>\\n          <value name=\"FIND\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_indexOf'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_charAt\">\\n          <value name=\"VALUE\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">text</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'text_charAt'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_getSubstring\">\\n          <value name=\"STRING\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">text</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'text_getSubstring'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_changeCase\">\\n          <value name=\"TEXT\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_changeCase'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_trim\">\\n          <value name=\"TEXT\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_trim'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_print\">\\n          <value name=\"TEXT\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_print'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_prompt_ext\">\\n          <value name=\"TEXT\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_prompt_ext'\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: 'Lists',\n            colour: '260',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_create_with\">\\n          <mutation items=\"0\"></mutation>\\n        </block>',\n                    type: 'lists_create_with'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_create_with\"></block>',\n                    type: 'lists_create_with'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_repeat\">\\n          <value name=\"NUM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">5</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'lists_repeat'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_length\"></block>',\n                    type: 'lists_length'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_isEmpty\"></block>',\n                    type: 'lists_isEmpty'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_indexOf\">\\n          <value name=\"VALUE\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">list</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'lists_indexOf'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_getIndex\">\\n          <value name=\"VALUE\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">list</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'lists_getIndex'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_setIndex\">\\n          <value name=\"LIST\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">list</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'lists_setIndex'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_getSublist\">\\n          <value name=\"LIST\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">list</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'lists_getSublist'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_split\">\\n          <value name=\"DELIM\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">,</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'lists_split'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_sort\"></block>',\n                    type: 'lists_sort'\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: 'Color',\n            colour: '20',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"colour_picker\"></block>',\n                    type: 'colour_picker'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"colour_random\"></block>',\n                    type: 'colour_random'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"colour_rgb\">\\n          <value name=\"RED\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">100</field>\\n            </shadow>\\n          </value>\\n          <value name=\"GREEN\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">50</field>\\n            </shadow>\\n          </value>\\n          <value name=\"BLUE\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">0</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'colour_rgb'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"colour_blend\">\\n          <value name=\"COLOUR1\">\\n            <shadow type=\"colour_picker\">\\n              <field name=\"COLOUR\">#ff0000</field>\\n            </shadow>\\n          </value>\\n          <value name=\"COLOUR2\">\\n            <shadow type=\"colour_picker\">\\n              <field name=\"COLOUR\">#3333ff</field>\\n            </shadow>\\n          </value>\\n          <value name=\"RATIO\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">0.5</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'colour_blend'\n                }\n            ]\n        },\n        {\n            kind: 'SEP'\n        },\n        {\n            kind: 'CATEGORY',\n            colour: '330',\n            custom: 'VARIABLE',\n            name: 'Variables'\n        },\n        {\n            kind: 'CATEGORY',\n            colour: '290',\n            custom: 'PROCEDURE',\n            name: 'Functions'\n        },\n        {\n            kind: 'SEP'\n        },\n        {\n            kind: 'CATEGORY',\n            colour: lego_boost_color,\n            name: 'Lego Boost',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_connect'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_movement_forward'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_movement_backwards'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_movement_rotate_left'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_movement_rotate_right'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_movement_rotate_180_left'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_movement_rotate_180_right'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_movement_rotate_360_left'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_movement_rotate_360_right'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_movement_turn_left_timed'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_movement_turn_right_timed'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_movement_turn_left_angled'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_movement_turn_right_angled'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_move_motor_ab_timed'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_move_motor_ab_angled'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_stop_motors'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_disconnect'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lego_boost_sleep'\n                }\n            ]\n        }\n    ]\n};\nconst BlocklyBoost = {\n    Blocks: Blockly.Blocks,\n    Generator: BlocklyPy,\n    Toolbox: TOOLBOX\n};\nexport default BlocklyBoost;\n"],"names":[],"sourceRoot":""}