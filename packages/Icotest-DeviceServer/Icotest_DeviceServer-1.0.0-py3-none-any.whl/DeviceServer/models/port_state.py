# coding: utf-8

"""
    DeviceServer

    DeviceServer API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: david@3adesign.co.uk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from DeviceServer.configuration import Configuration


class PortState(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'state_index': 'int',
        'description': 'str'
    }

    attribute_map = {
        'state_index': 'state_index',
        'description': 'description'
    }

    def __init__(self, state_index=None, description=None, local_vars_configuration=None):  # noqa: E501
        """PortState - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._state_index = None
        self._description = None
        self.discriminator = None

        self.state_index = state_index
        if description is not None:
            self.description = description

    @property
    def state_index(self):
        """Gets the state_index of this PortState.  # noqa: E501

        State number between 1 to 100  # noqa: E501

        :return: The state_index of this PortState.  # noqa: E501
        :rtype: int
        """
        return self._state_index

    @state_index.setter
    def state_index(self, state_index):
        """Sets the state_index of this PortState.

        State number between 1 to 100  # noqa: E501

        :param state_index: The state_index of this PortState.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and state_index is None:  # noqa: E501
            raise ValueError("Invalid value for `state_index`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                state_index is not None and state_index > 100):  # noqa: E501
            raise ValueError("Invalid value for `state_index`, must be a value less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                state_index is not None and state_index < 1):  # noqa: E501
            raise ValueError("Invalid value for `state_index`, must be a value greater than or equal to `1`")  # noqa: E501

        self._state_index = state_index

    @property
    def description(self):
        """Gets the description of this PortState.  # noqa: E501

        Label for state can be set on per port basis  # noqa: E501

        :return: The description of this PortState.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PortState.

        Label for state can be set on per port basis  # noqa: E501

        :param description: The description of this PortState.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortState):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PortState):
            return True

        return self.to_dict() != other.to_dict()
