assert(loadfile("/tmp/tmp0qgvk2x8"))()

        sharedata, readSharedMemory, openSharedMemory, closeSharedMemory = require ("madl_mmap").sharedata, require ("madl_mmap").readSharedMemory, require ("madl_mmap").openSharedMemory, require ("madl_mmap").closeSharedMemory

        assert(loadfile("/tmp/tmpfthy9xkt"))()

        local tostring = tostring
        function getModName(modname, mod)
            io.write(modname .. "|" .. tostring(mod) .. ";")
        end
        io.write("Modules:\n")
        for modname, mod in pairs(MAD) do pcall(getModName, modname, mod) end io.write("\n")assert(loadfile("/tmp/tmppxi4bqk8"))()
mtable = MAD.mtableassert(loadfile("/tmp/tmp2ueuekqc"))()
object = MAD.objectassert(loadfile("/tmp/tmphglmo7kg"))()
sequence = MAD.sequenceassert(loadfile("/tmp/tmp2x4aa4u3"))()
survey = MAD.surveyassert(loadfile("/tmp/tmpvo_oyokx"))()
twiss = MAD.twissassert(loadfile("/tmp/tmpdt6h6vz8"))()
match = MAD.matchassert(loadfile("/tmp/tmpz1llnr2m"))()
MAD = MAD.MADassert(loadfile("/tmp/tmp0t59qdp5"))()
track = MAD.trackassert(loadfile("/tmp/tmprata6g_0"))()
beam = MAD.beamassert(loadfile("/tmp/tmpfqgbv0a6"))()
beta0 = MAD.beta0assert(loadfile("/tmp/tmp4r6ym277"))()

        local tostring = tostring
        function getModName(modname, mod)
            io.write(modname .. "|" .. tostring(mod) .. ";")
        end
        io.write("Modules:\n")
        for modname, mod in pairs(MAD.element) do pcall(getModName, modname, mod) end io.write("\n")assert(loadfile("/tmp/tmp6keqa33_"))()
rfmultipole = MAD.element.rfmultipoleassert(loadfile("/tmp/tmpt8yaxvzs"))()
nllens = MAD.element.nllensassert(loadfile("/tmp/tmp3ryvbm40"))()
beambeam = MAD.element.beambeamassert(loadfile("/tmp/tmp2mdd1mpk"))()
multipole = MAD.element.multipoleassert(loadfile("/tmp/tmpfk0bmalp"))()
element = MAD.element.elementassert(loadfile("/tmp/tmpg6ejbwun"))()
flags = MAD.element.flagsassert(loadfile("/tmp/tmpt27aqdr4"))()
rfcavity = MAD.element.rfcavityassert(loadfile("/tmp/tmp8l64oy4b"))()
elseparator = MAD.element.elseparatorassert(loadfile("/tmp/tmp6rt1hd3r"))()
wiggler = MAD.element.wigglerassert(loadfile("/tmp/tmpq70300qa"))()
tkicker = MAD.element.tkickerassert(loadfile("/tmp/tmp8kxku01x"))()
solenoid = MAD.element.solenoidassert(loadfile("/tmp/tmpipr5bcmh"))()
translate = MAD.element.translateassert(loadfile("/tmp/tmpb5lhyx_q"))()
dodecapole = MAD.element.dodecapoleassert(loadfile("/tmp/tmpjkeyfzyu"))()
decapole = MAD.element.decapoleassert(loadfile("/tmp/tmp1ed5iwfq"))()
changedir = MAD.element.changedirassert(loadfile("/tmp/tmpquxp2ie9"))()
changeref = MAD.element.changerefassert(loadfile("/tmp/tmp1e9_ufr4"))()
octupole = MAD.element.octupoleassert(loadfile("/tmp/tmpxd1f4nv1"))()
yrotation = MAD.element.yrotationassert(loadfile("/tmp/tmpbx4ny5bh"))()
xrotation = MAD.element.xrotationassert(loadfile("/tmp/tmpbcqreuzp"))()
sextupole = MAD.element.sextupoleassert(loadfile("/tmp/tmp4wdzz0nr"))()
quadrupole = MAD.element.quadrupoleassert(loadfile("/tmp/tmp9gpko2k5"))()
bline = MAD.element.blineassert(loadfile("/tmp/tmp6yiji5_5"))()
rbend = MAD.element.rbendassert(loadfile("/tmp/tmpykylb5hp"))()
sbend = MAD.element.sbendassert(loadfile("/tmp/tmppbsc78in"))()
placeholder = MAD.element.placeholderassert(loadfile("/tmp/tmpa8ub9y04"))()
instrument = MAD.element.instrumentassert(loadfile("/tmp/tmp2owsac51"))()
collimator = MAD.element.collimatorassert(loadfile("/tmp/tmpbthag79w"))()
drift = MAD.element.driftassert(loadfile("/tmp/tmp8c2e855h"))()
slink = MAD.element.slinkassert(loadfile("/tmp/tmpf0g0lv8_"))()
marker = MAD.element.markerassert(loadfile("/tmp/tmpqtklbb69"))()
assembly = MAD.element.assemblyassert(loadfile("/tmp/tmp0v60ljtz"))()
specl_element = MAD.element.specl_elementassert(loadfile("/tmp/tmplqewbjmn"))()
extrn_element = MAD.element.extrn_elementassert(loadfile("/tmp/tmppsruvk0r"))()
vkicker = MAD.element.vkickerassert(loadfile("/tmp/tmpl_vybnu5"))()
patch_element = MAD.element.patch_elementassert(loadfile("/tmp/tmp0nics6bp"))()
hkicker = MAD.element.hkickerassert(loadfile("/tmp/tmpaw5z4cl9"))()
thick_element = MAD.element.thick_elementassert(loadfile("/tmp/tmpbub1xdiz"))()
kicker = MAD.element.kickerassert(loadfile("/tmp/tmp95wi4lar"))()
drift_element = MAD.element.drift_elementassert(loadfile("/tmp/tmp245zsw2n"))()
hmonitor = MAD.element.hmonitorassert(loadfile("/tmp/tmp4sd3wvni"))()
vmonitor = MAD.element.vmonitorassert(loadfile("/tmp/tmpctcbm7kk"))()
changenrj = MAD.element.changenrjassert(loadfile("/tmp/tmp8sgygm4q"))()
thin_element = MAD.element.thin_elementassert(loadfile("/tmp/tmpmq9w2l3y"))()
srotation = MAD.element.srotationassert(loadfile("/tmp/tmpf_elwhf7"))()
monitor = MAD.element.monitorassert(loadfile("/tmp/tmp452ccfki"))()
crabcavity = MAD.element.crabcavityassert(loadfile("/tmp/tmpx9vdky9s"))()
sequence = MAD.element.sequenceassert(loadfile("/tmp/tmpc4t2z9oy"))()
genmap = MAD.element.genmapassert(loadfile("/tmp/tmp008euvz6"))()

        local tostring = tostring
        function getModName(modname, mod)
            io.write(modname .. "|" .. tostring(mod) .. ";")
        end
        io.write("Modules:\n")
        for modname, mod in pairs(MAD) do pcall(getModName, modname, mod) end io.write("\n")assert(loadfile("/tmp/tmp1h87ij5s"))()
MAD = MAD.MADassert(loadfile("/tmp/tmph0pt8gk6"))()
local readIMatrix, readMatrix, readCMatrix, readScalar in require ("madl_mmap")
openSharedMemory("psm_8583c161")
a = readMatrix({1, 5})
closeSharedMemory()
