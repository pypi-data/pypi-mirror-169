# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'AddressDto',
        'assigned_managers_name': 'list[str]',
        'assigned_to': 'int',
        'client_id': 'str',
        'company_id': 'int',
        'company_preferences': 'dict(str, object)',
        'company_status': 'str',
        'contact_number': 'str',
        'corresponding_kc_id': 'str',
        'country_code': 'str',
        'data': 'dict(str, object)',
        'deleted': 'bool',
        'email': 'str',
        'id': 'int',
        'images': 'dict(str, object)',
        'is_acre_square_user': 'bool',
        'location': 'str',
        'locations': 'LocationDto',
        'managers': 'list[int]',
        'managers_name': 'str',
        'name': 'str',
        'parent_company_id': 'int',
        'preferences': 'PreferencesDto',
        'resources': 'list[KeycloakResourceDto]',
        'user_role_id': 'int',
        'user_role_name': 'str',
        'user_status': 'str'
    }

    attribute_map = {
        'address': 'address',
        'assigned_managers_name': 'assignedManagersName',
        'assigned_to': 'assignedTo',
        'client_id': 'clientId',
        'company_id': 'companyId',
        'company_preferences': 'companyPreferences',
        'company_status': 'companyStatus',
        'contact_number': 'contactNumber',
        'corresponding_kc_id': 'correspondingKcId',
        'country_code': 'countryCode',
        'data': 'data',
        'deleted': 'deleted',
        'email': 'email',
        'id': 'id',
        'images': 'images',
        'is_acre_square_user': 'isAcreSquareUser',
        'location': 'location',
        'locations': 'locations',
        'managers': 'managers',
        'managers_name': 'managersName',
        'name': 'name',
        'parent_company_id': 'parentCompanyId',
        'preferences': 'preferences',
        'resources': 'resources',
        'user_role_id': 'userRoleId',
        'user_role_name': 'userRoleName',
        'user_status': 'userStatus'
    }

    def __init__(self, address=None, assigned_managers_name=None, assigned_to=None, client_id=None, company_id=None, company_preferences=None, company_status=None, contact_number=None, corresponding_kc_id=None, country_code=None, data=None, deleted=None, email=None, id=None, images=None, is_acre_square_user=None, location=None, locations=None, managers=None, managers_name=None, name=None, parent_company_id=None, preferences=None, resources=None, user_role_id=None, user_role_name=None, user_status=None):  # noqa: E501
        """UserDto - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._assigned_managers_name = None
        self._assigned_to = None
        self._client_id = None
        self._company_id = None
        self._company_preferences = None
        self._company_status = None
        self._contact_number = None
        self._corresponding_kc_id = None
        self._country_code = None
        self._data = None
        self._deleted = None
        self._email = None
        self._id = None
        self._images = None
        self._is_acre_square_user = None
        self._location = None
        self._locations = None
        self._managers = None
        self._managers_name = None
        self._name = None
        self._parent_company_id = None
        self._preferences = None
        self._resources = None
        self._user_role_id = None
        self._user_role_name = None
        self._user_status = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if assigned_managers_name is not None:
            self.assigned_managers_name = assigned_managers_name
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if client_id is not None:
            self.client_id = client_id
        self.company_id = company_id
        if company_preferences is not None:
            self.company_preferences = company_preferences
        if company_status is not None:
            self.company_status = company_status
        if contact_number is not None:
            self.contact_number = contact_number
        if corresponding_kc_id is not None:
            self.corresponding_kc_id = corresponding_kc_id
        if country_code is not None:
            self.country_code = country_code
        if data is not None:
            self.data = data
        if deleted is not None:
            self.deleted = deleted
        if email is not None:
            self.email = email
        if id is not None:
            self.id = id
        if images is not None:
            self.images = images
        if is_acre_square_user is not None:
            self.is_acre_square_user = is_acre_square_user
        if location is not None:
            self.location = location
        if locations is not None:
            self.locations = locations
        if managers is not None:
            self.managers = managers
        if managers_name is not None:
            self.managers_name = managers_name
        self.name = name
        if parent_company_id is not None:
            self.parent_company_id = parent_company_id
        if preferences is not None:
            self.preferences = preferences
        if resources is not None:
            self.resources = resources
        self.user_role_id = user_role_id
        if user_role_name is not None:
            self.user_role_name = user_role_name
        if user_status is not None:
            self.user_status = user_status

    @property
    def address(self):
        """Gets the address of this UserDto.  # noqa: E501


        :return: The address of this UserDto.  # noqa: E501
        :rtype: AddressDto
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UserDto.


        :param address: The address of this UserDto.  # noqa: E501
        :type: AddressDto
        """

        self._address = address

    @property
    def assigned_managers_name(self):
        """Gets the assigned_managers_name of this UserDto.  # noqa: E501


        :return: The assigned_managers_name of this UserDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._assigned_managers_name

    @assigned_managers_name.setter
    def assigned_managers_name(self, assigned_managers_name):
        """Sets the assigned_managers_name of this UserDto.


        :param assigned_managers_name: The assigned_managers_name of this UserDto.  # noqa: E501
        :type: list[str]
        """

        self._assigned_managers_name = assigned_managers_name

    @property
    def assigned_to(self):
        """Gets the assigned_to of this UserDto.  # noqa: E501


        :return: The assigned_to of this UserDto.  # noqa: E501
        :rtype: int
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this UserDto.


        :param assigned_to: The assigned_to of this UserDto.  # noqa: E501
        :type: int
        """

        self._assigned_to = assigned_to

    @property
    def client_id(self):
        """Gets the client_id of this UserDto.  # noqa: E501


        :return: The client_id of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this UserDto.


        :param client_id: The client_id of this UserDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def company_id(self):
        """Gets the company_id of this UserDto.  # noqa: E501


        :return: The company_id of this UserDto.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this UserDto.


        :param company_id: The company_id of this UserDto.  # noqa: E501
        :type: int
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")  # noqa: E501

        self._company_id = company_id

    @property
    def company_preferences(self):
        """Gets the company_preferences of this UserDto.  # noqa: E501


        :return: The company_preferences of this UserDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._company_preferences

    @company_preferences.setter
    def company_preferences(self, company_preferences):
        """Sets the company_preferences of this UserDto.


        :param company_preferences: The company_preferences of this UserDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._company_preferences = company_preferences

    @property
    def company_status(self):
        """Gets the company_status of this UserDto.  # noqa: E501


        :return: The company_status of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._company_status

    @company_status.setter
    def company_status(self, company_status):
        """Sets the company_status of this UserDto.


        :param company_status: The company_status of this UserDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "TRIAL", "DEMO", "DISABLE", "DELETE"]  # noqa: E501
        if company_status not in allowed_values:
            raise ValueError(
                "Invalid value for `company_status` ({0}), must be one of {1}"  # noqa: E501
                .format(company_status, allowed_values)
            )

        self._company_status = company_status

    @property
    def contact_number(self):
        """Gets the contact_number of this UserDto.  # noqa: E501


        :return: The contact_number of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._contact_number

    @contact_number.setter
    def contact_number(self, contact_number):
        """Sets the contact_number of this UserDto.


        :param contact_number: The contact_number of this UserDto.  # noqa: E501
        :type: str
        """

        self._contact_number = contact_number

    @property
    def corresponding_kc_id(self):
        """Gets the corresponding_kc_id of this UserDto.  # noqa: E501


        :return: The corresponding_kc_id of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._corresponding_kc_id

    @corresponding_kc_id.setter
    def corresponding_kc_id(self, corresponding_kc_id):
        """Sets the corresponding_kc_id of this UserDto.


        :param corresponding_kc_id: The corresponding_kc_id of this UserDto.  # noqa: E501
        :type: str
        """

        self._corresponding_kc_id = corresponding_kc_id

    @property
    def country_code(self):
        """Gets the country_code of this UserDto.  # noqa: E501


        :return: The country_code of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this UserDto.


        :param country_code: The country_code of this UserDto.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def data(self):
        """Gets the data of this UserDto.  # noqa: E501


        :return: The data of this UserDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this UserDto.


        :param data: The data of this UserDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def deleted(self):
        """Gets the deleted of this UserDto.  # noqa: E501


        :return: The deleted of this UserDto.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this UserDto.


        :param deleted: The deleted of this UserDto.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def email(self):
        """Gets the email of this UserDto.  # noqa: E501


        :return: The email of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserDto.


        :param email: The email of this UserDto.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this UserDto.  # noqa: E501


        :return: The id of this UserDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDto.


        :param id: The id of this UserDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this UserDto.  # noqa: E501


        :return: The images of this UserDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this UserDto.


        :param images: The images of this UserDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._images = images

    @property
    def is_acre_square_user(self):
        """Gets the is_acre_square_user of this UserDto.  # noqa: E501


        :return: The is_acre_square_user of this UserDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_acre_square_user

    @is_acre_square_user.setter
    def is_acre_square_user(self, is_acre_square_user):
        """Sets the is_acre_square_user of this UserDto.


        :param is_acre_square_user: The is_acre_square_user of this UserDto.  # noqa: E501
        :type: bool
        """

        self._is_acre_square_user = is_acre_square_user

    @property
    def location(self):
        """Gets the location of this UserDto.  # noqa: E501


        :return: The location of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this UserDto.


        :param location: The location of this UserDto.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def locations(self):
        """Gets the locations of this UserDto.  # noqa: E501


        :return: The locations of this UserDto.  # noqa: E501
        :rtype: LocationDto
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this UserDto.


        :param locations: The locations of this UserDto.  # noqa: E501
        :type: LocationDto
        """

        self._locations = locations

    @property
    def managers(self):
        """Gets the managers of this UserDto.  # noqa: E501


        :return: The managers of this UserDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._managers

    @managers.setter
    def managers(self, managers):
        """Sets the managers of this UserDto.


        :param managers: The managers of this UserDto.  # noqa: E501
        :type: list[int]
        """

        self._managers = managers

    @property
    def managers_name(self):
        """Gets the managers_name of this UserDto.  # noqa: E501


        :return: The managers_name of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._managers_name

    @managers_name.setter
    def managers_name(self, managers_name):
        """Sets the managers_name of this UserDto.


        :param managers_name: The managers_name of this UserDto.  # noqa: E501
        :type: str
        """

        self._managers_name = managers_name

    @property
    def name(self):
        """Gets the name of this UserDto.  # noqa: E501


        :return: The name of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserDto.


        :param name: The name of this UserDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def parent_company_id(self):
        """Gets the parent_company_id of this UserDto.  # noqa: E501


        :return: The parent_company_id of this UserDto.  # noqa: E501
        :rtype: int
        """
        return self._parent_company_id

    @parent_company_id.setter
    def parent_company_id(self, parent_company_id):
        """Sets the parent_company_id of this UserDto.


        :param parent_company_id: The parent_company_id of this UserDto.  # noqa: E501
        :type: int
        """

        self._parent_company_id = parent_company_id

    @property
    def preferences(self):
        """Gets the preferences of this UserDto.  # noqa: E501


        :return: The preferences of this UserDto.  # noqa: E501
        :rtype: PreferencesDto
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this UserDto.


        :param preferences: The preferences of this UserDto.  # noqa: E501
        :type: PreferencesDto
        """

        self._preferences = preferences

    @property
    def resources(self):
        """Gets the resources of this UserDto.  # noqa: E501


        :return: The resources of this UserDto.  # noqa: E501
        :rtype: list[KeycloakResourceDto]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this UserDto.


        :param resources: The resources of this UserDto.  # noqa: E501
        :type: list[KeycloakResourceDto]
        """

        self._resources = resources

    @property
    def user_role_id(self):
        """Gets the user_role_id of this UserDto.  # noqa: E501


        :return: The user_role_id of this UserDto.  # noqa: E501
        :rtype: int
        """
        return self._user_role_id

    @user_role_id.setter
    def user_role_id(self, user_role_id):
        """Sets the user_role_id of this UserDto.


        :param user_role_id: The user_role_id of this UserDto.  # noqa: E501
        :type: int
        """
        if user_role_id is None:
            raise ValueError("Invalid value for `user_role_id`, must not be `None`")  # noqa: E501

        self._user_role_id = user_role_id

    @property
    def user_role_name(self):
        """Gets the user_role_name of this UserDto.  # noqa: E501


        :return: The user_role_name of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._user_role_name

    @user_role_name.setter
    def user_role_name(self, user_role_name):
        """Sets the user_role_name of this UserDto.


        :param user_role_name: The user_role_name of this UserDto.  # noqa: E501
        :type: str
        """

        self._user_role_name = user_role_name

    @property
    def user_status(self):
        """Gets the user_status of this UserDto.  # noqa: E501


        :return: The user_status of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """Sets the user_status of this UserDto.


        :param user_status: The user_status of this UserDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "TRIAL", "DEMO", "DISABLE", "DELETE"]  # noqa: E501
        if user_status not in allowed_values:
            raise ValueError(
                "Invalid value for `user_status` ({0}), must be one of {1}"  # noqa: E501
                .format(user_status, allowed_values)
            )

        self._user_status = user_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
