# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SeedInputDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_number': 'str',
        'client_id': 'str',
        'crop_unit_id': 'int',
        'crop_unit_name': 'str',
        'croppable_area_id': 'int',
        'croppable_area_name': 'str',
        'data': 'dict(str, object)',
        'description': 'str',
        'id': 'int',
        'issue_date': 'datetime',
        'land_id': 'int',
        'land_name': 'str',
        'no_of_skus': 'int',
        'project_id': 'int',
        'project_name': 'str',
        'quantity': 'float',
        'reason_id': 'int',
        'reason_name': 'str',
        'seed_grade_id': 'int',
        'seed_grade_name': 'str',
        'sku_type_id': 'int',
        'sku_type_name': 'str',
        'sku_type_unit_symbol': 'str',
        'sowning_date': 'datetime',
        'variety_id': 'int',
        'variety_name': 'str'
    }

    attribute_map = {
        'batch_number': 'batchNumber',
        'client_id': 'clientId',
        'crop_unit_id': 'cropUnitId',
        'crop_unit_name': 'cropUnitName',
        'croppable_area_id': 'croppableAreaId',
        'croppable_area_name': 'croppableAreaName',
        'data': 'data',
        'description': 'description',
        'id': 'id',
        'issue_date': 'issueDate',
        'land_id': 'landId',
        'land_name': 'landName',
        'no_of_skus': 'noOfSkus',
        'project_id': 'projectId',
        'project_name': 'projectName',
        'quantity': 'quantity',
        'reason_id': 'reasonId',
        'reason_name': 'reasonName',
        'seed_grade_id': 'seedGradeId',
        'seed_grade_name': 'seedGradeName',
        'sku_type_id': 'skuTypeId',
        'sku_type_name': 'skuTypeName',
        'sku_type_unit_symbol': 'skuTypeUnitSymbol',
        'sowning_date': 'sowningDate',
        'variety_id': 'varietyId',
        'variety_name': 'varietyName'
    }

    def __init__(self, batch_number=None, client_id=None, crop_unit_id=None, crop_unit_name=None, croppable_area_id=None, croppable_area_name=None, data=None, description=None, id=None, issue_date=None, land_id=None, land_name=None, no_of_skus=None, project_id=None, project_name=None, quantity=None, reason_id=None, reason_name=None, seed_grade_id=None, seed_grade_name=None, sku_type_id=None, sku_type_name=None, sku_type_unit_symbol=None, sowning_date=None, variety_id=None, variety_name=None):  # noqa: E501
        """SeedInputDto - a model defined in Swagger"""  # noqa: E501
        self._batch_number = None
        self._client_id = None
        self._crop_unit_id = None
        self._crop_unit_name = None
        self._croppable_area_id = None
        self._croppable_area_name = None
        self._data = None
        self._description = None
        self._id = None
        self._issue_date = None
        self._land_id = None
        self._land_name = None
        self._no_of_skus = None
        self._project_id = None
        self._project_name = None
        self._quantity = None
        self._reason_id = None
        self._reason_name = None
        self._seed_grade_id = None
        self._seed_grade_name = None
        self._sku_type_id = None
        self._sku_type_name = None
        self._sku_type_unit_symbol = None
        self._sowning_date = None
        self._variety_id = None
        self._variety_name = None
        self.discriminator = None
        if batch_number is not None:
            self.batch_number = batch_number
        if client_id is not None:
            self.client_id = client_id
        if crop_unit_id is not None:
            self.crop_unit_id = crop_unit_id
        if crop_unit_name is not None:
            self.crop_unit_name = crop_unit_name
        if croppable_area_id is not None:
            self.croppable_area_id = croppable_area_id
        if croppable_area_name is not None:
            self.croppable_area_name = croppable_area_name
        if data is not None:
            self.data = data
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if issue_date is not None:
            self.issue_date = issue_date
        if land_id is not None:
            self.land_id = land_id
        if land_name is not None:
            self.land_name = land_name
        if no_of_skus is not None:
            self.no_of_skus = no_of_skus
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if quantity is not None:
            self.quantity = quantity
        if reason_id is not None:
            self.reason_id = reason_id
        if reason_name is not None:
            self.reason_name = reason_name
        if seed_grade_id is not None:
            self.seed_grade_id = seed_grade_id
        if seed_grade_name is not None:
            self.seed_grade_name = seed_grade_name
        if sku_type_id is not None:
            self.sku_type_id = sku_type_id
        if sku_type_name is not None:
            self.sku_type_name = sku_type_name
        if sku_type_unit_symbol is not None:
            self.sku_type_unit_symbol = sku_type_unit_symbol
        if sowning_date is not None:
            self.sowning_date = sowning_date
        if variety_id is not None:
            self.variety_id = variety_id
        if variety_name is not None:
            self.variety_name = variety_name

    @property
    def batch_number(self):
        """Gets the batch_number of this SeedInputDto.  # noqa: E501


        :return: The batch_number of this SeedInputDto.  # noqa: E501
        :rtype: str
        """
        return self._batch_number

    @batch_number.setter
    def batch_number(self, batch_number):
        """Sets the batch_number of this SeedInputDto.


        :param batch_number: The batch_number of this SeedInputDto.  # noqa: E501
        :type: str
        """

        self._batch_number = batch_number

    @property
    def client_id(self):
        """Gets the client_id of this SeedInputDto.  # noqa: E501


        :return: The client_id of this SeedInputDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this SeedInputDto.


        :param client_id: The client_id of this SeedInputDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def crop_unit_id(self):
        """Gets the crop_unit_id of this SeedInputDto.  # noqa: E501


        :return: The crop_unit_id of this SeedInputDto.  # noqa: E501
        :rtype: int
        """
        return self._crop_unit_id

    @crop_unit_id.setter
    def crop_unit_id(self, crop_unit_id):
        """Sets the crop_unit_id of this SeedInputDto.


        :param crop_unit_id: The crop_unit_id of this SeedInputDto.  # noqa: E501
        :type: int
        """

        self._crop_unit_id = crop_unit_id

    @property
    def crop_unit_name(self):
        """Gets the crop_unit_name of this SeedInputDto.  # noqa: E501


        :return: The crop_unit_name of this SeedInputDto.  # noqa: E501
        :rtype: str
        """
        return self._crop_unit_name

    @crop_unit_name.setter
    def crop_unit_name(self, crop_unit_name):
        """Sets the crop_unit_name of this SeedInputDto.


        :param crop_unit_name: The crop_unit_name of this SeedInputDto.  # noqa: E501
        :type: str
        """

        self._crop_unit_name = crop_unit_name

    @property
    def croppable_area_id(self):
        """Gets the croppable_area_id of this SeedInputDto.  # noqa: E501


        :return: The croppable_area_id of this SeedInputDto.  # noqa: E501
        :rtype: int
        """
        return self._croppable_area_id

    @croppable_area_id.setter
    def croppable_area_id(self, croppable_area_id):
        """Sets the croppable_area_id of this SeedInputDto.


        :param croppable_area_id: The croppable_area_id of this SeedInputDto.  # noqa: E501
        :type: int
        """

        self._croppable_area_id = croppable_area_id

    @property
    def croppable_area_name(self):
        """Gets the croppable_area_name of this SeedInputDto.  # noqa: E501


        :return: The croppable_area_name of this SeedInputDto.  # noqa: E501
        :rtype: str
        """
        return self._croppable_area_name

    @croppable_area_name.setter
    def croppable_area_name(self, croppable_area_name):
        """Sets the croppable_area_name of this SeedInputDto.


        :param croppable_area_name: The croppable_area_name of this SeedInputDto.  # noqa: E501
        :type: str
        """

        self._croppable_area_name = croppable_area_name

    @property
    def data(self):
        """Gets the data of this SeedInputDto.  # noqa: E501


        :return: The data of this SeedInputDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SeedInputDto.


        :param data: The data of this SeedInputDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def description(self):
        """Gets the description of this SeedInputDto.  # noqa: E501


        :return: The description of this SeedInputDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SeedInputDto.


        :param description: The description of this SeedInputDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this SeedInputDto.  # noqa: E501


        :return: The id of this SeedInputDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SeedInputDto.


        :param id: The id of this SeedInputDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def issue_date(self):
        """Gets the issue_date of this SeedInputDto.  # noqa: E501


        :return: The issue_date of this SeedInputDto.  # noqa: E501
        :rtype: datetime
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this SeedInputDto.


        :param issue_date: The issue_date of this SeedInputDto.  # noqa: E501
        :type: datetime
        """

        self._issue_date = issue_date

    @property
    def land_id(self):
        """Gets the land_id of this SeedInputDto.  # noqa: E501


        :return: The land_id of this SeedInputDto.  # noqa: E501
        :rtype: int
        """
        return self._land_id

    @land_id.setter
    def land_id(self, land_id):
        """Sets the land_id of this SeedInputDto.


        :param land_id: The land_id of this SeedInputDto.  # noqa: E501
        :type: int
        """

        self._land_id = land_id

    @property
    def land_name(self):
        """Gets the land_name of this SeedInputDto.  # noqa: E501


        :return: The land_name of this SeedInputDto.  # noqa: E501
        :rtype: str
        """
        return self._land_name

    @land_name.setter
    def land_name(self, land_name):
        """Sets the land_name of this SeedInputDto.


        :param land_name: The land_name of this SeedInputDto.  # noqa: E501
        :type: str
        """

        self._land_name = land_name

    @property
    def no_of_skus(self):
        """Gets the no_of_skus of this SeedInputDto.  # noqa: E501


        :return: The no_of_skus of this SeedInputDto.  # noqa: E501
        :rtype: int
        """
        return self._no_of_skus

    @no_of_skus.setter
    def no_of_skus(self, no_of_skus):
        """Sets the no_of_skus of this SeedInputDto.


        :param no_of_skus: The no_of_skus of this SeedInputDto.  # noqa: E501
        :type: int
        """

        self._no_of_skus = no_of_skus

    @property
    def project_id(self):
        """Gets the project_id of this SeedInputDto.  # noqa: E501


        :return: The project_id of this SeedInputDto.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this SeedInputDto.


        :param project_id: The project_id of this SeedInputDto.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this SeedInputDto.  # noqa: E501


        :return: The project_name of this SeedInputDto.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this SeedInputDto.


        :param project_name: The project_name of this SeedInputDto.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def quantity(self):
        """Gets the quantity of this SeedInputDto.  # noqa: E501


        :return: The quantity of this SeedInputDto.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SeedInputDto.


        :param quantity: The quantity of this SeedInputDto.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def reason_id(self):
        """Gets the reason_id of this SeedInputDto.  # noqa: E501


        :return: The reason_id of this SeedInputDto.  # noqa: E501
        :rtype: int
        """
        return self._reason_id

    @reason_id.setter
    def reason_id(self, reason_id):
        """Sets the reason_id of this SeedInputDto.


        :param reason_id: The reason_id of this SeedInputDto.  # noqa: E501
        :type: int
        """

        self._reason_id = reason_id

    @property
    def reason_name(self):
        """Gets the reason_name of this SeedInputDto.  # noqa: E501


        :return: The reason_name of this SeedInputDto.  # noqa: E501
        :rtype: str
        """
        return self._reason_name

    @reason_name.setter
    def reason_name(self, reason_name):
        """Sets the reason_name of this SeedInputDto.


        :param reason_name: The reason_name of this SeedInputDto.  # noqa: E501
        :type: str
        """

        self._reason_name = reason_name

    @property
    def seed_grade_id(self):
        """Gets the seed_grade_id of this SeedInputDto.  # noqa: E501


        :return: The seed_grade_id of this SeedInputDto.  # noqa: E501
        :rtype: int
        """
        return self._seed_grade_id

    @seed_grade_id.setter
    def seed_grade_id(self, seed_grade_id):
        """Sets the seed_grade_id of this SeedInputDto.


        :param seed_grade_id: The seed_grade_id of this SeedInputDto.  # noqa: E501
        :type: int
        """

        self._seed_grade_id = seed_grade_id

    @property
    def seed_grade_name(self):
        """Gets the seed_grade_name of this SeedInputDto.  # noqa: E501


        :return: The seed_grade_name of this SeedInputDto.  # noqa: E501
        :rtype: str
        """
        return self._seed_grade_name

    @seed_grade_name.setter
    def seed_grade_name(self, seed_grade_name):
        """Sets the seed_grade_name of this SeedInputDto.


        :param seed_grade_name: The seed_grade_name of this SeedInputDto.  # noqa: E501
        :type: str
        """

        self._seed_grade_name = seed_grade_name

    @property
    def sku_type_id(self):
        """Gets the sku_type_id of this SeedInputDto.  # noqa: E501


        :return: The sku_type_id of this SeedInputDto.  # noqa: E501
        :rtype: int
        """
        return self._sku_type_id

    @sku_type_id.setter
    def sku_type_id(self, sku_type_id):
        """Sets the sku_type_id of this SeedInputDto.


        :param sku_type_id: The sku_type_id of this SeedInputDto.  # noqa: E501
        :type: int
        """

        self._sku_type_id = sku_type_id

    @property
    def sku_type_name(self):
        """Gets the sku_type_name of this SeedInputDto.  # noqa: E501


        :return: The sku_type_name of this SeedInputDto.  # noqa: E501
        :rtype: str
        """
        return self._sku_type_name

    @sku_type_name.setter
    def sku_type_name(self, sku_type_name):
        """Sets the sku_type_name of this SeedInputDto.


        :param sku_type_name: The sku_type_name of this SeedInputDto.  # noqa: E501
        :type: str
        """

        self._sku_type_name = sku_type_name

    @property
    def sku_type_unit_symbol(self):
        """Gets the sku_type_unit_symbol of this SeedInputDto.  # noqa: E501


        :return: The sku_type_unit_symbol of this SeedInputDto.  # noqa: E501
        :rtype: str
        """
        return self._sku_type_unit_symbol

    @sku_type_unit_symbol.setter
    def sku_type_unit_symbol(self, sku_type_unit_symbol):
        """Sets the sku_type_unit_symbol of this SeedInputDto.


        :param sku_type_unit_symbol: The sku_type_unit_symbol of this SeedInputDto.  # noqa: E501
        :type: str
        """

        self._sku_type_unit_symbol = sku_type_unit_symbol

    @property
    def sowning_date(self):
        """Gets the sowning_date of this SeedInputDto.  # noqa: E501


        :return: The sowning_date of this SeedInputDto.  # noqa: E501
        :rtype: datetime
        """
        return self._sowning_date

    @sowning_date.setter
    def sowning_date(self, sowning_date):
        """Sets the sowning_date of this SeedInputDto.


        :param sowning_date: The sowning_date of this SeedInputDto.  # noqa: E501
        :type: datetime
        """

        self._sowning_date = sowning_date

    @property
    def variety_id(self):
        """Gets the variety_id of this SeedInputDto.  # noqa: E501


        :return: The variety_id of this SeedInputDto.  # noqa: E501
        :rtype: int
        """
        return self._variety_id

    @variety_id.setter
    def variety_id(self, variety_id):
        """Sets the variety_id of this SeedInputDto.


        :param variety_id: The variety_id of this SeedInputDto.  # noqa: E501
        :type: int
        """

        self._variety_id = variety_id

    @property
    def variety_name(self):
        """Gets the variety_name of this SeedInputDto.  # noqa: E501


        :return: The variety_name of this SeedInputDto.  # noqa: E501
        :rtype: str
        """
        return self._variety_name

    @variety_name.setter
    def variety_name(self, variety_name):
        """Sets the variety_name of this SeedInputDto.


        :param variety_name: The variety_name of this SeedInputDto.  # noqa: E501
        :type: str
        """

        self._variety_name = variety_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SeedInputDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SeedInputDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
