# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectFilterDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_ids': 'list[int]',
        'location': 'str',
        'project_status_list': 'list[str]',
        'status_list': 'list[str]',
        'variety_ids': 'list[int]'
    }

    attribute_map = {
        'company_ids': 'companyIds',
        'location': 'location',
        'project_status_list': 'projectStatusList',
        'status_list': 'statusList',
        'variety_ids': 'varietyIds'
    }

    def __init__(self, company_ids=None, location=None, project_status_list=None, status_list=None, variety_ids=None):  # noqa: E501
        """ProjectFilterDto - a model defined in Swagger"""  # noqa: E501
        self._company_ids = None
        self._location = None
        self._project_status_list = None
        self._status_list = None
        self._variety_ids = None
        self.discriminator = None
        if company_ids is not None:
            self.company_ids = company_ids
        if location is not None:
            self.location = location
        if project_status_list is not None:
            self.project_status_list = project_status_list
        if status_list is not None:
            self.status_list = status_list
        if variety_ids is not None:
            self.variety_ids = variety_ids

    @property
    def company_ids(self):
        """Gets the company_ids of this ProjectFilterDto.  # noqa: E501


        :return: The company_ids of this ProjectFilterDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._company_ids

    @company_ids.setter
    def company_ids(self, company_ids):
        """Sets the company_ids of this ProjectFilterDto.


        :param company_ids: The company_ids of this ProjectFilterDto.  # noqa: E501
        :type: list[int]
        """

        self._company_ids = company_ids

    @property
    def location(self):
        """Gets the location of this ProjectFilterDto.  # noqa: E501


        :return: The location of this ProjectFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ProjectFilterDto.


        :param location: The location of this ProjectFilterDto.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def project_status_list(self):
        """Gets the project_status_list of this ProjectFilterDto.  # noqa: E501


        :return: The project_status_list of this ProjectFilterDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._project_status_list

    @project_status_list.setter
    def project_status_list(self, project_status_list):
        """Sets the project_status_list of this ProjectFilterDto.


        :param project_status_list: The project_status_list of this ProjectFilterDto.  # noqa: E501
        :type: list[str]
        """

        self._project_status_list = project_status_list

    @property
    def status_list(self):
        """Gets the status_list of this ProjectFilterDto.  # noqa: E501


        :return: The status_list of this ProjectFilterDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._status_list

    @status_list.setter
    def status_list(self, status_list):
        """Sets the status_list of this ProjectFilterDto.


        :param status_list: The status_list of this ProjectFilterDto.  # noqa: E501
        :type: list[str]
        """

        self._status_list = status_list

    @property
    def variety_ids(self):
        """Gets the variety_ids of this ProjectFilterDto.  # noqa: E501


        :return: The variety_ids of this ProjectFilterDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._variety_ids

    @variety_ids.setter
    def variety_ids(self, variety_ids):
        """Sets the variety_ids of this ProjectFilterDto.


        :param variety_ids: The variety_ids of this ProjectFilterDto.  # noqa: E501
        :type: list[int]
        """

        self._variety_ids = variety_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectFilterDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectFilterDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
