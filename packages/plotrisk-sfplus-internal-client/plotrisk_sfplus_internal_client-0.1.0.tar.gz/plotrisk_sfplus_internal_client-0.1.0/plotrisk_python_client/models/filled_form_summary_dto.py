# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilledFormSummaryDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'form_name': 'str',
        'form_type_id': 'int',
        'form_type_name': 'str',
        'id': 'int',
        'latest_filled_on': 'datetime',
        'total_filled': 'int'
    }

    attribute_map = {
        'form_name': 'formName',
        'form_type_id': 'formTypeId',
        'form_type_name': 'formTypeName',
        'id': 'id',
        'latest_filled_on': 'latestFilledOn',
        'total_filled': 'totalFilled'
    }

    def __init__(self, form_name=None, form_type_id=None, form_type_name=None, id=None, latest_filled_on=None, total_filled=None):  # noqa: E501
        """FilledFormSummaryDto - a model defined in Swagger"""  # noqa: E501
        self._form_name = None
        self._form_type_id = None
        self._form_type_name = None
        self._id = None
        self._latest_filled_on = None
        self._total_filled = None
        self.discriminator = None
        if form_name is not None:
            self.form_name = form_name
        if form_type_id is not None:
            self.form_type_id = form_type_id
        if form_type_name is not None:
            self.form_type_name = form_type_name
        if id is not None:
            self.id = id
        if latest_filled_on is not None:
            self.latest_filled_on = latest_filled_on
        if total_filled is not None:
            self.total_filled = total_filled

    @property
    def form_name(self):
        """Gets the form_name of this FilledFormSummaryDto.  # noqa: E501


        :return: The form_name of this FilledFormSummaryDto.  # noqa: E501
        :rtype: str
        """
        return self._form_name

    @form_name.setter
    def form_name(self, form_name):
        """Sets the form_name of this FilledFormSummaryDto.


        :param form_name: The form_name of this FilledFormSummaryDto.  # noqa: E501
        :type: str
        """

        self._form_name = form_name

    @property
    def form_type_id(self):
        """Gets the form_type_id of this FilledFormSummaryDto.  # noqa: E501


        :return: The form_type_id of this FilledFormSummaryDto.  # noqa: E501
        :rtype: int
        """
        return self._form_type_id

    @form_type_id.setter
    def form_type_id(self, form_type_id):
        """Sets the form_type_id of this FilledFormSummaryDto.


        :param form_type_id: The form_type_id of this FilledFormSummaryDto.  # noqa: E501
        :type: int
        """

        self._form_type_id = form_type_id

    @property
    def form_type_name(self):
        """Gets the form_type_name of this FilledFormSummaryDto.  # noqa: E501


        :return: The form_type_name of this FilledFormSummaryDto.  # noqa: E501
        :rtype: str
        """
        return self._form_type_name

    @form_type_name.setter
    def form_type_name(self, form_type_name):
        """Sets the form_type_name of this FilledFormSummaryDto.


        :param form_type_name: The form_type_name of this FilledFormSummaryDto.  # noqa: E501
        :type: str
        """

        self._form_type_name = form_type_name

    @property
    def id(self):
        """Gets the id of this FilledFormSummaryDto.  # noqa: E501


        :return: The id of this FilledFormSummaryDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FilledFormSummaryDto.


        :param id: The id of this FilledFormSummaryDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def latest_filled_on(self):
        """Gets the latest_filled_on of this FilledFormSummaryDto.  # noqa: E501


        :return: The latest_filled_on of this FilledFormSummaryDto.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_filled_on

    @latest_filled_on.setter
    def latest_filled_on(self, latest_filled_on):
        """Sets the latest_filled_on of this FilledFormSummaryDto.


        :param latest_filled_on: The latest_filled_on of this FilledFormSummaryDto.  # noqa: E501
        :type: datetime
        """

        self._latest_filled_on = latest_filled_on

    @property
    def total_filled(self):
        """Gets the total_filled of this FilledFormSummaryDto.  # noqa: E501


        :return: The total_filled of this FilledFormSummaryDto.  # noqa: E501
        :rtype: int
        """
        return self._total_filled

    @total_filled.setter
    def total_filled(self, total_filled):
        """Sets the total_filled of this FilledFormSummaryDto.


        :param total_filled: The total_filled of this FilledFormSummaryDto.  # noqa: E501
        :type: int
        """

        self._total_filled = total_filled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilledFormSummaryDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilledFormSummaryDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
