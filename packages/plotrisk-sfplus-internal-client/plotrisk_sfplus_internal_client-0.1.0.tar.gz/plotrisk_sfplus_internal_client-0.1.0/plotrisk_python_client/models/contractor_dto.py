# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContractorDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'AddressDto',
        'client_id': 'str',
        'data': 'dict(str, object)',
        'deleted': 'bool',
        'gender': 'str',
        'id': 'int',
        'images': 'dict(str, object)',
        'name': 'str',
        'status': 'str'
    }

    attribute_map = {
        'address': 'address',
        'client_id': 'clientId',
        'data': 'data',
        'deleted': 'deleted',
        'gender': 'gender',
        'id': 'id',
        'images': 'images',
        'name': 'name',
        'status': 'status'
    }

    def __init__(self, address=None, client_id=None, data=None, deleted=None, gender=None, id=None, images=None, name=None, status=None):  # noqa: E501
        """ContractorDto - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._client_id = None
        self._data = None
        self._deleted = None
        self._gender = None
        self._id = None
        self._images = None
        self._name = None
        self._status = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if client_id is not None:
            self.client_id = client_id
        if data is not None:
            self.data = data
        if deleted is not None:
            self.deleted = deleted
        if gender is not None:
            self.gender = gender
        if id is not None:
            self.id = id
        if images is not None:
            self.images = images
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status

    @property
    def address(self):
        """Gets the address of this ContractorDto.  # noqa: E501


        :return: The address of this ContractorDto.  # noqa: E501
        :rtype: AddressDto
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ContractorDto.


        :param address: The address of this ContractorDto.  # noqa: E501
        :type: AddressDto
        """

        self._address = address

    @property
    def client_id(self):
        """Gets the client_id of this ContractorDto.  # noqa: E501


        :return: The client_id of this ContractorDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ContractorDto.


        :param client_id: The client_id of this ContractorDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def data(self):
        """Gets the data of this ContractorDto.  # noqa: E501


        :return: The data of this ContractorDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ContractorDto.


        :param data: The data of this ContractorDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def deleted(self):
        """Gets the deleted of this ContractorDto.  # noqa: E501


        :return: The deleted of this ContractorDto.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ContractorDto.


        :param deleted: The deleted of this ContractorDto.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def gender(self):
        """Gets the gender of this ContractorDto.  # noqa: E501


        :return: The gender of this ContractorDto.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this ContractorDto.


        :param gender: The gender of this ContractorDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["MALE", "FEMALE", "OTHER"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def id(self):
        """Gets the id of this ContractorDto.  # noqa: E501


        :return: The id of this ContractorDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContractorDto.


        :param id: The id of this ContractorDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this ContractorDto.  # noqa: E501


        :return: The images of this ContractorDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ContractorDto.


        :param images: The images of this ContractorDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._images = images

    @property
    def name(self):
        """Gets the name of this ContractorDto.  # noqa: E501


        :return: The name of this ContractorDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContractorDto.


        :param name: The name of this ContractorDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this ContractorDto.  # noqa: E501


        :return: The status of this ContractorDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContractorDto.


        :param status: The status of this ContractorDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "TRIAL", "DEMO", "DISABLE", "DELETE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContractorDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractorDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
