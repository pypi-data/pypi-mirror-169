# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DashBoardPlotDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ca_name': 'str',
        'crop_name': 'str',
        'farmer_code': 'str',
        'farmer_name': 'str',
        'field_alert': 'object',
        'id': 'int',
        'plot_area': 'float',
        'user_names': 'list[str]',
        'variety_name': 'str'
    }

    attribute_map = {
        'ca_name': 'caName',
        'crop_name': 'cropName',
        'farmer_code': 'farmerCode',
        'farmer_name': 'farmerName',
        'field_alert': 'fieldAlert',
        'id': 'id',
        'plot_area': 'plotArea',
        'user_names': 'userNames',
        'variety_name': 'varietyName'
    }

    def __init__(self, ca_name=None, crop_name=None, farmer_code=None, farmer_name=None, field_alert=None, id=None, plot_area=None, user_names=None, variety_name=None):  # noqa: E501
        """DashBoardPlotDto - a model defined in Swagger"""  # noqa: E501
        self._ca_name = None
        self._crop_name = None
        self._farmer_code = None
        self._farmer_name = None
        self._field_alert = None
        self._id = None
        self._plot_area = None
        self._user_names = None
        self._variety_name = None
        self.discriminator = None
        if ca_name is not None:
            self.ca_name = ca_name
        if crop_name is not None:
            self.crop_name = crop_name
        if farmer_code is not None:
            self.farmer_code = farmer_code
        if farmer_name is not None:
            self.farmer_name = farmer_name
        if field_alert is not None:
            self.field_alert = field_alert
        if id is not None:
            self.id = id
        if plot_area is not None:
            self.plot_area = plot_area
        if user_names is not None:
            self.user_names = user_names
        if variety_name is not None:
            self.variety_name = variety_name

    @property
    def ca_name(self):
        """Gets the ca_name of this DashBoardPlotDto.  # noqa: E501


        :return: The ca_name of this DashBoardPlotDto.  # noqa: E501
        :rtype: str
        """
        return self._ca_name

    @ca_name.setter
    def ca_name(self, ca_name):
        """Sets the ca_name of this DashBoardPlotDto.


        :param ca_name: The ca_name of this DashBoardPlotDto.  # noqa: E501
        :type: str
        """

        self._ca_name = ca_name

    @property
    def crop_name(self):
        """Gets the crop_name of this DashBoardPlotDto.  # noqa: E501


        :return: The crop_name of this DashBoardPlotDto.  # noqa: E501
        :rtype: str
        """
        return self._crop_name

    @crop_name.setter
    def crop_name(self, crop_name):
        """Sets the crop_name of this DashBoardPlotDto.


        :param crop_name: The crop_name of this DashBoardPlotDto.  # noqa: E501
        :type: str
        """

        self._crop_name = crop_name

    @property
    def farmer_code(self):
        """Gets the farmer_code of this DashBoardPlotDto.  # noqa: E501


        :return: The farmer_code of this DashBoardPlotDto.  # noqa: E501
        :rtype: str
        """
        return self._farmer_code

    @farmer_code.setter
    def farmer_code(self, farmer_code):
        """Sets the farmer_code of this DashBoardPlotDto.


        :param farmer_code: The farmer_code of this DashBoardPlotDto.  # noqa: E501
        :type: str
        """

        self._farmer_code = farmer_code

    @property
    def farmer_name(self):
        """Gets the farmer_name of this DashBoardPlotDto.  # noqa: E501


        :return: The farmer_name of this DashBoardPlotDto.  # noqa: E501
        :rtype: str
        """
        return self._farmer_name

    @farmer_name.setter
    def farmer_name(self, farmer_name):
        """Sets the farmer_name of this DashBoardPlotDto.


        :param farmer_name: The farmer_name of this DashBoardPlotDto.  # noqa: E501
        :type: str
        """

        self._farmer_name = farmer_name

    @property
    def field_alert(self):
        """Gets the field_alert of this DashBoardPlotDto.  # noqa: E501


        :return: The field_alert of this DashBoardPlotDto.  # noqa: E501
        :rtype: object
        """
        return self._field_alert

    @field_alert.setter
    def field_alert(self, field_alert):
        """Sets the field_alert of this DashBoardPlotDto.


        :param field_alert: The field_alert of this DashBoardPlotDto.  # noqa: E501
        :type: object
        """

        self._field_alert = field_alert

    @property
    def id(self):
        """Gets the id of this DashBoardPlotDto.  # noqa: E501


        :return: The id of this DashBoardPlotDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashBoardPlotDto.


        :param id: The id of this DashBoardPlotDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def plot_area(self):
        """Gets the plot_area of this DashBoardPlotDto.  # noqa: E501


        :return: The plot_area of this DashBoardPlotDto.  # noqa: E501
        :rtype: float
        """
        return self._plot_area

    @plot_area.setter
    def plot_area(self, plot_area):
        """Sets the plot_area of this DashBoardPlotDto.


        :param plot_area: The plot_area of this DashBoardPlotDto.  # noqa: E501
        :type: float
        """

        self._plot_area = plot_area

    @property
    def user_names(self):
        """Gets the user_names of this DashBoardPlotDto.  # noqa: E501


        :return: The user_names of this DashBoardPlotDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_names

    @user_names.setter
    def user_names(self, user_names):
        """Sets the user_names of this DashBoardPlotDto.


        :param user_names: The user_names of this DashBoardPlotDto.  # noqa: E501
        :type: list[str]
        """

        self._user_names = user_names

    @property
    def variety_name(self):
        """Gets the variety_name of this DashBoardPlotDto.  # noqa: E501


        :return: The variety_name of this DashBoardPlotDto.  # noqa: E501
        :rtype: str
        """
        return self._variety_name

    @variety_name.setter
    def variety_name(self, variety_name):
        """Sets the variety_name of this DashBoardPlotDto.


        :param variety_name: The variety_name of this DashBoardPlotDto.  # noqa: E501
        :type: str
        """

        self._variety_name = variety_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashBoardPlotDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashBoardPlotDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
