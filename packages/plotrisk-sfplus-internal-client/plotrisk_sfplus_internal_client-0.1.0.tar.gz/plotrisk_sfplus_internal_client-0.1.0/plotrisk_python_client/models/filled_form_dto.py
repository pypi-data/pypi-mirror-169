# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilledFormDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ca_id': 'int',
        'client_id': 'str',
        'created_by': 'str',
        'data': 'dict(str, object)',
        'form_id': 'int',
        'form_name': 'str',
        'form_type_id': 'int',
        'id': 'int',
        'images': 'dict(str, object)',
        'is_deleted': 'bool',
        'last_modified_by': 'str',
        'name': 'str',
        'project_id': 'int',
        'user_filled_name': 'str'
    }

    attribute_map = {
        'ca_id': 'caId',
        'client_id': 'clientId',
        'created_by': 'createdBy',
        'data': 'data',
        'form_id': 'formId',
        'form_name': 'formName',
        'form_type_id': 'formTypeId',
        'id': 'id',
        'images': 'images',
        'is_deleted': 'isDeleted',
        'last_modified_by': 'lastModifiedBy',
        'name': 'name',
        'project_id': 'projectId',
        'user_filled_name': 'userFilledName'
    }

    def __init__(self, ca_id=None, client_id=None, created_by=None, data=None, form_id=None, form_name=None, form_type_id=None, id=None, images=None, is_deleted=None, last_modified_by=None, name=None, project_id=None, user_filled_name=None):  # noqa: E501
        """FilledFormDto - a model defined in Swagger"""  # noqa: E501
        self._ca_id = None
        self._client_id = None
        self._created_by = None
        self._data = None
        self._form_id = None
        self._form_name = None
        self._form_type_id = None
        self._id = None
        self._images = None
        self._is_deleted = None
        self._last_modified_by = None
        self._name = None
        self._project_id = None
        self._user_filled_name = None
        self.discriminator = None
        if ca_id is not None:
            self.ca_id = ca_id
        if client_id is not None:
            self.client_id = client_id
        if created_by is not None:
            self.created_by = created_by
        if data is not None:
            self.data = data
        self.form_id = form_id
        if form_name is not None:
            self.form_name = form_name
        self.form_type_id = form_type_id
        if id is not None:
            self.id = id
        if images is not None:
            self.images = images
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        self.name = name
        if project_id is not None:
            self.project_id = project_id
        if user_filled_name is not None:
            self.user_filled_name = user_filled_name

    @property
    def ca_id(self):
        """Gets the ca_id of this FilledFormDto.  # noqa: E501


        :return: The ca_id of this FilledFormDto.  # noqa: E501
        :rtype: int
        """
        return self._ca_id

    @ca_id.setter
    def ca_id(self, ca_id):
        """Sets the ca_id of this FilledFormDto.


        :param ca_id: The ca_id of this FilledFormDto.  # noqa: E501
        :type: int
        """

        self._ca_id = ca_id

    @property
    def client_id(self):
        """Gets the client_id of this FilledFormDto.  # noqa: E501


        :return: The client_id of this FilledFormDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this FilledFormDto.


        :param client_id: The client_id of this FilledFormDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def created_by(self):
        """Gets the created_by of this FilledFormDto.  # noqa: E501


        :return: The created_by of this FilledFormDto.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this FilledFormDto.


        :param created_by: The created_by of this FilledFormDto.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def data(self):
        """Gets the data of this FilledFormDto.  # noqa: E501


        :return: The data of this FilledFormDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this FilledFormDto.


        :param data: The data of this FilledFormDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def form_id(self):
        """Gets the form_id of this FilledFormDto.  # noqa: E501


        :return: The form_id of this FilledFormDto.  # noqa: E501
        :rtype: int
        """
        return self._form_id

    @form_id.setter
    def form_id(self, form_id):
        """Sets the form_id of this FilledFormDto.


        :param form_id: The form_id of this FilledFormDto.  # noqa: E501
        :type: int
        """
        if form_id is None:
            raise ValueError("Invalid value for `form_id`, must not be `None`")  # noqa: E501

        self._form_id = form_id

    @property
    def form_name(self):
        """Gets the form_name of this FilledFormDto.  # noqa: E501


        :return: The form_name of this FilledFormDto.  # noqa: E501
        :rtype: str
        """
        return self._form_name

    @form_name.setter
    def form_name(self, form_name):
        """Sets the form_name of this FilledFormDto.


        :param form_name: The form_name of this FilledFormDto.  # noqa: E501
        :type: str
        """

        self._form_name = form_name

    @property
    def form_type_id(self):
        """Gets the form_type_id of this FilledFormDto.  # noqa: E501


        :return: The form_type_id of this FilledFormDto.  # noqa: E501
        :rtype: int
        """
        return self._form_type_id

    @form_type_id.setter
    def form_type_id(self, form_type_id):
        """Sets the form_type_id of this FilledFormDto.


        :param form_type_id: The form_type_id of this FilledFormDto.  # noqa: E501
        :type: int
        """
        if form_type_id is None:
            raise ValueError("Invalid value for `form_type_id`, must not be `None`")  # noqa: E501

        self._form_type_id = form_type_id

    @property
    def id(self):
        """Gets the id of this FilledFormDto.  # noqa: E501


        :return: The id of this FilledFormDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FilledFormDto.


        :param id: The id of this FilledFormDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this FilledFormDto.  # noqa: E501


        :return: The images of this FilledFormDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this FilledFormDto.


        :param images: The images of this FilledFormDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._images = images

    @property
    def is_deleted(self):
        """Gets the is_deleted of this FilledFormDto.  # noqa: E501


        :return: The is_deleted of this FilledFormDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this FilledFormDto.


        :param is_deleted: The is_deleted of this FilledFormDto.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this FilledFormDto.  # noqa: E501


        :return: The last_modified_by of this FilledFormDto.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this FilledFormDto.


        :param last_modified_by: The last_modified_by of this FilledFormDto.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def name(self):
        """Gets the name of this FilledFormDto.  # noqa: E501


        :return: The name of this FilledFormDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FilledFormDto.


        :param name: The name of this FilledFormDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this FilledFormDto.  # noqa: E501


        :return: The project_id of this FilledFormDto.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this FilledFormDto.


        :param project_id: The project_id of this FilledFormDto.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def user_filled_name(self):
        """Gets the user_filled_name of this FilledFormDto.  # noqa: E501


        :return: The user_filled_name of this FilledFormDto.  # noqa: E501
        :rtype: str
        """
        return self._user_filled_name

    @user_filled_name.setter
    def user_filled_name(self, user_filled_name):
        """Sets the user_filled_name of this FilledFormDto.


        :param user_filled_name: The user_filled_name of this FilledFormDto.  # noqa: E501
        :type: str
        """

        self._user_filled_name = user_filled_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilledFormDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilledFormDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
