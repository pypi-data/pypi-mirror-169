# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TargetDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'crop_id': 'int',
        'crop_name': 'str',
        'data': 'dict(str, object)',
        'id': 'int',
        'project_id': 'int',
        'target_date': 'datetime',
        'target_quantity': 'Quantity',
        'variety_id': 'int',
        'variety_name': 'str'
    }

    attribute_map = {
        'client_id': 'clientId',
        'crop_id': 'cropId',
        'crop_name': 'cropName',
        'data': 'data',
        'id': 'id',
        'project_id': 'projectId',
        'target_date': 'targetDate',
        'target_quantity': 'targetQuantity',
        'variety_id': 'varietyId',
        'variety_name': 'varietyName'
    }

    def __init__(self, client_id=None, crop_id=None, crop_name=None, data=None, id=None, project_id=None, target_date=None, target_quantity=None, variety_id=None, variety_name=None):  # noqa: E501
        """TargetDto - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._crop_id = None
        self._crop_name = None
        self._data = None
        self._id = None
        self._project_id = None
        self._target_date = None
        self._target_quantity = None
        self._variety_id = None
        self._variety_name = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        if crop_id is not None:
            self.crop_id = crop_id
        if crop_name is not None:
            self.crop_name = crop_name
        if data is not None:
            self.data = data
        if id is not None:
            self.id = id
        self.project_id = project_id
        if target_date is not None:
            self.target_date = target_date
        if target_quantity is not None:
            self.target_quantity = target_quantity
        self.variety_id = variety_id
        if variety_name is not None:
            self.variety_name = variety_name

    @property
    def client_id(self):
        """Gets the client_id of this TargetDto.  # noqa: E501


        :return: The client_id of this TargetDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this TargetDto.


        :param client_id: The client_id of this TargetDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def crop_id(self):
        """Gets the crop_id of this TargetDto.  # noqa: E501


        :return: The crop_id of this TargetDto.  # noqa: E501
        :rtype: int
        """
        return self._crop_id

    @crop_id.setter
    def crop_id(self, crop_id):
        """Sets the crop_id of this TargetDto.


        :param crop_id: The crop_id of this TargetDto.  # noqa: E501
        :type: int
        """

        self._crop_id = crop_id

    @property
    def crop_name(self):
        """Gets the crop_name of this TargetDto.  # noqa: E501


        :return: The crop_name of this TargetDto.  # noqa: E501
        :rtype: str
        """
        return self._crop_name

    @crop_name.setter
    def crop_name(self, crop_name):
        """Sets the crop_name of this TargetDto.


        :param crop_name: The crop_name of this TargetDto.  # noqa: E501
        :type: str
        """

        self._crop_name = crop_name

    @property
    def data(self):
        """Gets the data of this TargetDto.  # noqa: E501


        :return: The data of this TargetDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this TargetDto.


        :param data: The data of this TargetDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def id(self):
        """Gets the id of this TargetDto.  # noqa: E501


        :return: The id of this TargetDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TargetDto.


        :param id: The id of this TargetDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this TargetDto.  # noqa: E501


        :return: The project_id of this TargetDto.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TargetDto.


        :param project_id: The project_id of this TargetDto.  # noqa: E501
        :type: int
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def target_date(self):
        """Gets the target_date of this TargetDto.  # noqa: E501


        :return: The target_date of this TargetDto.  # noqa: E501
        :rtype: datetime
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this TargetDto.


        :param target_date: The target_date of this TargetDto.  # noqa: E501
        :type: datetime
        """

        self._target_date = target_date

    @property
    def target_quantity(self):
        """Gets the target_quantity of this TargetDto.  # noqa: E501


        :return: The target_quantity of this TargetDto.  # noqa: E501
        :rtype: Quantity
        """
        return self._target_quantity

    @target_quantity.setter
    def target_quantity(self, target_quantity):
        """Sets the target_quantity of this TargetDto.


        :param target_quantity: The target_quantity of this TargetDto.  # noqa: E501
        :type: Quantity
        """

        self._target_quantity = target_quantity

    @property
    def variety_id(self):
        """Gets the variety_id of this TargetDto.  # noqa: E501


        :return: The variety_id of this TargetDto.  # noqa: E501
        :rtype: int
        """
        return self._variety_id

    @variety_id.setter
    def variety_id(self, variety_id):
        """Sets the variety_id of this TargetDto.


        :param variety_id: The variety_id of this TargetDto.  # noqa: E501
        :type: int
        """
        if variety_id is None:
            raise ValueError("Invalid value for `variety_id`, must not be `None`")  # noqa: E501

        self._variety_id = variety_id

    @property
    def variety_name(self):
        """Gets the variety_name of this TargetDto.  # noqa: E501


        :return: The variety_name of this TargetDto.  # noqa: E501
        :rtype: str
        """
        return self._variety_name

    @variety_name.setter
    def variety_name(self, variety_name):
        """Sets the variety_name of this TargetDto.


        :param variety_name: The variety_name of this TargetDto.  # noqa: E501
        :type: str
        """

        self._variety_name = variety_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TargetDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TargetDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
