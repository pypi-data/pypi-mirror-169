# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulkCroppableUnitDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ids': 'list[int]',
        'quantity': 'int',
        'quantity_type': 'str',
        'sowing_date': 'datetime',
        'variety_id': 'int'
    }

    attribute_map = {
        'ids': 'ids',
        'quantity': 'quantity',
        'quantity_type': 'quantityType',
        'sowing_date': 'sowingDate',
        'variety_id': 'varietyId'
    }

    def __init__(self, ids=None, quantity=None, quantity_type=None, sowing_date=None, variety_id=None):  # noqa: E501
        """BulkCroppableUnitDto - a model defined in Swagger"""  # noqa: E501
        self._ids = None
        self._quantity = None
        self._quantity_type = None
        self._sowing_date = None
        self._variety_id = None
        self.discriminator = None
        if ids is not None:
            self.ids = ids
        if quantity is not None:
            self.quantity = quantity
        if quantity_type is not None:
            self.quantity_type = quantity_type
        if sowing_date is not None:
            self.sowing_date = sowing_date
        if variety_id is not None:
            self.variety_id = variety_id

    @property
    def ids(self):
        """Gets the ids of this BulkCroppableUnitDto.  # noqa: E501


        :return: The ids of this BulkCroppableUnitDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this BulkCroppableUnitDto.


        :param ids: The ids of this BulkCroppableUnitDto.  # noqa: E501
        :type: list[int]
        """

        self._ids = ids

    @property
    def quantity(self):
        """Gets the quantity of this BulkCroppableUnitDto.  # noqa: E501


        :return: The quantity of this BulkCroppableUnitDto.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this BulkCroppableUnitDto.


        :param quantity: The quantity of this BulkCroppableUnitDto.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def quantity_type(self):
        """Gets the quantity_type of this BulkCroppableUnitDto.  # noqa: E501


        :return: The quantity_type of this BulkCroppableUnitDto.  # noqa: E501
        :rtype: str
        """
        return self._quantity_type

    @quantity_type.setter
    def quantity_type(self, quantity_type):
        """Sets the quantity_type of this BulkCroppableUnitDto.


        :param quantity_type: The quantity_type of this BulkCroppableUnitDto.  # noqa: E501
        :type: str
        """

        self._quantity_type = quantity_type

    @property
    def sowing_date(self):
        """Gets the sowing_date of this BulkCroppableUnitDto.  # noqa: E501


        :return: The sowing_date of this BulkCroppableUnitDto.  # noqa: E501
        :rtype: datetime
        """
        return self._sowing_date

    @sowing_date.setter
    def sowing_date(self, sowing_date):
        """Sets the sowing_date of this BulkCroppableUnitDto.


        :param sowing_date: The sowing_date of this BulkCroppableUnitDto.  # noqa: E501
        :type: datetime
        """

        self._sowing_date = sowing_date

    @property
    def variety_id(self):
        """Gets the variety_id of this BulkCroppableUnitDto.  # noqa: E501


        :return: The variety_id of this BulkCroppableUnitDto.  # noqa: E501
        :rtype: int
        """
        return self._variety_id

    @variety_id.setter
    def variety_id(self, variety_id):
        """Sets the variety_id of this BulkCroppableUnitDto.


        :param variety_id: The variety_id of this BulkCroppableUnitDto.  # noqa: E501
        :type: int
        """

        self._variety_id = variety_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkCroppableUnitDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkCroppableUnitDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
