# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Metrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boundary_metrics': 'BoundaryMetrics',
        'crop_metrics': 'list[CropMetric]',
        'error_codes': 'object'
    }

    attribute_map = {
        'boundary_metrics': 'boundaryMetrics',
        'crop_metrics': 'cropMetrics',
        'error_codes': 'errorCodes'
    }

    def __init__(self, boundary_metrics=None, crop_metrics=None, error_codes=None):  # noqa: E501
        """Metrics - a model defined in Swagger"""  # noqa: E501
        self._boundary_metrics = None
        self._crop_metrics = None
        self._error_codes = None
        self.discriminator = None
        if boundary_metrics is not None:
            self.boundary_metrics = boundary_metrics
        if crop_metrics is not None:
            self.crop_metrics = crop_metrics
        if error_codes is not None:
            self.error_codes = error_codes

    @property
    def boundary_metrics(self):
        """Gets the boundary_metrics of this Metrics.  # noqa: E501


        :return: The boundary_metrics of this Metrics.  # noqa: E501
        :rtype: BoundaryMetrics
        """
        return self._boundary_metrics

    @boundary_metrics.setter
    def boundary_metrics(self, boundary_metrics):
        """Sets the boundary_metrics of this Metrics.


        :param boundary_metrics: The boundary_metrics of this Metrics.  # noqa: E501
        :type: BoundaryMetrics
        """

        self._boundary_metrics = boundary_metrics

    @property
    def crop_metrics(self):
        """Gets the crop_metrics of this Metrics.  # noqa: E501


        :return: The crop_metrics of this Metrics.  # noqa: E501
        :rtype: list[CropMetric]
        """
        return self._crop_metrics

    @crop_metrics.setter
    def crop_metrics(self, crop_metrics):
        """Sets the crop_metrics of this Metrics.


        :param crop_metrics: The crop_metrics of this Metrics.  # noqa: E501
        :type: list[CropMetric]
        """

        self._crop_metrics = crop_metrics

    @property
    def error_codes(self):
        """Gets the error_codes of this Metrics.  # noqa: E501


        :return: The error_codes of this Metrics.  # noqa: E501
        :rtype: object
        """
        return self._error_codes

    @error_codes.setter
    def error_codes(self, error_codes):
        """Sets the error_codes of this Metrics.


        :param error_codes: The error_codes of this Metrics.  # noqa: E501
        :type: object
        """

        self._error_codes = error_codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Metrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
