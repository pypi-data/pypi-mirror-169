# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmployeeDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'data': 'dict(str, object)',
        'dept_id': 'int',
        'dept_name': 'str',
        'first_name': 'str',
        'gender': 'str',
        'id': 'int',
        'images': 'dict(str, object)',
        'last_name': 'str',
        'status': 'str'
    }

    attribute_map = {
        'client_id': 'clientId',
        'data': 'data',
        'dept_id': 'deptId',
        'dept_name': 'deptName',
        'first_name': 'firstName',
        'gender': 'gender',
        'id': 'id',
        'images': 'images',
        'last_name': 'lastName',
        'status': 'status'
    }

    def __init__(self, client_id=None, data=None, dept_id=None, dept_name=None, first_name=None, gender=None, id=None, images=None, last_name=None, status=None):  # noqa: E501
        """EmployeeDto - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._data = None
        self._dept_id = None
        self._dept_name = None
        self._first_name = None
        self._gender = None
        self._id = None
        self._images = None
        self._last_name = None
        self._status = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        if data is not None:
            self.data = data
        if dept_id is not None:
            self.dept_id = dept_id
        if dept_name is not None:
            self.dept_name = dept_name
        self.first_name = first_name
        if gender is not None:
            self.gender = gender
        if id is not None:
            self.id = id
        if images is not None:
            self.images = images
        if last_name is not None:
            self.last_name = last_name
        if status is not None:
            self.status = status

    @property
    def client_id(self):
        """Gets the client_id of this EmployeeDto.  # noqa: E501


        :return: The client_id of this EmployeeDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this EmployeeDto.


        :param client_id: The client_id of this EmployeeDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def data(self):
        """Gets the data of this EmployeeDto.  # noqa: E501


        :return: The data of this EmployeeDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this EmployeeDto.


        :param data: The data of this EmployeeDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def dept_id(self):
        """Gets the dept_id of this EmployeeDto.  # noqa: E501


        :return: The dept_id of this EmployeeDto.  # noqa: E501
        :rtype: int
        """
        return self._dept_id

    @dept_id.setter
    def dept_id(self, dept_id):
        """Sets the dept_id of this EmployeeDto.


        :param dept_id: The dept_id of this EmployeeDto.  # noqa: E501
        :type: int
        """

        self._dept_id = dept_id

    @property
    def dept_name(self):
        """Gets the dept_name of this EmployeeDto.  # noqa: E501


        :return: The dept_name of this EmployeeDto.  # noqa: E501
        :rtype: str
        """
        return self._dept_name

    @dept_name.setter
    def dept_name(self, dept_name):
        """Sets the dept_name of this EmployeeDto.


        :param dept_name: The dept_name of this EmployeeDto.  # noqa: E501
        :type: str
        """

        self._dept_name = dept_name

    @property
    def first_name(self):
        """Gets the first_name of this EmployeeDto.  # noqa: E501


        :return: The first_name of this EmployeeDto.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this EmployeeDto.


        :param first_name: The first_name of this EmployeeDto.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this EmployeeDto.  # noqa: E501


        :return: The gender of this EmployeeDto.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this EmployeeDto.


        :param gender: The gender of this EmployeeDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["MALE", "FEMALE", "OTHER"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def id(self):
        """Gets the id of this EmployeeDto.  # noqa: E501


        :return: The id of this EmployeeDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmployeeDto.


        :param id: The id of this EmployeeDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this EmployeeDto.  # noqa: E501


        :return: The images of this EmployeeDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this EmployeeDto.


        :param images: The images of this EmployeeDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._images = images

    @property
    def last_name(self):
        """Gets the last_name of this EmployeeDto.  # noqa: E501


        :return: The last_name of this EmployeeDto.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this EmployeeDto.


        :param last_name: The last_name of this EmployeeDto.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def status(self):
        """Gets the status of this EmployeeDto.  # noqa: E501


        :return: The status of this EmployeeDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EmployeeDto.


        :param status: The status of this EmployeeDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "TRIAL", "DEMO", "DISABLE", "DELETE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmployeeDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmployeeDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
