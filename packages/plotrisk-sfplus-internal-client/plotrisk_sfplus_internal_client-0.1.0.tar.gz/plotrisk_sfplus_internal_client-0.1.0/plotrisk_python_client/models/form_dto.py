# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FormDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'data': 'dict(str, object)',
        'form_type_id': 'int',
        'form_type_name': 'str',
        'id': 'int',
        'images': 'dict(str, object)',
        'location': 'LocationDto',
        'name': 'str',
        'status': 'str',
        'valid_from': 'datetime',
        'valid_to': 'datetime',
        'variety_id': 'list[int]'
    }

    attribute_map = {
        'client_id': 'clientId',
        'data': 'data',
        'form_type_id': 'formTypeId',
        'form_type_name': 'formTypeName',
        'id': 'id',
        'images': 'images',
        'location': 'location',
        'name': 'name',
        'status': 'status',
        'valid_from': 'validFrom',
        'valid_to': 'validTo',
        'variety_id': 'varietyId'
    }

    def __init__(self, client_id=None, data=None, form_type_id=None, form_type_name=None, id=None, images=None, location=None, name=None, status=None, valid_from=None, valid_to=None, variety_id=None):  # noqa: E501
        """FormDto - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._data = None
        self._form_type_id = None
        self._form_type_name = None
        self._id = None
        self._images = None
        self._location = None
        self._name = None
        self._status = None
        self._valid_from = None
        self._valid_to = None
        self._variety_id = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        if data is not None:
            self.data = data
        self.form_type_id = form_type_id
        if form_type_name is not None:
            self.form_type_name = form_type_name
        if id is not None:
            self.id = id
        if images is not None:
            self.images = images
        if location is not None:
            self.location = location
        self.name = name
        if status is not None:
            self.status = status
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to
        if variety_id is not None:
            self.variety_id = variety_id

    @property
    def client_id(self):
        """Gets the client_id of this FormDto.  # noqa: E501


        :return: The client_id of this FormDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this FormDto.


        :param client_id: The client_id of this FormDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def data(self):
        """Gets the data of this FormDto.  # noqa: E501


        :return: The data of this FormDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this FormDto.


        :param data: The data of this FormDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def form_type_id(self):
        """Gets the form_type_id of this FormDto.  # noqa: E501


        :return: The form_type_id of this FormDto.  # noqa: E501
        :rtype: int
        """
        return self._form_type_id

    @form_type_id.setter
    def form_type_id(self, form_type_id):
        """Sets the form_type_id of this FormDto.


        :param form_type_id: The form_type_id of this FormDto.  # noqa: E501
        :type: int
        """
        if form_type_id is None:
            raise ValueError("Invalid value for `form_type_id`, must not be `None`")  # noqa: E501

        self._form_type_id = form_type_id

    @property
    def form_type_name(self):
        """Gets the form_type_name of this FormDto.  # noqa: E501


        :return: The form_type_name of this FormDto.  # noqa: E501
        :rtype: str
        """
        return self._form_type_name

    @form_type_name.setter
    def form_type_name(self, form_type_name):
        """Sets the form_type_name of this FormDto.


        :param form_type_name: The form_type_name of this FormDto.  # noqa: E501
        :type: str
        """

        self._form_type_name = form_type_name

    @property
    def id(self):
        """Gets the id of this FormDto.  # noqa: E501


        :return: The id of this FormDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FormDto.


        :param id: The id of this FormDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this FormDto.  # noqa: E501


        :return: The images of this FormDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this FormDto.


        :param images: The images of this FormDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._images = images

    @property
    def location(self):
        """Gets the location of this FormDto.  # noqa: E501


        :return: The location of this FormDto.  # noqa: E501
        :rtype: LocationDto
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this FormDto.


        :param location: The location of this FormDto.  # noqa: E501
        :type: LocationDto
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this FormDto.  # noqa: E501


        :return: The name of this FormDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FormDto.


        :param name: The name of this FormDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this FormDto.  # noqa: E501


        :return: The status of this FormDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FormDto.


        :param status: The status of this FormDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "TRIAL", "DEMO", "DISABLE", "DELETE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def valid_from(self):
        """Gets the valid_from of this FormDto.  # noqa: E501


        :return: The valid_from of this FormDto.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this FormDto.


        :param valid_from: The valid_from of this FormDto.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this FormDto.  # noqa: E501


        :return: The valid_to of this FormDto.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this FormDto.


        :param valid_to: The valid_to of this FormDto.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    @property
    def variety_id(self):
        """Gets the variety_id of this FormDto.  # noqa: E501


        :return: The variety_id of this FormDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._variety_id

    @variety_id.setter
    def variety_id(self, variety_id):
        """Sets the variety_id of this FormDto.


        :param variety_id: The variety_id of this FormDto.  # noqa: E501
        :type: list[int]
        """

        self._variety_id = variety_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
