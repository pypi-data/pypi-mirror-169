# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserRoleDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'company_id': 'int',
        'corresponding_kc_id': 'str',
        'data': 'dict(str, object)',
        'deleted': 'bool',
        'id': 'int',
        'mobile_features': 'dict(str, object)',
        'name': 'str',
        'name_features': 'dict(str, object)',
        'permission_name': 'str',
        'permissions': 'list[str]',
        'resources': 'list[KeycloakResourceDto]',
        'role_description': 'str',
        'user_role_status': 'str'
    }

    attribute_map = {
        'client_id': 'clientId',
        'company_id': 'companyId',
        'corresponding_kc_id': 'correspondingKcId',
        'data': 'data',
        'deleted': 'deleted',
        'id': 'id',
        'mobile_features': 'mobileFeatures',
        'name': 'name',
        'name_features': 'nameFeatures',
        'permission_name': 'permissionName',
        'permissions': 'permissions',
        'resources': 'resources',
        'role_description': 'roleDescription',
        'user_role_status': 'userRoleStatus'
    }

    def __init__(self, client_id=None, company_id=None, corresponding_kc_id=None, data=None, deleted=None, id=None, mobile_features=None, name=None, name_features=None, permission_name=None, permissions=None, resources=None, role_description=None, user_role_status=None):  # noqa: E501
        """UserRoleDto - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._company_id = None
        self._corresponding_kc_id = None
        self._data = None
        self._deleted = None
        self._id = None
        self._mobile_features = None
        self._name = None
        self._name_features = None
        self._permission_name = None
        self._permissions = None
        self._resources = None
        self._role_description = None
        self._user_role_status = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        self.company_id = company_id
        if corresponding_kc_id is not None:
            self.corresponding_kc_id = corresponding_kc_id
        if data is not None:
            self.data = data
        if deleted is not None:
            self.deleted = deleted
        if id is not None:
            self.id = id
        if mobile_features is not None:
            self.mobile_features = mobile_features
        self.name = name
        if name_features is not None:
            self.name_features = name_features
        if permission_name is not None:
            self.permission_name = permission_name
        if permissions is not None:
            self.permissions = permissions
        if resources is not None:
            self.resources = resources
        if role_description is not None:
            self.role_description = role_description
        if user_role_status is not None:
            self.user_role_status = user_role_status

    @property
    def client_id(self):
        """Gets the client_id of this UserRoleDto.  # noqa: E501


        :return: The client_id of this UserRoleDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this UserRoleDto.


        :param client_id: The client_id of this UserRoleDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def company_id(self):
        """Gets the company_id of this UserRoleDto.  # noqa: E501


        :return: The company_id of this UserRoleDto.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this UserRoleDto.


        :param company_id: The company_id of this UserRoleDto.  # noqa: E501
        :type: int
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")  # noqa: E501

        self._company_id = company_id

    @property
    def corresponding_kc_id(self):
        """Gets the corresponding_kc_id of this UserRoleDto.  # noqa: E501


        :return: The corresponding_kc_id of this UserRoleDto.  # noqa: E501
        :rtype: str
        """
        return self._corresponding_kc_id

    @corresponding_kc_id.setter
    def corresponding_kc_id(self, corresponding_kc_id):
        """Sets the corresponding_kc_id of this UserRoleDto.


        :param corresponding_kc_id: The corresponding_kc_id of this UserRoleDto.  # noqa: E501
        :type: str
        """

        self._corresponding_kc_id = corresponding_kc_id

    @property
    def data(self):
        """Gets the data of this UserRoleDto.  # noqa: E501


        :return: The data of this UserRoleDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this UserRoleDto.


        :param data: The data of this UserRoleDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def deleted(self):
        """Gets the deleted of this UserRoleDto.  # noqa: E501


        :return: The deleted of this UserRoleDto.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this UserRoleDto.


        :param deleted: The deleted of this UserRoleDto.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this UserRoleDto.  # noqa: E501


        :return: The id of this UserRoleDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserRoleDto.


        :param id: The id of this UserRoleDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def mobile_features(self):
        """Gets the mobile_features of this UserRoleDto.  # noqa: E501


        :return: The mobile_features of this UserRoleDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._mobile_features

    @mobile_features.setter
    def mobile_features(self, mobile_features):
        """Sets the mobile_features of this UserRoleDto.


        :param mobile_features: The mobile_features of this UserRoleDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._mobile_features = mobile_features

    @property
    def name(self):
        """Gets the name of this UserRoleDto.  # noqa: E501


        :return: The name of this UserRoleDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserRoleDto.


        :param name: The name of this UserRoleDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def name_features(self):
        """Gets the name_features of this UserRoleDto.  # noqa: E501


        :return: The name_features of this UserRoleDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._name_features

    @name_features.setter
    def name_features(self, name_features):
        """Sets the name_features of this UserRoleDto.


        :param name_features: The name_features of this UserRoleDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._name_features = name_features

    @property
    def permission_name(self):
        """Gets the permission_name of this UserRoleDto.  # noqa: E501


        :return: The permission_name of this UserRoleDto.  # noqa: E501
        :rtype: str
        """
        return self._permission_name

    @permission_name.setter
    def permission_name(self, permission_name):
        """Sets the permission_name of this UserRoleDto.


        :param permission_name: The permission_name of this UserRoleDto.  # noqa: E501
        :type: str
        """

        self._permission_name = permission_name

    @property
    def permissions(self):
        """Gets the permissions of this UserRoleDto.  # noqa: E501


        :return: The permissions of this UserRoleDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this UserRoleDto.


        :param permissions: The permissions of this UserRoleDto.  # noqa: E501
        :type: list[str]
        """

        self._permissions = permissions

    @property
    def resources(self):
        """Gets the resources of this UserRoleDto.  # noqa: E501


        :return: The resources of this UserRoleDto.  # noqa: E501
        :rtype: list[KeycloakResourceDto]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this UserRoleDto.


        :param resources: The resources of this UserRoleDto.  # noqa: E501
        :type: list[KeycloakResourceDto]
        """

        self._resources = resources

    @property
    def role_description(self):
        """Gets the role_description of this UserRoleDto.  # noqa: E501


        :return: The role_description of this UserRoleDto.  # noqa: E501
        :rtype: str
        """
        return self._role_description

    @role_description.setter
    def role_description(self, role_description):
        """Sets the role_description of this UserRoleDto.


        :param role_description: The role_description of this UserRoleDto.  # noqa: E501
        :type: str
        """

        self._role_description = role_description

    @property
    def user_role_status(self):
        """Gets the user_role_status of this UserRoleDto.  # noqa: E501


        :return: The user_role_status of this UserRoleDto.  # noqa: E501
        :rtype: str
        """
        return self._user_role_status

    @user_role_status.setter
    def user_role_status(self, user_role_status):
        """Sets the user_role_status of this UserRoleDto.


        :param user_role_status: The user_role_status of this UserRoleDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "TRIAL", "DEMO", "DISABLE", "DELETE"]  # noqa: E501
        if user_role_status not in allowed_values:
            raise ValueError(
                "Invalid value for `user_role_status` ({0}), must be one of {1}"  # noqa: E501
                .format(user_role_status, allowed_values)
            )

        self._user_role_status = user_role_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserRoleDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserRoleDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
