# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CaStatusCountDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approved': 'int',
        'area_assigned': 'float',
        'fulfillment_status': 'float',
        'pending': 'int',
        'rejected': 'int',
        'target_area': 'float'
    }

    attribute_map = {
        'approved': 'approved',
        'area_assigned': 'areaAssigned',
        'fulfillment_status': 'fulfillmentStatus',
        'pending': 'pending',
        'rejected': 'rejected',
        'target_area': 'targetArea'
    }

    def __init__(self, approved=None, area_assigned=None, fulfillment_status=None, pending=None, rejected=None, target_area=None):  # noqa: E501
        """CaStatusCountDto - a model defined in Swagger"""  # noqa: E501
        self._approved = None
        self._area_assigned = None
        self._fulfillment_status = None
        self._pending = None
        self._rejected = None
        self._target_area = None
        self.discriminator = None
        if approved is not None:
            self.approved = approved
        if area_assigned is not None:
            self.area_assigned = area_assigned
        if fulfillment_status is not None:
            self.fulfillment_status = fulfillment_status
        if pending is not None:
            self.pending = pending
        if rejected is not None:
            self.rejected = rejected
        if target_area is not None:
            self.target_area = target_area

    @property
    def approved(self):
        """Gets the approved of this CaStatusCountDto.  # noqa: E501


        :return: The approved of this CaStatusCountDto.  # noqa: E501
        :rtype: int
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this CaStatusCountDto.


        :param approved: The approved of this CaStatusCountDto.  # noqa: E501
        :type: int
        """

        self._approved = approved

    @property
    def area_assigned(self):
        """Gets the area_assigned of this CaStatusCountDto.  # noqa: E501


        :return: The area_assigned of this CaStatusCountDto.  # noqa: E501
        :rtype: float
        """
        return self._area_assigned

    @area_assigned.setter
    def area_assigned(self, area_assigned):
        """Sets the area_assigned of this CaStatusCountDto.


        :param area_assigned: The area_assigned of this CaStatusCountDto.  # noqa: E501
        :type: float
        """

        self._area_assigned = area_assigned

    @property
    def fulfillment_status(self):
        """Gets the fulfillment_status of this CaStatusCountDto.  # noqa: E501


        :return: The fulfillment_status of this CaStatusCountDto.  # noqa: E501
        :rtype: float
        """
        return self._fulfillment_status

    @fulfillment_status.setter
    def fulfillment_status(self, fulfillment_status):
        """Sets the fulfillment_status of this CaStatusCountDto.


        :param fulfillment_status: The fulfillment_status of this CaStatusCountDto.  # noqa: E501
        :type: float
        """

        self._fulfillment_status = fulfillment_status

    @property
    def pending(self):
        """Gets the pending of this CaStatusCountDto.  # noqa: E501


        :return: The pending of this CaStatusCountDto.  # noqa: E501
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this CaStatusCountDto.


        :param pending: The pending of this CaStatusCountDto.  # noqa: E501
        :type: int
        """

        self._pending = pending

    @property
    def rejected(self):
        """Gets the rejected of this CaStatusCountDto.  # noqa: E501


        :return: The rejected of this CaStatusCountDto.  # noqa: E501
        :rtype: int
        """
        return self._rejected

    @rejected.setter
    def rejected(self, rejected):
        """Sets the rejected of this CaStatusCountDto.


        :param rejected: The rejected of this CaStatusCountDto.  # noqa: E501
        :type: int
        """

        self._rejected = rejected

    @property
    def target_area(self):
        """Gets the target_area of this CaStatusCountDto.  # noqa: E501


        :return: The target_area of this CaStatusCountDto.  # noqa: E501
        :rtype: float
        """
        return self._target_area

    @target_area.setter
    def target_area(self, target_area):
        """Sets the target_area of this CaStatusCountDto.


        :param target_area: The target_area of this CaStatusCountDto.  # noqa: E501
        :type: float
        """

        self._target_area = target_area

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CaStatusCountDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CaStatusCountDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
