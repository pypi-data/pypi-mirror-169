# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CropDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crop_id': 'int',
        'crop_name': 'str',
        'expected_harvest_date': 'datetime',
        'sowing_date': 'datetime'
    }

    attribute_map = {
        'crop_id': 'cropId',
        'crop_name': 'cropName',
        'expected_harvest_date': 'expectedHarvestDate',
        'sowing_date': 'sowingDate'
    }

    def __init__(self, crop_id=None, crop_name=None, expected_harvest_date=None, sowing_date=None):  # noqa: E501
        """CropDetails - a model defined in Swagger"""  # noqa: E501
        self._crop_id = None
        self._crop_name = None
        self._expected_harvest_date = None
        self._sowing_date = None
        self.discriminator = None
        if crop_id is not None:
            self.crop_id = crop_id
        if crop_name is not None:
            self.crop_name = crop_name
        if expected_harvest_date is not None:
            self.expected_harvest_date = expected_harvest_date
        if sowing_date is not None:
            self.sowing_date = sowing_date

    @property
    def crop_id(self):
        """Gets the crop_id of this CropDetails.  # noqa: E501


        :return: The crop_id of this CropDetails.  # noqa: E501
        :rtype: int
        """
        return self._crop_id

    @crop_id.setter
    def crop_id(self, crop_id):
        """Sets the crop_id of this CropDetails.


        :param crop_id: The crop_id of this CropDetails.  # noqa: E501
        :type: int
        """

        self._crop_id = crop_id

    @property
    def crop_name(self):
        """Gets the crop_name of this CropDetails.  # noqa: E501


        :return: The crop_name of this CropDetails.  # noqa: E501
        :rtype: str
        """
        return self._crop_name

    @crop_name.setter
    def crop_name(self, crop_name):
        """Sets the crop_name of this CropDetails.


        :param crop_name: The crop_name of this CropDetails.  # noqa: E501
        :type: str
        """

        self._crop_name = crop_name

    @property
    def expected_harvest_date(self):
        """Gets the expected_harvest_date of this CropDetails.  # noqa: E501


        :return: The expected_harvest_date of this CropDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_harvest_date

    @expected_harvest_date.setter
    def expected_harvest_date(self, expected_harvest_date):
        """Sets the expected_harvest_date of this CropDetails.


        :param expected_harvest_date: The expected_harvest_date of this CropDetails.  # noqa: E501
        :type: datetime
        """

        self._expected_harvest_date = expected_harvest_date

    @property
    def sowing_date(self):
        """Gets the sowing_date of this CropDetails.  # noqa: E501


        :return: The sowing_date of this CropDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._sowing_date

    @sowing_date.setter
    def sowing_date(self, sowing_date):
        """Sets the sowing_date of this CropDetails.


        :param sowing_date: The sowing_date of this CropDetails.  # noqa: E501
        :type: datetime
        """

        self._sowing_date = sowing_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CropDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CropDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
