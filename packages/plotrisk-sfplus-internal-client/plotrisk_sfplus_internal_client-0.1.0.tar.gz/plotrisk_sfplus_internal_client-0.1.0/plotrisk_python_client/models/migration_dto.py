# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MigrationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_type': 'str',
        'ids': 'list[int]',
        'tenant_name': 'str'
    }

    attribute_map = {
        'id_type': 'idType',
        'ids': 'ids',
        'tenant_name': 'tenantName'
    }

    def __init__(self, id_type=None, ids=None, tenant_name=None):  # noqa: E501
        """MigrationDto - a model defined in Swagger"""  # noqa: E501
        self._id_type = None
        self._ids = None
        self._tenant_name = None
        self.discriminator = None
        if id_type is not None:
            self.id_type = id_type
        if ids is not None:
            self.ids = ids
        if tenant_name is not None:
            self.tenant_name = tenant_name

    @property
    def id_type(self):
        """Gets the id_type of this MigrationDto.  # noqa: E501


        :return: The id_type of this MigrationDto.  # noqa: E501
        :rtype: str
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this MigrationDto.


        :param id_type: The id_type of this MigrationDto.  # noqa: E501
        :type: str
        """

        self._id_type = id_type

    @property
    def ids(self):
        """Gets the ids of this MigrationDto.  # noqa: E501


        :return: The ids of this MigrationDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this MigrationDto.


        :param ids: The ids of this MigrationDto.  # noqa: E501
        :type: list[int]
        """

        self._ids = ids

    @property
    def tenant_name(self):
        """Gets the tenant_name of this MigrationDto.  # noqa: E501


        :return: The tenant_name of this MigrationDto.  # noqa: E501
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this MigrationDto.


        :param tenant_name: The tenant_name of this MigrationDto.  # noqa: E501
        :type: str
        """

        self._tenant_name = tenant_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
