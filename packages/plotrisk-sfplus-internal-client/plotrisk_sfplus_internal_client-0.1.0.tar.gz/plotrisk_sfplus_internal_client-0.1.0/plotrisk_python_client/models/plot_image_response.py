# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlotImageResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boundary_id': 'str',
        'bytes': 'str',
        '_date': 'str',
        'image_name': 'str',
        'image_type': 'str'
    }

    attribute_map = {
        'boundary_id': 'boundaryId',
        'bytes': 'bytes',
        '_date': 'date',
        'image_name': 'imageName',
        'image_type': 'imageType'
    }

    def __init__(self, boundary_id=None, bytes=None, _date=None, image_name=None, image_type=None):  # noqa: E501
        """PlotImageResponse - a model defined in Swagger"""  # noqa: E501
        self._boundary_id = None
        self._bytes = None
        self.__date = None
        self._image_name = None
        self._image_type = None
        self.discriminator = None
        if boundary_id is not None:
            self.boundary_id = boundary_id
        if bytes is not None:
            self.bytes = bytes
        if _date is not None:
            self._date = _date
        if image_name is not None:
            self.image_name = image_name
        if image_type is not None:
            self.image_type = image_type

    @property
    def boundary_id(self):
        """Gets the boundary_id of this PlotImageResponse.  # noqa: E501


        :return: The boundary_id of this PlotImageResponse.  # noqa: E501
        :rtype: str
        """
        return self._boundary_id

    @boundary_id.setter
    def boundary_id(self, boundary_id):
        """Sets the boundary_id of this PlotImageResponse.


        :param boundary_id: The boundary_id of this PlotImageResponse.  # noqa: E501
        :type: str
        """

        self._boundary_id = boundary_id

    @property
    def bytes(self):
        """Gets the bytes of this PlotImageResponse.  # noqa: E501


        :return: The bytes of this PlotImageResponse.  # noqa: E501
        :rtype: str
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this PlotImageResponse.


        :param bytes: The bytes of this PlotImageResponse.  # noqa: E501
        :type: str
        """

        self._bytes = bytes

    @property
    def _date(self):
        """Gets the _date of this PlotImageResponse.  # noqa: E501


        :return: The _date of this PlotImageResponse.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PlotImageResponse.


        :param _date: The _date of this PlotImageResponse.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def image_name(self):
        """Gets the image_name of this PlotImageResponse.  # noqa: E501


        :return: The image_name of this PlotImageResponse.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this PlotImageResponse.


        :param image_name: The image_name of this PlotImageResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["ARVI", "CHI_Re", "CROP_HEALTH_CROP_GREENESS", "CROP_HEALTH_NITROGEN_UPTAKE", "CROP_WATER_STRESS_LSWI", "EVI", "HLM", "LAI2", "LSWI", "NDRE", "NDVI", "SAVI"]  # noqa: E501
        if image_name not in allowed_values:
            raise ValueError(
                "Invalid value for `image_name` ({0}), must be one of {1}"  # noqa: E501
                .format(image_name, allowed_values)
            )

        self._image_name = image_name

    @property
    def image_type(self):
        """Gets the image_type of this PlotImageResponse.  # noqa: E501


        :return: The image_type of this PlotImageResponse.  # noqa: E501
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this PlotImageResponse.


        :param image_type: The image_type of this PlotImageResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["PNG", "TIFF"]  # noqa: E501
        if image_type not in allowed_values:
            raise ValueError(
                "Invalid value for `image_type` ({0}), must be one of {1}"  # noqa: E501
                .format(image_type, allowed_values)
            )

        self._image_type = image_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlotImageResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlotImageResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
