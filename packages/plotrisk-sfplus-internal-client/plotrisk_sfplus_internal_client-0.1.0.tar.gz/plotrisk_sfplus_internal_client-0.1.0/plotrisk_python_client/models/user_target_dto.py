# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserTargetDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'data': 'dict(str, object)',
        'id': 'int',
        'locations': 'list[LocationDto]',
        'project_id': 'int',
        'target_area': 'Area',
        'user_id': 'int'
    }

    attribute_map = {
        'client_id': 'clientId',
        'data': 'data',
        'id': 'id',
        'locations': 'locations',
        'project_id': 'projectId',
        'target_area': 'targetArea',
        'user_id': 'userId'
    }

    def __init__(self, client_id=None, data=None, id=None, locations=None, project_id=None, target_area=None, user_id=None):  # noqa: E501
        """UserTargetDto - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._data = None
        self._id = None
        self._locations = None
        self._project_id = None
        self._target_area = None
        self._user_id = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        if data is not None:
            self.data = data
        if id is not None:
            self.id = id
        if locations is not None:
            self.locations = locations
        self.project_id = project_id
        if target_area is not None:
            self.target_area = target_area
        self.user_id = user_id

    @property
    def client_id(self):
        """Gets the client_id of this UserTargetDto.  # noqa: E501


        :return: The client_id of this UserTargetDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this UserTargetDto.


        :param client_id: The client_id of this UserTargetDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def data(self):
        """Gets the data of this UserTargetDto.  # noqa: E501


        :return: The data of this UserTargetDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this UserTargetDto.


        :param data: The data of this UserTargetDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def id(self):
        """Gets the id of this UserTargetDto.  # noqa: E501


        :return: The id of this UserTargetDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserTargetDto.


        :param id: The id of this UserTargetDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def locations(self):
        """Gets the locations of this UserTargetDto.  # noqa: E501


        :return: The locations of this UserTargetDto.  # noqa: E501
        :rtype: list[LocationDto]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this UserTargetDto.


        :param locations: The locations of this UserTargetDto.  # noqa: E501
        :type: list[LocationDto]
        """

        self._locations = locations

    @property
    def project_id(self):
        """Gets the project_id of this UserTargetDto.  # noqa: E501


        :return: The project_id of this UserTargetDto.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this UserTargetDto.


        :param project_id: The project_id of this UserTargetDto.  # noqa: E501
        :type: int
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def target_area(self):
        """Gets the target_area of this UserTargetDto.  # noqa: E501


        :return: The target_area of this UserTargetDto.  # noqa: E501
        :rtype: Area
        """
        return self._target_area

    @target_area.setter
    def target_area(self, target_area):
        """Sets the target_area of this UserTargetDto.


        :param target_area: The target_area of this UserTargetDto.  # noqa: E501
        :type: Area
        """

        self._target_area = target_area

    @property
    def user_id(self):
        """Gets the user_id of this UserTargetDto.  # noqa: E501


        :return: The user_id of this UserTargetDto.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserTargetDto.


        :param user_id: The user_id of this UserTargetDto.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserTargetDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserTargetDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
