# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChemicalDetailsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'concentration': 'float',
        'crop_issues': 'list[CropIssueDto]',
        'data': 'dict(str, object)',
        'description': 'str',
        'id': 'int',
        'mrl': 'float',
        'name': 'str',
        'per_acre_quantity': 'float',
        'phi': 'float',
        're_entry_interval': 'int',
        'remarks': 'str',
        'type_id': 'int',
        'unit_of_concentration_id': 'int',
        'unit_of_measure_id': 'int',
        'vendor_id': 'int'
    }

    attribute_map = {
        'client_id': 'clientId',
        'concentration': 'concentration',
        'crop_issues': 'cropIssues',
        'data': 'data',
        'description': 'description',
        'id': 'id',
        'mrl': 'mrl',
        'name': 'name',
        'per_acre_quantity': 'perAcreQuantity',
        'phi': 'phi',
        're_entry_interval': 'reEntryInterval',
        'remarks': 'remarks',
        'type_id': 'typeId',
        'unit_of_concentration_id': 'unitOfConcentrationId',
        'unit_of_measure_id': 'unitOfMeasureId',
        'vendor_id': 'vendorId'
    }

    def __init__(self, client_id=None, concentration=None, crop_issues=None, data=None, description=None, id=None, mrl=None, name=None, per_acre_quantity=None, phi=None, re_entry_interval=None, remarks=None, type_id=None, unit_of_concentration_id=None, unit_of_measure_id=None, vendor_id=None):  # noqa: E501
        """ChemicalDetailsDto - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._concentration = None
        self._crop_issues = None
        self._data = None
        self._description = None
        self._id = None
        self._mrl = None
        self._name = None
        self._per_acre_quantity = None
        self._phi = None
        self._re_entry_interval = None
        self._remarks = None
        self._type_id = None
        self._unit_of_concentration_id = None
        self._unit_of_measure_id = None
        self._vendor_id = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        if concentration is not None:
            self.concentration = concentration
        if crop_issues is not None:
            self.crop_issues = crop_issues
        if data is not None:
            self.data = data
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if mrl is not None:
            self.mrl = mrl
        self.name = name
        if per_acre_quantity is not None:
            self.per_acre_quantity = per_acre_quantity
        if phi is not None:
            self.phi = phi
        if re_entry_interval is not None:
            self.re_entry_interval = re_entry_interval
        if remarks is not None:
            self.remarks = remarks
        if type_id is not None:
            self.type_id = type_id
        if unit_of_concentration_id is not None:
            self.unit_of_concentration_id = unit_of_concentration_id
        if unit_of_measure_id is not None:
            self.unit_of_measure_id = unit_of_measure_id
        if vendor_id is not None:
            self.vendor_id = vendor_id

    @property
    def client_id(self):
        """Gets the client_id of this ChemicalDetailsDto.  # noqa: E501


        :return: The client_id of this ChemicalDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ChemicalDetailsDto.


        :param client_id: The client_id of this ChemicalDetailsDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def concentration(self):
        """Gets the concentration of this ChemicalDetailsDto.  # noqa: E501


        :return: The concentration of this ChemicalDetailsDto.  # noqa: E501
        :rtype: float
        """
        return self._concentration

    @concentration.setter
    def concentration(self, concentration):
        """Sets the concentration of this ChemicalDetailsDto.


        :param concentration: The concentration of this ChemicalDetailsDto.  # noqa: E501
        :type: float
        """

        self._concentration = concentration

    @property
    def crop_issues(self):
        """Gets the crop_issues of this ChemicalDetailsDto.  # noqa: E501


        :return: The crop_issues of this ChemicalDetailsDto.  # noqa: E501
        :rtype: list[CropIssueDto]
        """
        return self._crop_issues

    @crop_issues.setter
    def crop_issues(self, crop_issues):
        """Sets the crop_issues of this ChemicalDetailsDto.


        :param crop_issues: The crop_issues of this ChemicalDetailsDto.  # noqa: E501
        :type: list[CropIssueDto]
        """

        self._crop_issues = crop_issues

    @property
    def data(self):
        """Gets the data of this ChemicalDetailsDto.  # noqa: E501


        :return: The data of this ChemicalDetailsDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ChemicalDetailsDto.


        :param data: The data of this ChemicalDetailsDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def description(self):
        """Gets the description of this ChemicalDetailsDto.  # noqa: E501


        :return: The description of this ChemicalDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChemicalDetailsDto.


        :param description: The description of this ChemicalDetailsDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ChemicalDetailsDto.  # noqa: E501


        :return: The id of this ChemicalDetailsDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChemicalDetailsDto.


        :param id: The id of this ChemicalDetailsDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def mrl(self):
        """Gets the mrl of this ChemicalDetailsDto.  # noqa: E501


        :return: The mrl of this ChemicalDetailsDto.  # noqa: E501
        :rtype: float
        """
        return self._mrl

    @mrl.setter
    def mrl(self, mrl):
        """Sets the mrl of this ChemicalDetailsDto.


        :param mrl: The mrl of this ChemicalDetailsDto.  # noqa: E501
        :type: float
        """

        self._mrl = mrl

    @property
    def name(self):
        """Gets the name of this ChemicalDetailsDto.  # noqa: E501


        :return: The name of this ChemicalDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChemicalDetailsDto.


        :param name: The name of this ChemicalDetailsDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def per_acre_quantity(self):
        """Gets the per_acre_quantity of this ChemicalDetailsDto.  # noqa: E501


        :return: The per_acre_quantity of this ChemicalDetailsDto.  # noqa: E501
        :rtype: float
        """
        return self._per_acre_quantity

    @per_acre_quantity.setter
    def per_acre_quantity(self, per_acre_quantity):
        """Sets the per_acre_quantity of this ChemicalDetailsDto.


        :param per_acre_quantity: The per_acre_quantity of this ChemicalDetailsDto.  # noqa: E501
        :type: float
        """

        self._per_acre_quantity = per_acre_quantity

    @property
    def phi(self):
        """Gets the phi of this ChemicalDetailsDto.  # noqa: E501


        :return: The phi of this ChemicalDetailsDto.  # noqa: E501
        :rtype: float
        """
        return self._phi

    @phi.setter
    def phi(self, phi):
        """Sets the phi of this ChemicalDetailsDto.


        :param phi: The phi of this ChemicalDetailsDto.  # noqa: E501
        :type: float
        """

        self._phi = phi

    @property
    def re_entry_interval(self):
        """Gets the re_entry_interval of this ChemicalDetailsDto.  # noqa: E501


        :return: The re_entry_interval of this ChemicalDetailsDto.  # noqa: E501
        :rtype: int
        """
        return self._re_entry_interval

    @re_entry_interval.setter
    def re_entry_interval(self, re_entry_interval):
        """Sets the re_entry_interval of this ChemicalDetailsDto.


        :param re_entry_interval: The re_entry_interval of this ChemicalDetailsDto.  # noqa: E501
        :type: int
        """

        self._re_entry_interval = re_entry_interval

    @property
    def remarks(self):
        """Gets the remarks of this ChemicalDetailsDto.  # noqa: E501


        :return: The remarks of this ChemicalDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this ChemicalDetailsDto.


        :param remarks: The remarks of this ChemicalDetailsDto.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def type_id(self):
        """Gets the type_id of this ChemicalDetailsDto.  # noqa: E501


        :return: The type_id of this ChemicalDetailsDto.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this ChemicalDetailsDto.


        :param type_id: The type_id of this ChemicalDetailsDto.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def unit_of_concentration_id(self):
        """Gets the unit_of_concentration_id of this ChemicalDetailsDto.  # noqa: E501


        :return: The unit_of_concentration_id of this ChemicalDetailsDto.  # noqa: E501
        :rtype: int
        """
        return self._unit_of_concentration_id

    @unit_of_concentration_id.setter
    def unit_of_concentration_id(self, unit_of_concentration_id):
        """Sets the unit_of_concentration_id of this ChemicalDetailsDto.


        :param unit_of_concentration_id: The unit_of_concentration_id of this ChemicalDetailsDto.  # noqa: E501
        :type: int
        """

        self._unit_of_concentration_id = unit_of_concentration_id

    @property
    def unit_of_measure_id(self):
        """Gets the unit_of_measure_id of this ChemicalDetailsDto.  # noqa: E501


        :return: The unit_of_measure_id of this ChemicalDetailsDto.  # noqa: E501
        :rtype: int
        """
        return self._unit_of_measure_id

    @unit_of_measure_id.setter
    def unit_of_measure_id(self, unit_of_measure_id):
        """Sets the unit_of_measure_id of this ChemicalDetailsDto.


        :param unit_of_measure_id: The unit_of_measure_id of this ChemicalDetailsDto.  # noqa: E501
        :type: int
        """

        self._unit_of_measure_id = unit_of_measure_id

    @property
    def vendor_id(self):
        """Gets the vendor_id of this ChemicalDetailsDto.  # noqa: E501


        :return: The vendor_id of this ChemicalDetailsDto.  # noqa: E501
        :rtype: int
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this ChemicalDetailsDto.


        :param vendor_id: The vendor_id of this ChemicalDetailsDto.  # noqa: E501
        :type: int
        """

        self._vendor_id = vendor_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChemicalDetailsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChemicalDetailsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
