# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BatchDetailsReportDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_number': 'str',
        'crop_varieties': 'list[str]',
        'croppable_area_dtos': 'list[CroppableAreaDTO]',
        'farmer_dtos': 'list[FarmerDTO]',
        'harvest_quantities': 'list[HarvestQuantity]',
        'sku_types': 'dict(str, int)',
        'total_area': 'float',
        'total_sku': 'int',
        'vehicle_numbers': 'list[str]'
    }

    attribute_map = {
        'batch_number': 'batchNumber',
        'crop_varieties': 'cropVarieties',
        'croppable_area_dtos': 'croppableAreaDTOS',
        'farmer_dtos': 'farmerDTOS',
        'harvest_quantities': 'harvestQuantities',
        'sku_types': 'skuTypes',
        'total_area': 'totalArea',
        'total_sku': 'totalSku',
        'vehicle_numbers': 'vehicleNumbers'
    }

    def __init__(self, batch_number=None, crop_varieties=None, croppable_area_dtos=None, farmer_dtos=None, harvest_quantities=None, sku_types=None, total_area=None, total_sku=None, vehicle_numbers=None):  # noqa: E501
        """BatchDetailsReportDto - a model defined in Swagger"""  # noqa: E501
        self._batch_number = None
        self._crop_varieties = None
        self._croppable_area_dtos = None
        self._farmer_dtos = None
        self._harvest_quantities = None
        self._sku_types = None
        self._total_area = None
        self._total_sku = None
        self._vehicle_numbers = None
        self.discriminator = None
        if batch_number is not None:
            self.batch_number = batch_number
        if crop_varieties is not None:
            self.crop_varieties = crop_varieties
        if croppable_area_dtos is not None:
            self.croppable_area_dtos = croppable_area_dtos
        if farmer_dtos is not None:
            self.farmer_dtos = farmer_dtos
        if harvest_quantities is not None:
            self.harvest_quantities = harvest_quantities
        if sku_types is not None:
            self.sku_types = sku_types
        if total_area is not None:
            self.total_area = total_area
        if total_sku is not None:
            self.total_sku = total_sku
        if vehicle_numbers is not None:
            self.vehicle_numbers = vehicle_numbers

    @property
    def batch_number(self):
        """Gets the batch_number of this BatchDetailsReportDto.  # noqa: E501


        :return: The batch_number of this BatchDetailsReportDto.  # noqa: E501
        :rtype: str
        """
        return self._batch_number

    @batch_number.setter
    def batch_number(self, batch_number):
        """Sets the batch_number of this BatchDetailsReportDto.


        :param batch_number: The batch_number of this BatchDetailsReportDto.  # noqa: E501
        :type: str
        """

        self._batch_number = batch_number

    @property
    def crop_varieties(self):
        """Gets the crop_varieties of this BatchDetailsReportDto.  # noqa: E501


        :return: The crop_varieties of this BatchDetailsReportDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._crop_varieties

    @crop_varieties.setter
    def crop_varieties(self, crop_varieties):
        """Sets the crop_varieties of this BatchDetailsReportDto.


        :param crop_varieties: The crop_varieties of this BatchDetailsReportDto.  # noqa: E501
        :type: list[str]
        """

        self._crop_varieties = crop_varieties

    @property
    def croppable_area_dtos(self):
        """Gets the croppable_area_dtos of this BatchDetailsReportDto.  # noqa: E501


        :return: The croppable_area_dtos of this BatchDetailsReportDto.  # noqa: E501
        :rtype: list[CroppableAreaDTO]
        """
        return self._croppable_area_dtos

    @croppable_area_dtos.setter
    def croppable_area_dtos(self, croppable_area_dtos):
        """Sets the croppable_area_dtos of this BatchDetailsReportDto.


        :param croppable_area_dtos: The croppable_area_dtos of this BatchDetailsReportDto.  # noqa: E501
        :type: list[CroppableAreaDTO]
        """

        self._croppable_area_dtos = croppable_area_dtos

    @property
    def farmer_dtos(self):
        """Gets the farmer_dtos of this BatchDetailsReportDto.  # noqa: E501


        :return: The farmer_dtos of this BatchDetailsReportDto.  # noqa: E501
        :rtype: list[FarmerDTO]
        """
        return self._farmer_dtos

    @farmer_dtos.setter
    def farmer_dtos(self, farmer_dtos):
        """Sets the farmer_dtos of this BatchDetailsReportDto.


        :param farmer_dtos: The farmer_dtos of this BatchDetailsReportDto.  # noqa: E501
        :type: list[FarmerDTO]
        """

        self._farmer_dtos = farmer_dtos

    @property
    def harvest_quantities(self):
        """Gets the harvest_quantities of this BatchDetailsReportDto.  # noqa: E501


        :return: The harvest_quantities of this BatchDetailsReportDto.  # noqa: E501
        :rtype: list[HarvestQuantity]
        """
        return self._harvest_quantities

    @harvest_quantities.setter
    def harvest_quantities(self, harvest_quantities):
        """Sets the harvest_quantities of this BatchDetailsReportDto.


        :param harvest_quantities: The harvest_quantities of this BatchDetailsReportDto.  # noqa: E501
        :type: list[HarvestQuantity]
        """

        self._harvest_quantities = harvest_quantities

    @property
    def sku_types(self):
        """Gets the sku_types of this BatchDetailsReportDto.  # noqa: E501


        :return: The sku_types of this BatchDetailsReportDto.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._sku_types

    @sku_types.setter
    def sku_types(self, sku_types):
        """Sets the sku_types of this BatchDetailsReportDto.


        :param sku_types: The sku_types of this BatchDetailsReportDto.  # noqa: E501
        :type: dict(str, int)
        """

        self._sku_types = sku_types

    @property
    def total_area(self):
        """Gets the total_area of this BatchDetailsReportDto.  # noqa: E501


        :return: The total_area of this BatchDetailsReportDto.  # noqa: E501
        :rtype: float
        """
        return self._total_area

    @total_area.setter
    def total_area(self, total_area):
        """Sets the total_area of this BatchDetailsReportDto.


        :param total_area: The total_area of this BatchDetailsReportDto.  # noqa: E501
        :type: float
        """

        self._total_area = total_area

    @property
    def total_sku(self):
        """Gets the total_sku of this BatchDetailsReportDto.  # noqa: E501


        :return: The total_sku of this BatchDetailsReportDto.  # noqa: E501
        :rtype: int
        """
        return self._total_sku

    @total_sku.setter
    def total_sku(self, total_sku):
        """Sets the total_sku of this BatchDetailsReportDto.


        :param total_sku: The total_sku of this BatchDetailsReportDto.  # noqa: E501
        :type: int
        """

        self._total_sku = total_sku

    @property
    def vehicle_numbers(self):
        """Gets the vehicle_numbers of this BatchDetailsReportDto.  # noqa: E501


        :return: The vehicle_numbers of this BatchDetailsReportDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._vehicle_numbers

    @vehicle_numbers.setter
    def vehicle_numbers(self, vehicle_numbers):
        """Sets the vehicle_numbers of this BatchDetailsReportDto.


        :param vehicle_numbers: The vehicle_numbers of this BatchDetailsReportDto.  # noqa: E501
        :type: list[str]
        """

        self._vehicle_numbers = vehicle_numbers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchDetailsReportDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchDetailsReportDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
