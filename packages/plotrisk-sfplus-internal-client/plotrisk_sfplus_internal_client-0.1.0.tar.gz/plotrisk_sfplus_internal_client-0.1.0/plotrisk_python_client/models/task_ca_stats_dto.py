# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskCaStatsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'completed': 'int',
        'due': 'int',
        'pending': 'int',
        'upcoming': 'int'
    }

    attribute_map = {
        'completed': 'completed',
        'due': 'due',
        'pending': 'pending',
        'upcoming': 'upcoming'
    }

    def __init__(self, completed=None, due=None, pending=None, upcoming=None):  # noqa: E501
        """TaskCaStatsDto - a model defined in Swagger"""  # noqa: E501
        self._completed = None
        self._due = None
        self._pending = None
        self._upcoming = None
        self.discriminator = None
        if completed is not None:
            self.completed = completed
        if due is not None:
            self.due = due
        if pending is not None:
            self.pending = pending
        if upcoming is not None:
            self.upcoming = upcoming

    @property
    def completed(self):
        """Gets the completed of this TaskCaStatsDto.  # noqa: E501


        :return: The completed of this TaskCaStatsDto.  # noqa: E501
        :rtype: int
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this TaskCaStatsDto.


        :param completed: The completed of this TaskCaStatsDto.  # noqa: E501
        :type: int
        """

        self._completed = completed

    @property
    def due(self):
        """Gets the due of this TaskCaStatsDto.  # noqa: E501


        :return: The due of this TaskCaStatsDto.  # noqa: E501
        :rtype: int
        """
        return self._due

    @due.setter
    def due(self, due):
        """Sets the due of this TaskCaStatsDto.


        :param due: The due of this TaskCaStatsDto.  # noqa: E501
        :type: int
        """

        self._due = due

    @property
    def pending(self):
        """Gets the pending of this TaskCaStatsDto.  # noqa: E501


        :return: The pending of this TaskCaStatsDto.  # noqa: E501
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this TaskCaStatsDto.


        :param pending: The pending of this TaskCaStatsDto.  # noqa: E501
        :type: int
        """

        self._pending = pending

    @property
    def upcoming(self):
        """Gets the upcoming of this TaskCaStatsDto.  # noqa: E501


        :return: The upcoming of this TaskCaStatsDto.  # noqa: E501
        :rtype: int
        """
        return self._upcoming

    @upcoming.setter
    def upcoming(self, upcoming):
        """Sets the upcoming of this TaskCaStatsDto.


        :param upcoming: The upcoming of this TaskCaStatsDto.  # noqa: E501
        :type: int
        """

        self._upcoming = upcoming

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskCaStatsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskCaStatsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
