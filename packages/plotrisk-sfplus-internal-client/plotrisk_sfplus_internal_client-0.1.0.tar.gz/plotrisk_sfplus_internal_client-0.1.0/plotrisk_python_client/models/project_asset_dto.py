# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectAssetDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'area': 'Area',
        'asset': 'AssetDto',
        'client_id': 'str',
        'data': 'dict(str, object)',
        'id': 'int',
        'last_modified_date': 'datetime',
        'project_id': 'int',
        'status': 'str'
    }

    attribute_map = {
        'area': 'area',
        'asset': 'asset',
        'client_id': 'clientId',
        'data': 'data',
        'id': 'id',
        'last_modified_date': 'lastModifiedDate',
        'project_id': 'projectId',
        'status': 'status'
    }

    def __init__(self, area=None, asset=None, client_id=None, data=None, id=None, last_modified_date=None, project_id=None, status=None):  # noqa: E501
        """ProjectAssetDto - a model defined in Swagger"""  # noqa: E501
        self._area = None
        self._asset = None
        self._client_id = None
        self._data = None
        self._id = None
        self._last_modified_date = None
        self._project_id = None
        self._status = None
        self.discriminator = None
        if area is not None:
            self.area = area
        self.asset = asset
        if client_id is not None:
            self.client_id = client_id
        if data is not None:
            self.data = data
        if id is not None:
            self.id = id
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        self.project_id = project_id
        if status is not None:
            self.status = status

    @property
    def area(self):
        """Gets the area of this ProjectAssetDto.  # noqa: E501


        :return: The area of this ProjectAssetDto.  # noqa: E501
        :rtype: Area
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this ProjectAssetDto.


        :param area: The area of this ProjectAssetDto.  # noqa: E501
        :type: Area
        """

        self._area = area

    @property
    def asset(self):
        """Gets the asset of this ProjectAssetDto.  # noqa: E501


        :return: The asset of this ProjectAssetDto.  # noqa: E501
        :rtype: AssetDto
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this ProjectAssetDto.


        :param asset: The asset of this ProjectAssetDto.  # noqa: E501
        :type: AssetDto
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def client_id(self):
        """Gets the client_id of this ProjectAssetDto.  # noqa: E501


        :return: The client_id of this ProjectAssetDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ProjectAssetDto.


        :param client_id: The client_id of this ProjectAssetDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def data(self):
        """Gets the data of this ProjectAssetDto.  # noqa: E501


        :return: The data of this ProjectAssetDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ProjectAssetDto.


        :param data: The data of this ProjectAssetDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def id(self):
        """Gets the id of this ProjectAssetDto.  # noqa: E501


        :return: The id of this ProjectAssetDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectAssetDto.


        :param id: The id of this ProjectAssetDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this ProjectAssetDto.  # noqa: E501


        :return: The last_modified_date of this ProjectAssetDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this ProjectAssetDto.


        :param last_modified_date: The last_modified_date of this ProjectAssetDto.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def project_id(self):
        """Gets the project_id of this ProjectAssetDto.  # noqa: E501


        :return: The project_id of this ProjectAssetDto.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectAssetDto.


        :param project_id: The project_id of this ProjectAssetDto.  # noqa: E501
        :type: int
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def status(self):
        """Gets the status of this ProjectAssetDto.  # noqa: E501


        :return: The status of this ProjectAssetDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProjectAssetDto.


        :param status: The status of this ProjectAssetDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROBABLE", "ACCEPTED", "PENDING", "REJECTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectAssetDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectAssetDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
