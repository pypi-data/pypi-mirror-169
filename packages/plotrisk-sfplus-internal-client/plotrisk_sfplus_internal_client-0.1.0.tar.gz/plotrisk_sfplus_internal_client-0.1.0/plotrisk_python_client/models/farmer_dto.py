# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FarmerDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'AddressDto',
        'assigned_to': 'list[UserDto]',
        'client_id': 'str',
        'contractor_id': 'int',
        'contractor_location': 'str',
        'contractor_name': 'str',
        'data': 'dict(str, object)',
        'declared_area': 'Area',
        'deleted': 'bool',
        'device_token': 'str',
        'device_type': 'str',
        'email': 'str',
        'farmer_code': 'str',
        'first_name': 'str',
        'gender': 'str',
        'id': 'int',
        'images': 'dict(str, object)',
        'is_acre_square_enabled': 'bool',
        'last_name': 'str',
        'status': 'str'
    }

    attribute_map = {
        'address': 'address',
        'assigned_to': 'assignedTo',
        'client_id': 'clientId',
        'contractor_id': 'contractorId',
        'contractor_location': 'contractorLocation',
        'contractor_name': 'contractorName',
        'data': 'data',
        'declared_area': 'declaredArea',
        'deleted': 'deleted',
        'device_token': 'deviceToken',
        'device_type': 'deviceType',
        'email': 'email',
        'farmer_code': 'farmerCode',
        'first_name': 'firstName',
        'gender': 'gender',
        'id': 'id',
        'images': 'images',
        'is_acre_square_enabled': 'isAcreSquareEnabled',
        'last_name': 'lastName',
        'status': 'status'
    }

    def __init__(self, address=None, assigned_to=None, client_id=None, contractor_id=None, contractor_location=None, contractor_name=None, data=None, declared_area=None, deleted=None, device_token=None, device_type=None, email=None, farmer_code=None, first_name=None, gender=None, id=None, images=None, is_acre_square_enabled=None, last_name=None, status=None):  # noqa: E501
        """FarmerDto - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._assigned_to = None
        self._client_id = None
        self._contractor_id = None
        self._contractor_location = None
        self._contractor_name = None
        self._data = None
        self._declared_area = None
        self._deleted = None
        self._device_token = None
        self._device_type = None
        self._email = None
        self._farmer_code = None
        self._first_name = None
        self._gender = None
        self._id = None
        self._images = None
        self._is_acre_square_enabled = None
        self._last_name = None
        self._status = None
        self.discriminator = None
        self.address = address
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if client_id is not None:
            self.client_id = client_id
        if contractor_id is not None:
            self.contractor_id = contractor_id
        if contractor_location is not None:
            self.contractor_location = contractor_location
        if contractor_name is not None:
            self.contractor_name = contractor_name
        if data is not None:
            self.data = data
        if declared_area is not None:
            self.declared_area = declared_area
        if deleted is not None:
            self.deleted = deleted
        if device_token is not None:
            self.device_token = device_token
        if device_type is not None:
            self.device_type = device_type
        if email is not None:
            self.email = email
        if farmer_code is not None:
            self.farmer_code = farmer_code
        self.first_name = first_name
        if gender is not None:
            self.gender = gender
        if id is not None:
            self.id = id
        if images is not None:
            self.images = images
        if is_acre_square_enabled is not None:
            self.is_acre_square_enabled = is_acre_square_enabled
        if last_name is not None:
            self.last_name = last_name
        if status is not None:
            self.status = status

    @property
    def address(self):
        """Gets the address of this FarmerDto.  # noqa: E501


        :return: The address of this FarmerDto.  # noqa: E501
        :rtype: AddressDto
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this FarmerDto.


        :param address: The address of this FarmerDto.  # noqa: E501
        :type: AddressDto
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def assigned_to(self):
        """Gets the assigned_to of this FarmerDto.  # noqa: E501


        :return: The assigned_to of this FarmerDto.  # noqa: E501
        :rtype: list[UserDto]
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this FarmerDto.


        :param assigned_to: The assigned_to of this FarmerDto.  # noqa: E501
        :type: list[UserDto]
        """

        self._assigned_to = assigned_to

    @property
    def client_id(self):
        """Gets the client_id of this FarmerDto.  # noqa: E501


        :return: The client_id of this FarmerDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this FarmerDto.


        :param client_id: The client_id of this FarmerDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def contractor_id(self):
        """Gets the contractor_id of this FarmerDto.  # noqa: E501


        :return: The contractor_id of this FarmerDto.  # noqa: E501
        :rtype: int
        """
        return self._contractor_id

    @contractor_id.setter
    def contractor_id(self, contractor_id):
        """Sets the contractor_id of this FarmerDto.


        :param contractor_id: The contractor_id of this FarmerDto.  # noqa: E501
        :type: int
        """

        self._contractor_id = contractor_id

    @property
    def contractor_location(self):
        """Gets the contractor_location of this FarmerDto.  # noqa: E501


        :return: The contractor_location of this FarmerDto.  # noqa: E501
        :rtype: str
        """
        return self._contractor_location

    @contractor_location.setter
    def contractor_location(self, contractor_location):
        """Sets the contractor_location of this FarmerDto.


        :param contractor_location: The contractor_location of this FarmerDto.  # noqa: E501
        :type: str
        """

        self._contractor_location = contractor_location

    @property
    def contractor_name(self):
        """Gets the contractor_name of this FarmerDto.  # noqa: E501


        :return: The contractor_name of this FarmerDto.  # noqa: E501
        :rtype: str
        """
        return self._contractor_name

    @contractor_name.setter
    def contractor_name(self, contractor_name):
        """Sets the contractor_name of this FarmerDto.


        :param contractor_name: The contractor_name of this FarmerDto.  # noqa: E501
        :type: str
        """

        self._contractor_name = contractor_name

    @property
    def data(self):
        """Gets the data of this FarmerDto.  # noqa: E501


        :return: The data of this FarmerDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this FarmerDto.


        :param data: The data of this FarmerDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def declared_area(self):
        """Gets the declared_area of this FarmerDto.  # noqa: E501


        :return: The declared_area of this FarmerDto.  # noqa: E501
        :rtype: Area
        """
        return self._declared_area

    @declared_area.setter
    def declared_area(self, declared_area):
        """Sets the declared_area of this FarmerDto.


        :param declared_area: The declared_area of this FarmerDto.  # noqa: E501
        :type: Area
        """

        self._declared_area = declared_area

    @property
    def deleted(self):
        """Gets the deleted of this FarmerDto.  # noqa: E501


        :return: The deleted of this FarmerDto.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this FarmerDto.


        :param deleted: The deleted of this FarmerDto.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def device_token(self):
        """Gets the device_token of this FarmerDto.  # noqa: E501


        :return: The device_token of this FarmerDto.  # noqa: E501
        :rtype: str
        """
        return self._device_token

    @device_token.setter
    def device_token(self, device_token):
        """Sets the device_token of this FarmerDto.


        :param device_token: The device_token of this FarmerDto.  # noqa: E501
        :type: str
        """

        self._device_token = device_token

    @property
    def device_type(self):
        """Gets the device_type of this FarmerDto.  # noqa: E501


        :return: The device_type of this FarmerDto.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this FarmerDto.


        :param device_type: The device_type of this FarmerDto.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def email(self):
        """Gets the email of this FarmerDto.  # noqa: E501


        :return: The email of this FarmerDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this FarmerDto.


        :param email: The email of this FarmerDto.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def farmer_code(self):
        """Gets the farmer_code of this FarmerDto.  # noqa: E501


        :return: The farmer_code of this FarmerDto.  # noqa: E501
        :rtype: str
        """
        return self._farmer_code

    @farmer_code.setter
    def farmer_code(self, farmer_code):
        """Sets the farmer_code of this FarmerDto.


        :param farmer_code: The farmer_code of this FarmerDto.  # noqa: E501
        :type: str
        """

        self._farmer_code = farmer_code

    @property
    def first_name(self):
        """Gets the first_name of this FarmerDto.  # noqa: E501


        :return: The first_name of this FarmerDto.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this FarmerDto.


        :param first_name: The first_name of this FarmerDto.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this FarmerDto.  # noqa: E501


        :return: The gender of this FarmerDto.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this FarmerDto.


        :param gender: The gender of this FarmerDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["MALE", "FEMALE", "OTHER"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def id(self):
        """Gets the id of this FarmerDto.  # noqa: E501


        :return: The id of this FarmerDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FarmerDto.


        :param id: The id of this FarmerDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this FarmerDto.  # noqa: E501


        :return: The images of this FarmerDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this FarmerDto.


        :param images: The images of this FarmerDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._images = images

    @property
    def is_acre_square_enabled(self):
        """Gets the is_acre_square_enabled of this FarmerDto.  # noqa: E501


        :return: The is_acre_square_enabled of this FarmerDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_acre_square_enabled

    @is_acre_square_enabled.setter
    def is_acre_square_enabled(self, is_acre_square_enabled):
        """Sets the is_acre_square_enabled of this FarmerDto.


        :param is_acre_square_enabled: The is_acre_square_enabled of this FarmerDto.  # noqa: E501
        :type: bool
        """

        self._is_acre_square_enabled = is_acre_square_enabled

    @property
    def last_name(self):
        """Gets the last_name of this FarmerDto.  # noqa: E501


        :return: The last_name of this FarmerDto.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this FarmerDto.


        :param last_name: The last_name of this FarmerDto.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def status(self):
        """Gets the status of this FarmerDto.  # noqa: E501


        :return: The status of this FarmerDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FarmerDto.


        :param status: The status of this FarmerDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "TRIAL", "DEMO", "DISABLE", "DELETE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FarmerDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FarmerDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
