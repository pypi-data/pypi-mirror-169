# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BatchReportsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_number': 'str',
        'crop_variety': 'str',
        'farmers': 'int',
        'no_of_sku': 'int',
        'plots': 'int',
        'sku_type': 'str',
        'total_area': 'int',
        'total_quantity': 'str',
        'vehicle_number': 'str'
    }

    attribute_map = {
        'batch_number': 'batch_number',
        'crop_variety': 'crop_variety',
        'farmers': 'farmers',
        'no_of_sku': 'no_of_sku',
        'plots': 'plots',
        'sku_type': 'sku_type',
        'total_area': 'total_area',
        'total_quantity': 'total_quantity',
        'vehicle_number': 'vehicle_number'
    }

    def __init__(self, batch_number=None, crop_variety=None, farmers=None, no_of_sku=None, plots=None, sku_type=None, total_area=None, total_quantity=None, vehicle_number=None):  # noqa: E501
        """BatchReportsDto - a model defined in Swagger"""  # noqa: E501
        self._batch_number = None
        self._crop_variety = None
        self._farmers = None
        self._no_of_sku = None
        self._plots = None
        self._sku_type = None
        self._total_area = None
        self._total_quantity = None
        self._vehicle_number = None
        self.discriminator = None
        if batch_number is not None:
            self.batch_number = batch_number
        if crop_variety is not None:
            self.crop_variety = crop_variety
        if farmers is not None:
            self.farmers = farmers
        if no_of_sku is not None:
            self.no_of_sku = no_of_sku
        if plots is not None:
            self.plots = plots
        if sku_type is not None:
            self.sku_type = sku_type
        if total_area is not None:
            self.total_area = total_area
        if total_quantity is not None:
            self.total_quantity = total_quantity
        if vehicle_number is not None:
            self.vehicle_number = vehicle_number

    @property
    def batch_number(self):
        """Gets the batch_number of this BatchReportsDto.  # noqa: E501


        :return: The batch_number of this BatchReportsDto.  # noqa: E501
        :rtype: str
        """
        return self._batch_number

    @batch_number.setter
    def batch_number(self, batch_number):
        """Sets the batch_number of this BatchReportsDto.


        :param batch_number: The batch_number of this BatchReportsDto.  # noqa: E501
        :type: str
        """

        self._batch_number = batch_number

    @property
    def crop_variety(self):
        """Gets the crop_variety of this BatchReportsDto.  # noqa: E501


        :return: The crop_variety of this BatchReportsDto.  # noqa: E501
        :rtype: str
        """
        return self._crop_variety

    @crop_variety.setter
    def crop_variety(self, crop_variety):
        """Sets the crop_variety of this BatchReportsDto.


        :param crop_variety: The crop_variety of this BatchReportsDto.  # noqa: E501
        :type: str
        """

        self._crop_variety = crop_variety

    @property
    def farmers(self):
        """Gets the farmers of this BatchReportsDto.  # noqa: E501


        :return: The farmers of this BatchReportsDto.  # noqa: E501
        :rtype: int
        """
        return self._farmers

    @farmers.setter
    def farmers(self, farmers):
        """Sets the farmers of this BatchReportsDto.


        :param farmers: The farmers of this BatchReportsDto.  # noqa: E501
        :type: int
        """

        self._farmers = farmers

    @property
    def no_of_sku(self):
        """Gets the no_of_sku of this BatchReportsDto.  # noqa: E501


        :return: The no_of_sku of this BatchReportsDto.  # noqa: E501
        :rtype: int
        """
        return self._no_of_sku

    @no_of_sku.setter
    def no_of_sku(self, no_of_sku):
        """Sets the no_of_sku of this BatchReportsDto.


        :param no_of_sku: The no_of_sku of this BatchReportsDto.  # noqa: E501
        :type: int
        """

        self._no_of_sku = no_of_sku

    @property
    def plots(self):
        """Gets the plots of this BatchReportsDto.  # noqa: E501


        :return: The plots of this BatchReportsDto.  # noqa: E501
        :rtype: int
        """
        return self._plots

    @plots.setter
    def plots(self, plots):
        """Sets the plots of this BatchReportsDto.


        :param plots: The plots of this BatchReportsDto.  # noqa: E501
        :type: int
        """

        self._plots = plots

    @property
    def sku_type(self):
        """Gets the sku_type of this BatchReportsDto.  # noqa: E501


        :return: The sku_type of this BatchReportsDto.  # noqa: E501
        :rtype: str
        """
        return self._sku_type

    @sku_type.setter
    def sku_type(self, sku_type):
        """Sets the sku_type of this BatchReportsDto.


        :param sku_type: The sku_type of this BatchReportsDto.  # noqa: E501
        :type: str
        """

        self._sku_type = sku_type

    @property
    def total_area(self):
        """Gets the total_area of this BatchReportsDto.  # noqa: E501


        :return: The total_area of this BatchReportsDto.  # noqa: E501
        :rtype: int
        """
        return self._total_area

    @total_area.setter
    def total_area(self, total_area):
        """Sets the total_area of this BatchReportsDto.


        :param total_area: The total_area of this BatchReportsDto.  # noqa: E501
        :type: int
        """

        self._total_area = total_area

    @property
    def total_quantity(self):
        """Gets the total_quantity of this BatchReportsDto.  # noqa: E501


        :return: The total_quantity of this BatchReportsDto.  # noqa: E501
        :rtype: str
        """
        return self._total_quantity

    @total_quantity.setter
    def total_quantity(self, total_quantity):
        """Sets the total_quantity of this BatchReportsDto.


        :param total_quantity: The total_quantity of this BatchReportsDto.  # noqa: E501
        :type: str
        """

        self._total_quantity = total_quantity

    @property
    def vehicle_number(self):
        """Gets the vehicle_number of this BatchReportsDto.  # noqa: E501


        :return: The vehicle_number of this BatchReportsDto.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_number

    @vehicle_number.setter
    def vehicle_number(self, vehicle_number):
        """Sets the vehicle_number of this BatchReportsDto.


        :param vehicle_number: The vehicle_number of this BatchReportsDto.  # noqa: E501
        :type: str
        """

        self._vehicle_number = vehicle_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchReportsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchReportsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
