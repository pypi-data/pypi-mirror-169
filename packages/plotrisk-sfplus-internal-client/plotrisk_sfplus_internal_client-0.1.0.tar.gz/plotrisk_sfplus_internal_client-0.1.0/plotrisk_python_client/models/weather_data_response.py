# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WeatherDataResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boundary_id': 'str',
        'created_date_time': 'datetime',
        '_date': 'datetime',
        'external_id': 'str',
        'gdd': 'Gdd',
        'id': 'str',
        'modified_date_time': 'datetime',
        'org_id': 'str',
        'plot_name': 'str',
        'properties': 'object',
        'status': 'str',
        'tenant_type': 'str',
        'weather': 'Weather'
    }

    attribute_map = {
        'boundary_id': 'boundaryId',
        'created_date_time': 'createdDateTime',
        '_date': 'date',
        'external_id': 'externalId',
        'gdd': 'gdd',
        'id': 'id',
        'modified_date_time': 'modifiedDateTime',
        'org_id': 'orgId',
        'plot_name': 'plotName',
        'properties': 'properties',
        'status': 'status',
        'tenant_type': 'tenantType',
        'weather': 'weather'
    }

    def __init__(self, boundary_id=None, created_date_time=None, _date=None, external_id=None, gdd=None, id=None, modified_date_time=None, org_id=None, plot_name=None, properties=None, status=None, tenant_type=None, weather=None):  # noqa: E501
        """WeatherDataResponse - a model defined in Swagger"""  # noqa: E501
        self._boundary_id = None
        self._created_date_time = None
        self.__date = None
        self._external_id = None
        self._gdd = None
        self._id = None
        self._modified_date_time = None
        self._org_id = None
        self._plot_name = None
        self._properties = None
        self._status = None
        self._tenant_type = None
        self._weather = None
        self.discriminator = None
        if boundary_id is not None:
            self.boundary_id = boundary_id
        if created_date_time is not None:
            self.created_date_time = created_date_time
        if _date is not None:
            self._date = _date
        if external_id is not None:
            self.external_id = external_id
        if gdd is not None:
            self.gdd = gdd
        if id is not None:
            self.id = id
        if modified_date_time is not None:
            self.modified_date_time = modified_date_time
        if org_id is not None:
            self.org_id = org_id
        if plot_name is not None:
            self.plot_name = plot_name
        if properties is not None:
            self.properties = properties
        if status is not None:
            self.status = status
        if tenant_type is not None:
            self.tenant_type = tenant_type
        if weather is not None:
            self.weather = weather

    @property
    def boundary_id(self):
        """Gets the boundary_id of this WeatherDataResponse.  # noqa: E501


        :return: The boundary_id of this WeatherDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._boundary_id

    @boundary_id.setter
    def boundary_id(self, boundary_id):
        """Sets the boundary_id of this WeatherDataResponse.


        :param boundary_id: The boundary_id of this WeatherDataResponse.  # noqa: E501
        :type: str
        """

        self._boundary_id = boundary_id

    @property
    def created_date_time(self):
        """Gets the created_date_time of this WeatherDataResponse.  # noqa: E501


        :return: The created_date_time of this WeatherDataResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this WeatherDataResponse.


        :param created_date_time: The created_date_time of this WeatherDataResponse.  # noqa: E501
        :type: datetime
        """

        self._created_date_time = created_date_time

    @property
    def _date(self):
        """Gets the _date of this WeatherDataResponse.  # noqa: E501


        :return: The _date of this WeatherDataResponse.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this WeatherDataResponse.


        :param _date: The _date of this WeatherDataResponse.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def external_id(self):
        """Gets the external_id of this WeatherDataResponse.  # noqa: E501


        :return: The external_id of this WeatherDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this WeatherDataResponse.


        :param external_id: The external_id of this WeatherDataResponse.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def gdd(self):
        """Gets the gdd of this WeatherDataResponse.  # noqa: E501


        :return: The gdd of this WeatherDataResponse.  # noqa: E501
        :rtype: Gdd
        """
        return self._gdd

    @gdd.setter
    def gdd(self, gdd):
        """Sets the gdd of this WeatherDataResponse.


        :param gdd: The gdd of this WeatherDataResponse.  # noqa: E501
        :type: Gdd
        """

        self._gdd = gdd

    @property
    def id(self):
        """Gets the id of this WeatherDataResponse.  # noqa: E501


        :return: The id of this WeatherDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WeatherDataResponse.


        :param id: The id of this WeatherDataResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def modified_date_time(self):
        """Gets the modified_date_time of this WeatherDataResponse.  # noqa: E501


        :return: The modified_date_time of this WeatherDataResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date_time

    @modified_date_time.setter
    def modified_date_time(self, modified_date_time):
        """Sets the modified_date_time of this WeatherDataResponse.


        :param modified_date_time: The modified_date_time of this WeatherDataResponse.  # noqa: E501
        :type: datetime
        """

        self._modified_date_time = modified_date_time

    @property
    def org_id(self):
        """Gets the org_id of this WeatherDataResponse.  # noqa: E501


        :return: The org_id of this WeatherDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this WeatherDataResponse.


        :param org_id: The org_id of this WeatherDataResponse.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def plot_name(self):
        """Gets the plot_name of this WeatherDataResponse.  # noqa: E501


        :return: The plot_name of this WeatherDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._plot_name

    @plot_name.setter
    def plot_name(self, plot_name):
        """Sets the plot_name of this WeatherDataResponse.


        :param plot_name: The plot_name of this WeatherDataResponse.  # noqa: E501
        :type: str
        """

        self._plot_name = plot_name

    @property
    def properties(self):
        """Gets the properties of this WeatherDataResponse.  # noqa: E501


        :return: The properties of this WeatherDataResponse.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this WeatherDataResponse.


        :param properties: The properties of this WeatherDataResponse.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def status(self):
        """Gets the status of this WeatherDataResponse.  # noqa: E501


        :return: The status of this WeatherDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WeatherDataResponse.


        :param status: The status of this WeatherDataResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tenant_type(self):
        """Gets the tenant_type of this WeatherDataResponse.  # noqa: E501


        :return: The tenant_type of this WeatherDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._tenant_type

    @tenant_type.setter
    def tenant_type(self, tenant_type):
        """Sets the tenant_type of this WeatherDataResponse.


        :param tenant_type: The tenant_type of this WeatherDataResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["SMARTFARM", "SMARTFARM_PLUS", "SMARTRISK", "API_USER", "SF_PLUS_API"]  # noqa: E501
        if tenant_type not in allowed_values:
            raise ValueError(
                "Invalid value for `tenant_type` ({0}), must be one of {1}"  # noqa: E501
                .format(tenant_type, allowed_values)
            )

        self._tenant_type = tenant_type

    @property
    def weather(self):
        """Gets the weather of this WeatherDataResponse.  # noqa: E501


        :return: The weather of this WeatherDataResponse.  # noqa: E501
        :rtype: Weather
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """Sets the weather of this WeatherDataResponse.


        :param weather: The weather of this WeatherDataResponse.  # noqa: E501
        :type: Weather
        """

        self._weather = weather

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WeatherDataResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WeatherDataResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
