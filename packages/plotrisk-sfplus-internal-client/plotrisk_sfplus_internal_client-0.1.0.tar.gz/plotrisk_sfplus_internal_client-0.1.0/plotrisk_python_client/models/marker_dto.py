# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MarkerDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_name': 'str',
        'farmer_name': 'str',
        'id': 'int',
        'locations': 'LocationDto'
    }

    attribute_map = {
        'asset_name': 'assetName',
        'farmer_name': 'farmerName',
        'id': 'id',
        'locations': 'locations'
    }

    def __init__(self, asset_name=None, farmer_name=None, id=None, locations=None):  # noqa: E501
        """MarkerDto - a model defined in Swagger"""  # noqa: E501
        self._asset_name = None
        self._farmer_name = None
        self._id = None
        self._locations = None
        self.discriminator = None
        if asset_name is not None:
            self.asset_name = asset_name
        if farmer_name is not None:
            self.farmer_name = farmer_name
        if id is not None:
            self.id = id
        if locations is not None:
            self.locations = locations

    @property
    def asset_name(self):
        """Gets the asset_name of this MarkerDto.  # noqa: E501


        :return: The asset_name of this MarkerDto.  # noqa: E501
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this MarkerDto.


        :param asset_name: The asset_name of this MarkerDto.  # noqa: E501
        :type: str
        """

        self._asset_name = asset_name

    @property
    def farmer_name(self):
        """Gets the farmer_name of this MarkerDto.  # noqa: E501


        :return: The farmer_name of this MarkerDto.  # noqa: E501
        :rtype: str
        """
        return self._farmer_name

    @farmer_name.setter
    def farmer_name(self, farmer_name):
        """Sets the farmer_name of this MarkerDto.


        :param farmer_name: The farmer_name of this MarkerDto.  # noqa: E501
        :type: str
        """

        self._farmer_name = farmer_name

    @property
    def id(self):
        """Gets the id of this MarkerDto.  # noqa: E501


        :return: The id of this MarkerDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MarkerDto.


        :param id: The id of this MarkerDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def locations(self):
        """Gets the locations of this MarkerDto.  # noqa: E501


        :return: The locations of this MarkerDto.  # noqa: E501
        :rtype: LocationDto
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this MarkerDto.


        :param locations: The locations of this MarkerDto.  # noqa: E501
        :type: LocationDto
        """

        self._locations = locations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarkerDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarkerDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
