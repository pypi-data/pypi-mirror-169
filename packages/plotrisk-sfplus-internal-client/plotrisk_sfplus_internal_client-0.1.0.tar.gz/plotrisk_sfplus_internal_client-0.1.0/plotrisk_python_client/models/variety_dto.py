# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VarietyDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_archive_plot_days': 'int',
        'auto_archive_plot_flag': 'bool',
        'client_id': 'str',
        'crop_id': 'int',
        'crop_name': 'str',
        'crop_stages': 'list[VarietyCropStageDto]',
        'data': 'dict(str, object)',
        'days_for_pre_harvest_sampling': 'int',
        'deleted': 'bool',
        'description': 'str',
        'expected_harvest_days': 'int',
        'expected_quantity_per_acre': 'float',
        'harvest_grades': 'list[HarvestGradeDto]',
        'harvest_unit_id': 'int',
        'id': 'int',
        'name': 'str',
        'nick_name': 'str',
        'parent_id': 'int',
        'preferred_sku_type_id': 'int',
        'process_standard_deduction': 'float',
        'rejection_percentage': 'float',
        'seed_grades': 'list[SeedGradeDto]',
        'sr_crop_code': 'str',
        'sr_crop_id': 'int',
        'strip_test_flag': 'bool'
    }

    attribute_map = {
        'auto_archive_plot_days': 'autoArchivePlotDays',
        'auto_archive_plot_flag': 'autoArchivePlotFlag',
        'client_id': 'clientId',
        'crop_id': 'cropId',
        'crop_name': 'cropName',
        'crop_stages': 'cropStages',
        'data': 'data',
        'days_for_pre_harvest_sampling': 'daysForPreHarvestSampling',
        'deleted': 'deleted',
        'description': 'description',
        'expected_harvest_days': 'expectedHarvestDays',
        'expected_quantity_per_acre': 'expectedQuantityPerAcre',
        'harvest_grades': 'harvestGrades',
        'harvest_unit_id': 'harvestUnitId',
        'id': 'id',
        'name': 'name',
        'nick_name': 'nickName',
        'parent_id': 'parentId',
        'preferred_sku_type_id': 'preferredSKUTypeId',
        'process_standard_deduction': 'processStandardDeduction',
        'rejection_percentage': 'rejectionPercentage',
        'seed_grades': 'seedGrades',
        'sr_crop_code': 'srCropCode',
        'sr_crop_id': 'srCropId',
        'strip_test_flag': 'stripTestFlag'
    }

    def __init__(self, auto_archive_plot_days=None, auto_archive_plot_flag=None, client_id=None, crop_id=None, crop_name=None, crop_stages=None, data=None, days_for_pre_harvest_sampling=None, deleted=None, description=None, expected_harvest_days=None, expected_quantity_per_acre=None, harvest_grades=None, harvest_unit_id=None, id=None, name=None, nick_name=None, parent_id=None, preferred_sku_type_id=None, process_standard_deduction=None, rejection_percentage=None, seed_grades=None, sr_crop_code=None, sr_crop_id=None, strip_test_flag=None):  # noqa: E501
        """VarietyDto - a model defined in Swagger"""  # noqa: E501
        self._auto_archive_plot_days = None
        self._auto_archive_plot_flag = None
        self._client_id = None
        self._crop_id = None
        self._crop_name = None
        self._crop_stages = None
        self._data = None
        self._days_for_pre_harvest_sampling = None
        self._deleted = None
        self._description = None
        self._expected_harvest_days = None
        self._expected_quantity_per_acre = None
        self._harvest_grades = None
        self._harvest_unit_id = None
        self._id = None
        self._name = None
        self._nick_name = None
        self._parent_id = None
        self._preferred_sku_type_id = None
        self._process_standard_deduction = None
        self._rejection_percentage = None
        self._seed_grades = None
        self._sr_crop_code = None
        self._sr_crop_id = None
        self._strip_test_flag = None
        self.discriminator = None
        if auto_archive_plot_days is not None:
            self.auto_archive_plot_days = auto_archive_plot_days
        if auto_archive_plot_flag is not None:
            self.auto_archive_plot_flag = auto_archive_plot_flag
        if client_id is not None:
            self.client_id = client_id
        self.crop_id = crop_id
        if crop_name is not None:
            self.crop_name = crop_name
        if crop_stages is not None:
            self.crop_stages = crop_stages
        if data is not None:
            self.data = data
        if days_for_pre_harvest_sampling is not None:
            self.days_for_pre_harvest_sampling = days_for_pre_harvest_sampling
        if deleted is not None:
            self.deleted = deleted
        if description is not None:
            self.description = description
        if expected_harvest_days is not None:
            self.expected_harvest_days = expected_harvest_days
        if expected_quantity_per_acre is not None:
            self.expected_quantity_per_acre = expected_quantity_per_acre
        if harvest_grades is not None:
            self.harvest_grades = harvest_grades
        if harvest_unit_id is not None:
            self.harvest_unit_id = harvest_unit_id
        if id is not None:
            self.id = id
        self.name = name
        if nick_name is not None:
            self.nick_name = nick_name
        if parent_id is not None:
            self.parent_id = parent_id
        if preferred_sku_type_id is not None:
            self.preferred_sku_type_id = preferred_sku_type_id
        if process_standard_deduction is not None:
            self.process_standard_deduction = process_standard_deduction
        if rejection_percentage is not None:
            self.rejection_percentage = rejection_percentage
        if seed_grades is not None:
            self.seed_grades = seed_grades
        if sr_crop_code is not None:
            self.sr_crop_code = sr_crop_code
        if sr_crop_id is not None:
            self.sr_crop_id = sr_crop_id
        if strip_test_flag is not None:
            self.strip_test_flag = strip_test_flag

    @property
    def auto_archive_plot_days(self):
        """Gets the auto_archive_plot_days of this VarietyDto.  # noqa: E501


        :return: The auto_archive_plot_days of this VarietyDto.  # noqa: E501
        :rtype: int
        """
        return self._auto_archive_plot_days

    @auto_archive_plot_days.setter
    def auto_archive_plot_days(self, auto_archive_plot_days):
        """Sets the auto_archive_plot_days of this VarietyDto.


        :param auto_archive_plot_days: The auto_archive_plot_days of this VarietyDto.  # noqa: E501
        :type: int
        """

        self._auto_archive_plot_days = auto_archive_plot_days

    @property
    def auto_archive_plot_flag(self):
        """Gets the auto_archive_plot_flag of this VarietyDto.  # noqa: E501


        :return: The auto_archive_plot_flag of this VarietyDto.  # noqa: E501
        :rtype: bool
        """
        return self._auto_archive_plot_flag

    @auto_archive_plot_flag.setter
    def auto_archive_plot_flag(self, auto_archive_plot_flag):
        """Sets the auto_archive_plot_flag of this VarietyDto.


        :param auto_archive_plot_flag: The auto_archive_plot_flag of this VarietyDto.  # noqa: E501
        :type: bool
        """

        self._auto_archive_plot_flag = auto_archive_plot_flag

    @property
    def client_id(self):
        """Gets the client_id of this VarietyDto.  # noqa: E501


        :return: The client_id of this VarietyDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this VarietyDto.


        :param client_id: The client_id of this VarietyDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def crop_id(self):
        """Gets the crop_id of this VarietyDto.  # noqa: E501


        :return: The crop_id of this VarietyDto.  # noqa: E501
        :rtype: int
        """
        return self._crop_id

    @crop_id.setter
    def crop_id(self, crop_id):
        """Sets the crop_id of this VarietyDto.


        :param crop_id: The crop_id of this VarietyDto.  # noqa: E501
        :type: int
        """
        if crop_id is None:
            raise ValueError("Invalid value for `crop_id`, must not be `None`")  # noqa: E501

        self._crop_id = crop_id

    @property
    def crop_name(self):
        """Gets the crop_name of this VarietyDto.  # noqa: E501


        :return: The crop_name of this VarietyDto.  # noqa: E501
        :rtype: str
        """
        return self._crop_name

    @crop_name.setter
    def crop_name(self, crop_name):
        """Sets the crop_name of this VarietyDto.


        :param crop_name: The crop_name of this VarietyDto.  # noqa: E501
        :type: str
        """

        self._crop_name = crop_name

    @property
    def crop_stages(self):
        """Gets the crop_stages of this VarietyDto.  # noqa: E501


        :return: The crop_stages of this VarietyDto.  # noqa: E501
        :rtype: list[VarietyCropStageDto]
        """
        return self._crop_stages

    @crop_stages.setter
    def crop_stages(self, crop_stages):
        """Sets the crop_stages of this VarietyDto.


        :param crop_stages: The crop_stages of this VarietyDto.  # noqa: E501
        :type: list[VarietyCropStageDto]
        """

        self._crop_stages = crop_stages

    @property
    def data(self):
        """Gets the data of this VarietyDto.  # noqa: E501


        :return: The data of this VarietyDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this VarietyDto.


        :param data: The data of this VarietyDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def days_for_pre_harvest_sampling(self):
        """Gets the days_for_pre_harvest_sampling of this VarietyDto.  # noqa: E501


        :return: The days_for_pre_harvest_sampling of this VarietyDto.  # noqa: E501
        :rtype: int
        """
        return self._days_for_pre_harvest_sampling

    @days_for_pre_harvest_sampling.setter
    def days_for_pre_harvest_sampling(self, days_for_pre_harvest_sampling):
        """Sets the days_for_pre_harvest_sampling of this VarietyDto.


        :param days_for_pre_harvest_sampling: The days_for_pre_harvest_sampling of this VarietyDto.  # noqa: E501
        :type: int
        """

        self._days_for_pre_harvest_sampling = days_for_pre_harvest_sampling

    @property
    def deleted(self):
        """Gets the deleted of this VarietyDto.  # noqa: E501


        :return: The deleted of this VarietyDto.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this VarietyDto.


        :param deleted: The deleted of this VarietyDto.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this VarietyDto.  # noqa: E501


        :return: The description of this VarietyDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VarietyDto.


        :param description: The description of this VarietyDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def expected_harvest_days(self):
        """Gets the expected_harvest_days of this VarietyDto.  # noqa: E501


        :return: The expected_harvest_days of this VarietyDto.  # noqa: E501
        :rtype: int
        """
        return self._expected_harvest_days

    @expected_harvest_days.setter
    def expected_harvest_days(self, expected_harvest_days):
        """Sets the expected_harvest_days of this VarietyDto.


        :param expected_harvest_days: The expected_harvest_days of this VarietyDto.  # noqa: E501
        :type: int
        """

        self._expected_harvest_days = expected_harvest_days

    @property
    def expected_quantity_per_acre(self):
        """Gets the expected_quantity_per_acre of this VarietyDto.  # noqa: E501


        :return: The expected_quantity_per_acre of this VarietyDto.  # noqa: E501
        :rtype: float
        """
        return self._expected_quantity_per_acre

    @expected_quantity_per_acre.setter
    def expected_quantity_per_acre(self, expected_quantity_per_acre):
        """Sets the expected_quantity_per_acre of this VarietyDto.


        :param expected_quantity_per_acre: The expected_quantity_per_acre of this VarietyDto.  # noqa: E501
        :type: float
        """

        self._expected_quantity_per_acre = expected_quantity_per_acre

    @property
    def harvest_grades(self):
        """Gets the harvest_grades of this VarietyDto.  # noqa: E501


        :return: The harvest_grades of this VarietyDto.  # noqa: E501
        :rtype: list[HarvestGradeDto]
        """
        return self._harvest_grades

    @harvest_grades.setter
    def harvest_grades(self, harvest_grades):
        """Sets the harvest_grades of this VarietyDto.


        :param harvest_grades: The harvest_grades of this VarietyDto.  # noqa: E501
        :type: list[HarvestGradeDto]
        """

        self._harvest_grades = harvest_grades

    @property
    def harvest_unit_id(self):
        """Gets the harvest_unit_id of this VarietyDto.  # noqa: E501


        :return: The harvest_unit_id of this VarietyDto.  # noqa: E501
        :rtype: int
        """
        return self._harvest_unit_id

    @harvest_unit_id.setter
    def harvest_unit_id(self, harvest_unit_id):
        """Sets the harvest_unit_id of this VarietyDto.


        :param harvest_unit_id: The harvest_unit_id of this VarietyDto.  # noqa: E501
        :type: int
        """

        self._harvest_unit_id = harvest_unit_id

    @property
    def id(self):
        """Gets the id of this VarietyDto.  # noqa: E501


        :return: The id of this VarietyDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VarietyDto.


        :param id: The id of this VarietyDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this VarietyDto.  # noqa: E501


        :return: The name of this VarietyDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VarietyDto.


        :param name: The name of this VarietyDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def nick_name(self):
        """Gets the nick_name of this VarietyDto.  # noqa: E501


        :return: The nick_name of this VarietyDto.  # noqa: E501
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this VarietyDto.


        :param nick_name: The nick_name of this VarietyDto.  # noqa: E501
        :type: str
        """

        self._nick_name = nick_name

    @property
    def parent_id(self):
        """Gets the parent_id of this VarietyDto.  # noqa: E501


        :return: The parent_id of this VarietyDto.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this VarietyDto.


        :param parent_id: The parent_id of this VarietyDto.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def preferred_sku_type_id(self):
        """Gets the preferred_sku_type_id of this VarietyDto.  # noqa: E501


        :return: The preferred_sku_type_id of this VarietyDto.  # noqa: E501
        :rtype: int
        """
        return self._preferred_sku_type_id

    @preferred_sku_type_id.setter
    def preferred_sku_type_id(self, preferred_sku_type_id):
        """Sets the preferred_sku_type_id of this VarietyDto.


        :param preferred_sku_type_id: The preferred_sku_type_id of this VarietyDto.  # noqa: E501
        :type: int
        """

        self._preferred_sku_type_id = preferred_sku_type_id

    @property
    def process_standard_deduction(self):
        """Gets the process_standard_deduction of this VarietyDto.  # noqa: E501


        :return: The process_standard_deduction of this VarietyDto.  # noqa: E501
        :rtype: float
        """
        return self._process_standard_deduction

    @process_standard_deduction.setter
    def process_standard_deduction(self, process_standard_deduction):
        """Sets the process_standard_deduction of this VarietyDto.


        :param process_standard_deduction: The process_standard_deduction of this VarietyDto.  # noqa: E501
        :type: float
        """

        self._process_standard_deduction = process_standard_deduction

    @property
    def rejection_percentage(self):
        """Gets the rejection_percentage of this VarietyDto.  # noqa: E501


        :return: The rejection_percentage of this VarietyDto.  # noqa: E501
        :rtype: float
        """
        return self._rejection_percentage

    @rejection_percentage.setter
    def rejection_percentage(self, rejection_percentage):
        """Sets the rejection_percentage of this VarietyDto.


        :param rejection_percentage: The rejection_percentage of this VarietyDto.  # noqa: E501
        :type: float
        """

        self._rejection_percentage = rejection_percentage

    @property
    def seed_grades(self):
        """Gets the seed_grades of this VarietyDto.  # noqa: E501


        :return: The seed_grades of this VarietyDto.  # noqa: E501
        :rtype: list[SeedGradeDto]
        """
        return self._seed_grades

    @seed_grades.setter
    def seed_grades(self, seed_grades):
        """Sets the seed_grades of this VarietyDto.


        :param seed_grades: The seed_grades of this VarietyDto.  # noqa: E501
        :type: list[SeedGradeDto]
        """

        self._seed_grades = seed_grades

    @property
    def sr_crop_code(self):
        """Gets the sr_crop_code of this VarietyDto.  # noqa: E501


        :return: The sr_crop_code of this VarietyDto.  # noqa: E501
        :rtype: str
        """
        return self._sr_crop_code

    @sr_crop_code.setter
    def sr_crop_code(self, sr_crop_code):
        """Sets the sr_crop_code of this VarietyDto.


        :param sr_crop_code: The sr_crop_code of this VarietyDto.  # noqa: E501
        :type: str
        """

        self._sr_crop_code = sr_crop_code

    @property
    def sr_crop_id(self):
        """Gets the sr_crop_id of this VarietyDto.  # noqa: E501


        :return: The sr_crop_id of this VarietyDto.  # noqa: E501
        :rtype: int
        """
        return self._sr_crop_id

    @sr_crop_id.setter
    def sr_crop_id(self, sr_crop_id):
        """Sets the sr_crop_id of this VarietyDto.


        :param sr_crop_id: The sr_crop_id of this VarietyDto.  # noqa: E501
        :type: int
        """

        self._sr_crop_id = sr_crop_id

    @property
    def strip_test_flag(self):
        """Gets the strip_test_flag of this VarietyDto.  # noqa: E501


        :return: The strip_test_flag of this VarietyDto.  # noqa: E501
        :rtype: bool
        """
        return self._strip_test_flag

    @strip_test_flag.setter
    def strip_test_flag(self, strip_test_flag):
        """Sets the strip_test_flag of this VarietyDto.


        :param strip_test_flag: The strip_test_flag of this VarietyDto.  # noqa: E501
        :type: bool
        """

        self._strip_test_flag = strip_test_flag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VarietyDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VarietyDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
