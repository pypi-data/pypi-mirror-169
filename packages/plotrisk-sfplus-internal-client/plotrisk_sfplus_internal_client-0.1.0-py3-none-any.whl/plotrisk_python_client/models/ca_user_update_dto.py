# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CaUserUpdateDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ca_user_dtos': 'list[CroppableAreaUserDto]',
        'croppable_area_ids': 'list[int]',
        'user_ids': 'list[int]',
        'validated_asset_filter_dto': 'ValidatedAssetFilterDto'
    }

    attribute_map = {
        'ca_user_dtos': 'caUserDtos',
        'croppable_area_ids': 'croppableAreaIds',
        'user_ids': 'userIds',
        'validated_asset_filter_dto': 'validatedAssetFilterDto'
    }

    def __init__(self, ca_user_dtos=None, croppable_area_ids=None, user_ids=None, validated_asset_filter_dto=None):  # noqa: E501
        """CaUserUpdateDto - a model defined in Swagger"""  # noqa: E501
        self._ca_user_dtos = None
        self._croppable_area_ids = None
        self._user_ids = None
        self._validated_asset_filter_dto = None
        self.discriminator = None
        if ca_user_dtos is not None:
            self.ca_user_dtos = ca_user_dtos
        if croppable_area_ids is not None:
            self.croppable_area_ids = croppable_area_ids
        if user_ids is not None:
            self.user_ids = user_ids
        if validated_asset_filter_dto is not None:
            self.validated_asset_filter_dto = validated_asset_filter_dto

    @property
    def ca_user_dtos(self):
        """Gets the ca_user_dtos of this CaUserUpdateDto.  # noqa: E501


        :return: The ca_user_dtos of this CaUserUpdateDto.  # noqa: E501
        :rtype: list[CroppableAreaUserDto]
        """
        return self._ca_user_dtos

    @ca_user_dtos.setter
    def ca_user_dtos(self, ca_user_dtos):
        """Sets the ca_user_dtos of this CaUserUpdateDto.


        :param ca_user_dtos: The ca_user_dtos of this CaUserUpdateDto.  # noqa: E501
        :type: list[CroppableAreaUserDto]
        """

        self._ca_user_dtos = ca_user_dtos

    @property
    def croppable_area_ids(self):
        """Gets the croppable_area_ids of this CaUserUpdateDto.  # noqa: E501


        :return: The croppable_area_ids of this CaUserUpdateDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._croppable_area_ids

    @croppable_area_ids.setter
    def croppable_area_ids(self, croppable_area_ids):
        """Sets the croppable_area_ids of this CaUserUpdateDto.


        :param croppable_area_ids: The croppable_area_ids of this CaUserUpdateDto.  # noqa: E501
        :type: list[int]
        """

        self._croppable_area_ids = croppable_area_ids

    @property
    def user_ids(self):
        """Gets the user_ids of this CaUserUpdateDto.  # noqa: E501


        :return: The user_ids of this CaUserUpdateDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this CaUserUpdateDto.


        :param user_ids: The user_ids of this CaUserUpdateDto.  # noqa: E501
        :type: list[int]
        """

        self._user_ids = user_ids

    @property
    def validated_asset_filter_dto(self):
        """Gets the validated_asset_filter_dto of this CaUserUpdateDto.  # noqa: E501


        :return: The validated_asset_filter_dto of this CaUserUpdateDto.  # noqa: E501
        :rtype: ValidatedAssetFilterDto
        """
        return self._validated_asset_filter_dto

    @validated_asset_filter_dto.setter
    def validated_asset_filter_dto(self, validated_asset_filter_dto):
        """Sets the validated_asset_filter_dto of this CaUserUpdateDto.


        :param validated_asset_filter_dto: The validated_asset_filter_dto of this CaUserUpdateDto.  # noqa: E501
        :type: ValidatedAssetFilterDto
        """

        self._validated_asset_filter_dto = validated_asset_filter_dto

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CaUserUpdateDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CaUserUpdateDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
