# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RootTraceDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'dict(str, object)',
        'id': 'int',
        'level1details': 'dict(str, object)',
        'level1status': 'bool',
        'level2details': 'dict(str, object)',
        'level2status': 'bool',
        'level3details': 'dict(str, object)',
        'level3status': 'bool',
        'name': 'str',
        'status': 'bool'
    }

    attribute_map = {
        'data': 'data',
        'id': 'id',
        'level1details': 'level1details',
        'level1status': 'level1status',
        'level2details': 'level2details',
        'level2status': 'level2status',
        'level3details': 'level3details',
        'level3status': 'level3status',
        'name': 'name',
        'status': 'status'
    }

    def __init__(self, data=None, id=None, level1details=None, level1status=None, level2details=None, level2status=None, level3details=None, level3status=None, name=None, status=None):  # noqa: E501
        """RootTraceDto - a model defined in Swagger"""  # noqa: E501
        self._data = None
        self._id = None
        self._level1details = None
        self._level1status = None
        self._level2details = None
        self._level2status = None
        self._level3details = None
        self._level3status = None
        self._name = None
        self._status = None
        self.discriminator = None
        if data is not None:
            self.data = data
        if id is not None:
            self.id = id
        if level1details is not None:
            self.level1details = level1details
        if level1status is not None:
            self.level1status = level1status
        if level2details is not None:
            self.level2details = level2details
        if level2status is not None:
            self.level2status = level2status
        if level3details is not None:
            self.level3details = level3details
        if level3status is not None:
            self.level3status = level3status
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status

    @property
    def data(self):
        """Gets the data of this RootTraceDto.  # noqa: E501


        :return: The data of this RootTraceDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RootTraceDto.


        :param data: The data of this RootTraceDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def id(self):
        """Gets the id of this RootTraceDto.  # noqa: E501


        :return: The id of this RootTraceDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RootTraceDto.


        :param id: The id of this RootTraceDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def level1details(self):
        """Gets the level1details of this RootTraceDto.  # noqa: E501


        :return: The level1details of this RootTraceDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._level1details

    @level1details.setter
    def level1details(self, level1details):
        """Sets the level1details of this RootTraceDto.


        :param level1details: The level1details of this RootTraceDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._level1details = level1details

    @property
    def level1status(self):
        """Gets the level1status of this RootTraceDto.  # noqa: E501


        :return: The level1status of this RootTraceDto.  # noqa: E501
        :rtype: bool
        """
        return self._level1status

    @level1status.setter
    def level1status(self, level1status):
        """Sets the level1status of this RootTraceDto.


        :param level1status: The level1status of this RootTraceDto.  # noqa: E501
        :type: bool
        """

        self._level1status = level1status

    @property
    def level2details(self):
        """Gets the level2details of this RootTraceDto.  # noqa: E501


        :return: The level2details of this RootTraceDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._level2details

    @level2details.setter
    def level2details(self, level2details):
        """Sets the level2details of this RootTraceDto.


        :param level2details: The level2details of this RootTraceDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._level2details = level2details

    @property
    def level2status(self):
        """Gets the level2status of this RootTraceDto.  # noqa: E501


        :return: The level2status of this RootTraceDto.  # noqa: E501
        :rtype: bool
        """
        return self._level2status

    @level2status.setter
    def level2status(self, level2status):
        """Sets the level2status of this RootTraceDto.


        :param level2status: The level2status of this RootTraceDto.  # noqa: E501
        :type: bool
        """

        self._level2status = level2status

    @property
    def level3details(self):
        """Gets the level3details of this RootTraceDto.  # noqa: E501


        :return: The level3details of this RootTraceDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._level3details

    @level3details.setter
    def level3details(self, level3details):
        """Sets the level3details of this RootTraceDto.


        :param level3details: The level3details of this RootTraceDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._level3details = level3details

    @property
    def level3status(self):
        """Gets the level3status of this RootTraceDto.  # noqa: E501


        :return: The level3status of this RootTraceDto.  # noqa: E501
        :rtype: bool
        """
        return self._level3status

    @level3status.setter
    def level3status(self, level3status):
        """Sets the level3status of this RootTraceDto.


        :param level3status: The level3status of this RootTraceDto.  # noqa: E501
        :type: bool
        """

        self._level3status = level3status

    @property
    def name(self):
        """Gets the name of this RootTraceDto.  # noqa: E501


        :return: The name of this RootTraceDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RootTraceDto.


        :param name: The name of this RootTraceDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this RootTraceDto.  # noqa: E501


        :return: The status of this RootTraceDto.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RootTraceDto.


        :param status: The status of this RootTraceDto.  # noqa: E501
        :type: bool
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RootTraceDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RootTraceDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
