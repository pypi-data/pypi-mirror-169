# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'company_status': 'str',
        'data': 'dict(str, object)',
        'execution_status': 'str',
        'expected_end_date': 'str',
        'expected_start_date': 'str',
        'id': 'int',
        'locations': 'list[LocationDto]',
        'name': 'str',
        'official_end_date': 'str',
        'official_start_date': 'str',
        'project_status': 'str'
    }

    attribute_map = {
        'client_id': 'clientId',
        'company_status': 'companyStatus',
        'data': 'data',
        'execution_status': 'executionStatus',
        'expected_end_date': 'expectedEndDate',
        'expected_start_date': 'expectedStartDate',
        'id': 'id',
        'locations': 'locations',
        'name': 'name',
        'official_end_date': 'officialEndDate',
        'official_start_date': 'officialStartDate',
        'project_status': 'projectStatus'
    }

    def __init__(self, client_id=None, company_status=None, data=None, execution_status=None, expected_end_date=None, expected_start_date=None, id=None, locations=None, name=None, official_end_date=None, official_start_date=None, project_status=None):  # noqa: E501
        """ProjectDto - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._company_status = None
        self._data = None
        self._execution_status = None
        self._expected_end_date = None
        self._expected_start_date = None
        self._id = None
        self._locations = None
        self._name = None
        self._official_end_date = None
        self._official_start_date = None
        self._project_status = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        if company_status is not None:
            self.company_status = company_status
        if data is not None:
            self.data = data
        if execution_status is not None:
            self.execution_status = execution_status
        if expected_end_date is not None:
            self.expected_end_date = expected_end_date
        if expected_start_date is not None:
            self.expected_start_date = expected_start_date
        if id is not None:
            self.id = id
        if locations is not None:
            self.locations = locations
        self.name = name
        if official_end_date is not None:
            self.official_end_date = official_end_date
        if official_start_date is not None:
            self.official_start_date = official_start_date
        if project_status is not None:
            self.project_status = project_status

    @property
    def client_id(self):
        """Gets the client_id of this ProjectDto.  # noqa: E501


        :return: The client_id of this ProjectDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ProjectDto.


        :param client_id: The client_id of this ProjectDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def company_status(self):
        """Gets the company_status of this ProjectDto.  # noqa: E501


        :return: The company_status of this ProjectDto.  # noqa: E501
        :rtype: str
        """
        return self._company_status

    @company_status.setter
    def company_status(self, company_status):
        """Sets the company_status of this ProjectDto.


        :param company_status: The company_status of this ProjectDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "TRIAL", "DEMO", "DISABLE", "DELETE"]  # noqa: E501
        if company_status not in allowed_values:
            raise ValueError(
                "Invalid value for `company_status` ({0}), must be one of {1}"  # noqa: E501
                .format(company_status, allowed_values)
            )

        self._company_status = company_status

    @property
    def data(self):
        """Gets the data of this ProjectDto.  # noqa: E501


        :return: The data of this ProjectDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ProjectDto.


        :param data: The data of this ProjectDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def execution_status(self):
        """Gets the execution_status of this ProjectDto.  # noqa: E501


        :return: The execution_status of this ProjectDto.  # noqa: E501
        :rtype: str
        """
        return self._execution_status

    @execution_status.setter
    def execution_status(self, execution_status):
        """Sets the execution_status of this ProjectDto.


        :param execution_status: The execution_status of this ProjectDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["TO_BE_STARTED", "STARTED", "COMPLETED"]  # noqa: E501
        if execution_status not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_status` ({0}), must be one of {1}"  # noqa: E501
                .format(execution_status, allowed_values)
            )

        self._execution_status = execution_status

    @property
    def expected_end_date(self):
        """Gets the expected_end_date of this ProjectDto.  # noqa: E501


        :return: The expected_end_date of this ProjectDto.  # noqa: E501
        :rtype: str
        """
        return self._expected_end_date

    @expected_end_date.setter
    def expected_end_date(self, expected_end_date):
        """Sets the expected_end_date of this ProjectDto.


        :param expected_end_date: The expected_end_date of this ProjectDto.  # noqa: E501
        :type: str
        """

        self._expected_end_date = expected_end_date

    @property
    def expected_start_date(self):
        """Gets the expected_start_date of this ProjectDto.  # noqa: E501


        :return: The expected_start_date of this ProjectDto.  # noqa: E501
        :rtype: str
        """
        return self._expected_start_date

    @expected_start_date.setter
    def expected_start_date(self, expected_start_date):
        """Sets the expected_start_date of this ProjectDto.


        :param expected_start_date: The expected_start_date of this ProjectDto.  # noqa: E501
        :type: str
        """

        self._expected_start_date = expected_start_date

    @property
    def id(self):
        """Gets the id of this ProjectDto.  # noqa: E501


        :return: The id of this ProjectDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectDto.


        :param id: The id of this ProjectDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def locations(self):
        """Gets the locations of this ProjectDto.  # noqa: E501


        :return: The locations of this ProjectDto.  # noqa: E501
        :rtype: list[LocationDto]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this ProjectDto.


        :param locations: The locations of this ProjectDto.  # noqa: E501
        :type: list[LocationDto]
        """

        self._locations = locations

    @property
    def name(self):
        """Gets the name of this ProjectDto.  # noqa: E501


        :return: The name of this ProjectDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectDto.


        :param name: The name of this ProjectDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def official_end_date(self):
        """Gets the official_end_date of this ProjectDto.  # noqa: E501


        :return: The official_end_date of this ProjectDto.  # noqa: E501
        :rtype: str
        """
        return self._official_end_date

    @official_end_date.setter
    def official_end_date(self, official_end_date):
        """Sets the official_end_date of this ProjectDto.


        :param official_end_date: The official_end_date of this ProjectDto.  # noqa: E501
        :type: str
        """

        self._official_end_date = official_end_date

    @property
    def official_start_date(self):
        """Gets the official_start_date of this ProjectDto.  # noqa: E501


        :return: The official_start_date of this ProjectDto.  # noqa: E501
        :rtype: str
        """
        return self._official_start_date

    @official_start_date.setter
    def official_start_date(self, official_start_date):
        """Sets the official_start_date of this ProjectDto.


        :param official_start_date: The official_start_date of this ProjectDto.  # noqa: E501
        :type: str
        """

        self._official_start_date = official_start_date

    @property
    def project_status(self):
        """Gets the project_status of this ProjectDto.  # noqa: E501


        :return: The project_status of this ProjectDto.  # noqa: E501
        :rtype: str
        """
        return self._project_status

    @project_status.setter
    def project_status(self, project_status):
        """Sets the project_status of this ProjectDto.


        :param project_status: The project_status of this ProjectDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["PAST", "LIVE"]  # noqa: E501
        if project_status not in allowed_values:
            raise ValueError(
                "Invalid value for `project_status` ({0}), must be one of {1}"  # noqa: E501
                .format(project_status, allowed_values)
            )

        self._project_status = project_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
