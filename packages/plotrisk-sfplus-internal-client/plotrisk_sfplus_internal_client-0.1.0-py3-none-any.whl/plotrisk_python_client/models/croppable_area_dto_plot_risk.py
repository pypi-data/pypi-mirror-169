# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CroppableAreaDtoPlotRisk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audited_area': 'Area',
        'created_date': 'datetime',
        'crop_details': 'CropDetails',
        'declared_area': 'Area',
        'farmer_crop_id': 'int',
        'id': 'int',
        'last_modified_date': 'datetime',
        'name': 'str'
    }

    attribute_map = {
        'audited_area': 'auditedArea',
        'created_date': 'createdDate',
        'crop_details': 'cropDetails',
        'declared_area': 'declaredArea',
        'farmer_crop_id': 'farmerCropId',
        'id': 'id',
        'last_modified_date': 'lastModifiedDate',
        'name': 'name'
    }

    def __init__(self, audited_area=None, created_date=None, crop_details=None, declared_area=None, farmer_crop_id=None, id=None, last_modified_date=None, name=None):  # noqa: E501
        """CroppableAreaDtoPlotRisk - a model defined in Swagger"""  # noqa: E501
        self._audited_area = None
        self._created_date = None
        self._crop_details = None
        self._declared_area = None
        self._farmer_crop_id = None
        self._id = None
        self._last_modified_date = None
        self._name = None
        self.discriminator = None
        if audited_area is not None:
            self.audited_area = audited_area
        if created_date is not None:
            self.created_date = created_date
        if crop_details is not None:
            self.crop_details = crop_details
        if declared_area is not None:
            self.declared_area = declared_area
        if farmer_crop_id is not None:
            self.farmer_crop_id = farmer_crop_id
        if id is not None:
            self.id = id
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if name is not None:
            self.name = name

    @property
    def audited_area(self):
        """Gets the audited_area of this CroppableAreaDtoPlotRisk.  # noqa: E501


        :return: The audited_area of this CroppableAreaDtoPlotRisk.  # noqa: E501
        :rtype: Area
        """
        return self._audited_area

    @audited_area.setter
    def audited_area(self, audited_area):
        """Sets the audited_area of this CroppableAreaDtoPlotRisk.


        :param audited_area: The audited_area of this CroppableAreaDtoPlotRisk.  # noqa: E501
        :type: Area
        """

        self._audited_area = audited_area

    @property
    def created_date(self):
        """Gets the created_date of this CroppableAreaDtoPlotRisk.  # noqa: E501


        :return: The created_date of this CroppableAreaDtoPlotRisk.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CroppableAreaDtoPlotRisk.


        :param created_date: The created_date of this CroppableAreaDtoPlotRisk.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def crop_details(self):
        """Gets the crop_details of this CroppableAreaDtoPlotRisk.  # noqa: E501


        :return: The crop_details of this CroppableAreaDtoPlotRisk.  # noqa: E501
        :rtype: CropDetails
        """
        return self._crop_details

    @crop_details.setter
    def crop_details(self, crop_details):
        """Sets the crop_details of this CroppableAreaDtoPlotRisk.


        :param crop_details: The crop_details of this CroppableAreaDtoPlotRisk.  # noqa: E501
        :type: CropDetails
        """

        self._crop_details = crop_details

    @property
    def declared_area(self):
        """Gets the declared_area of this CroppableAreaDtoPlotRisk.  # noqa: E501


        :return: The declared_area of this CroppableAreaDtoPlotRisk.  # noqa: E501
        :rtype: Area
        """
        return self._declared_area

    @declared_area.setter
    def declared_area(self, declared_area):
        """Sets the declared_area of this CroppableAreaDtoPlotRisk.


        :param declared_area: The declared_area of this CroppableAreaDtoPlotRisk.  # noqa: E501
        :type: Area
        """

        self._declared_area = declared_area

    @property
    def farmer_crop_id(self):
        """Gets the farmer_crop_id of this CroppableAreaDtoPlotRisk.  # noqa: E501


        :return: The farmer_crop_id of this CroppableAreaDtoPlotRisk.  # noqa: E501
        :rtype: int
        """
        return self._farmer_crop_id

    @farmer_crop_id.setter
    def farmer_crop_id(self, farmer_crop_id):
        """Sets the farmer_crop_id of this CroppableAreaDtoPlotRisk.


        :param farmer_crop_id: The farmer_crop_id of this CroppableAreaDtoPlotRisk.  # noqa: E501
        :type: int
        """

        self._farmer_crop_id = farmer_crop_id

    @property
    def id(self):
        """Gets the id of this CroppableAreaDtoPlotRisk.  # noqa: E501


        :return: The id of this CroppableAreaDtoPlotRisk.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CroppableAreaDtoPlotRisk.


        :param id: The id of this CroppableAreaDtoPlotRisk.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this CroppableAreaDtoPlotRisk.  # noqa: E501


        :return: The last_modified_date of this CroppableAreaDtoPlotRisk.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this CroppableAreaDtoPlotRisk.


        :param last_modified_date: The last_modified_date of this CroppableAreaDtoPlotRisk.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def name(self):
        """Gets the name of this CroppableAreaDtoPlotRisk.  # noqa: E501


        :return: The name of this CroppableAreaDtoPlotRisk.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CroppableAreaDtoPlotRisk.


        :param name: The name of this CroppableAreaDtoPlotRisk.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CroppableAreaDtoPlotRisk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CroppableAreaDtoPlotRisk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
