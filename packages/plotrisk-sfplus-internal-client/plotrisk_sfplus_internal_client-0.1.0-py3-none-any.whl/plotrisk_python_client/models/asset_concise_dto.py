# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetConciseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'AddressDto',
        'asset_status': 'str',
        'data': 'dict(str, object)',
        'id': 'int',
        'name': 'str',
        'owner_code': 'str',
        'owner_first_name': 'str',
        'owner_id': 'int'
    }

    attribute_map = {
        'address': 'address',
        'asset_status': 'assetStatus',
        'data': 'data',
        'id': 'id',
        'name': 'name',
        'owner_code': 'ownerCode',
        'owner_first_name': 'ownerFirstName',
        'owner_id': 'ownerId'
    }

    def __init__(self, address=None, asset_status=None, data=None, id=None, name=None, owner_code=None, owner_first_name=None, owner_id=None):  # noqa: E501
        """AssetConciseDto - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._asset_status = None
        self._data = None
        self._id = None
        self._name = None
        self._owner_code = None
        self._owner_first_name = None
        self._owner_id = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if asset_status is not None:
            self.asset_status = asset_status
        if data is not None:
            self.data = data
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if owner_code is not None:
            self.owner_code = owner_code
        if owner_first_name is not None:
            self.owner_first_name = owner_first_name
        self.owner_id = owner_id

    @property
    def address(self):
        """Gets the address of this AssetConciseDto.  # noqa: E501


        :return: The address of this AssetConciseDto.  # noqa: E501
        :rtype: AddressDto
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AssetConciseDto.


        :param address: The address of this AssetConciseDto.  # noqa: E501
        :type: AddressDto
        """

        self._address = address

    @property
    def asset_status(self):
        """Gets the asset_status of this AssetConciseDto.  # noqa: E501


        :return: The asset_status of this AssetConciseDto.  # noqa: E501
        :rtype: str
        """
        return self._asset_status

    @asset_status.setter
    def asset_status(self, asset_status):
        """Sets the asset_status of this AssetConciseDto.


        :param asset_status: The asset_status of this AssetConciseDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["AVAILABLE", "UNAVAILABLE", "PARTIALLY_AVAILABLE"]  # noqa: E501
        if asset_status not in allowed_values:
            raise ValueError(
                "Invalid value for `asset_status` ({0}), must be one of {1}"  # noqa: E501
                .format(asset_status, allowed_values)
            )

        self._asset_status = asset_status

    @property
    def data(self):
        """Gets the data of this AssetConciseDto.  # noqa: E501


        :return: The data of this AssetConciseDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AssetConciseDto.


        :param data: The data of this AssetConciseDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def id(self):
        """Gets the id of this AssetConciseDto.  # noqa: E501


        :return: The id of this AssetConciseDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetConciseDto.


        :param id: The id of this AssetConciseDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AssetConciseDto.  # noqa: E501


        :return: The name of this AssetConciseDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetConciseDto.


        :param name: The name of this AssetConciseDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner_code(self):
        """Gets the owner_code of this AssetConciseDto.  # noqa: E501


        :return: The owner_code of this AssetConciseDto.  # noqa: E501
        :rtype: str
        """
        return self._owner_code

    @owner_code.setter
    def owner_code(self, owner_code):
        """Sets the owner_code of this AssetConciseDto.


        :param owner_code: The owner_code of this AssetConciseDto.  # noqa: E501
        :type: str
        """

        self._owner_code = owner_code

    @property
    def owner_first_name(self):
        """Gets the owner_first_name of this AssetConciseDto.  # noqa: E501


        :return: The owner_first_name of this AssetConciseDto.  # noqa: E501
        :rtype: str
        """
        return self._owner_first_name

    @owner_first_name.setter
    def owner_first_name(self, owner_first_name):
        """Sets the owner_first_name of this AssetConciseDto.


        :param owner_first_name: The owner_first_name of this AssetConciseDto.  # noqa: E501
        :type: str
        """

        self._owner_first_name = owner_first_name

    @property
    def owner_id(self):
        """Gets the owner_id of this AssetConciseDto.  # noqa: E501


        :return: The owner_id of this AssetConciseDto.  # noqa: E501
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this AssetConciseDto.


        :param owner_id: The owner_id of this AssetConciseDto.  # noqa: E501
        :type: int
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")  # noqa: E501

        self._owner_id = owner_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetConciseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetConciseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
