# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CUConciseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crop_unit_name': 'str',
        'crop_variety_name': 'str',
        'cu_id': 'int',
        'data': 'dict(str, object)',
        'date_of_sowing': 'datetime',
        'reported_loss': 'float'
    }

    attribute_map = {
        'crop_unit_name': 'cropUnitName',
        'crop_variety_name': 'cropVarietyName',
        'cu_id': 'cuId',
        'data': 'data',
        'date_of_sowing': 'dateOfSowing',
        'reported_loss': 'reportedLoss'
    }

    def __init__(self, crop_unit_name=None, crop_variety_name=None, cu_id=None, data=None, date_of_sowing=None, reported_loss=None):  # noqa: E501
        """CUConciseDto - a model defined in Swagger"""  # noqa: E501
        self._crop_unit_name = None
        self._crop_variety_name = None
        self._cu_id = None
        self._data = None
        self._date_of_sowing = None
        self._reported_loss = None
        self.discriminator = None
        if crop_unit_name is not None:
            self.crop_unit_name = crop_unit_name
        if crop_variety_name is not None:
            self.crop_variety_name = crop_variety_name
        if cu_id is not None:
            self.cu_id = cu_id
        if data is not None:
            self.data = data
        if date_of_sowing is not None:
            self.date_of_sowing = date_of_sowing
        if reported_loss is not None:
            self.reported_loss = reported_loss

    @property
    def crop_unit_name(self):
        """Gets the crop_unit_name of this CUConciseDto.  # noqa: E501


        :return: The crop_unit_name of this CUConciseDto.  # noqa: E501
        :rtype: str
        """
        return self._crop_unit_name

    @crop_unit_name.setter
    def crop_unit_name(self, crop_unit_name):
        """Sets the crop_unit_name of this CUConciseDto.


        :param crop_unit_name: The crop_unit_name of this CUConciseDto.  # noqa: E501
        :type: str
        """

        self._crop_unit_name = crop_unit_name

    @property
    def crop_variety_name(self):
        """Gets the crop_variety_name of this CUConciseDto.  # noqa: E501


        :return: The crop_variety_name of this CUConciseDto.  # noqa: E501
        :rtype: str
        """
        return self._crop_variety_name

    @crop_variety_name.setter
    def crop_variety_name(self, crop_variety_name):
        """Sets the crop_variety_name of this CUConciseDto.


        :param crop_variety_name: The crop_variety_name of this CUConciseDto.  # noqa: E501
        :type: str
        """

        self._crop_variety_name = crop_variety_name

    @property
    def cu_id(self):
        """Gets the cu_id of this CUConciseDto.  # noqa: E501


        :return: The cu_id of this CUConciseDto.  # noqa: E501
        :rtype: int
        """
        return self._cu_id

    @cu_id.setter
    def cu_id(self, cu_id):
        """Sets the cu_id of this CUConciseDto.


        :param cu_id: The cu_id of this CUConciseDto.  # noqa: E501
        :type: int
        """

        self._cu_id = cu_id

    @property
    def data(self):
        """Gets the data of this CUConciseDto.  # noqa: E501


        :return: The data of this CUConciseDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CUConciseDto.


        :param data: The data of this CUConciseDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def date_of_sowing(self):
        """Gets the date_of_sowing of this CUConciseDto.  # noqa: E501


        :return: The date_of_sowing of this CUConciseDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_sowing

    @date_of_sowing.setter
    def date_of_sowing(self, date_of_sowing):
        """Sets the date_of_sowing of this CUConciseDto.


        :param date_of_sowing: The date_of_sowing of this CUConciseDto.  # noqa: E501
        :type: datetime
        """

        self._date_of_sowing = date_of_sowing

    @property
    def reported_loss(self):
        """Gets the reported_loss of this CUConciseDto.  # noqa: E501


        :return: The reported_loss of this CUConciseDto.  # noqa: E501
        :rtype: float
        """
        return self._reported_loss

    @reported_loss.setter
    def reported_loss(self, reported_loss):
        """Sets the reported_loss of this CUConciseDto.


        :param reported_loss: The reported_loss of this CUConciseDto.  # noqa: E501
        :type: float
        """

        self._reported_loss = reported_loss

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CUConciseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CUConciseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
