# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValidatedAssetFilterDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'empty': 'bool',
        'farmer_codes': 'str',
        'irrigation_type_ids': 'list[int]',
        'location': 'LocationDto',
        'max_crop_unit_count': 'float',
        'max_date_of_sowing': 'str',
        'max_expected_harvest_date': 'str',
        'max_usable_area': 'float',
        'min_crop_unit_count': 'float',
        'min_date_of_sowing': 'str',
        'min_expected_harvest_date': 'str',
        'min_usable_area': 'float',
        'owner_ids': 'list[int]',
        'project_asset_statuses': 'list[str]',
        'soil_type_ids': 'list[int]',
        'user_ids': 'list[int]',
        'variety_ids': 'list[int]'
    }

    attribute_map = {
        'empty': 'empty',
        'farmer_codes': 'farmerCodes',
        'irrigation_type_ids': 'irrigationTypeIds',
        'location': 'location',
        'max_crop_unit_count': 'maxCropUnitCount',
        'max_date_of_sowing': 'maxDateOfSowing',
        'max_expected_harvest_date': 'maxExpectedHarvestDate',
        'max_usable_area': 'maxUsableArea',
        'min_crop_unit_count': 'minCropUnitCount',
        'min_date_of_sowing': 'minDateOfSowing',
        'min_expected_harvest_date': 'minExpectedHarvestDate',
        'min_usable_area': 'minUsableArea',
        'owner_ids': 'ownerIds',
        'project_asset_statuses': 'projectAssetStatuses',
        'soil_type_ids': 'soilTypeIds',
        'user_ids': 'userIds',
        'variety_ids': 'varietyIds'
    }

    def __init__(self, empty=None, farmer_codes=None, irrigation_type_ids=None, location=None, max_crop_unit_count=None, max_date_of_sowing=None, max_expected_harvest_date=None, max_usable_area=None, min_crop_unit_count=None, min_date_of_sowing=None, min_expected_harvest_date=None, min_usable_area=None, owner_ids=None, project_asset_statuses=None, soil_type_ids=None, user_ids=None, variety_ids=None):  # noqa: E501
        """ValidatedAssetFilterDto - a model defined in Swagger"""  # noqa: E501
        self._empty = None
        self._farmer_codes = None
        self._irrigation_type_ids = None
        self._location = None
        self._max_crop_unit_count = None
        self._max_date_of_sowing = None
        self._max_expected_harvest_date = None
        self._max_usable_area = None
        self._min_crop_unit_count = None
        self._min_date_of_sowing = None
        self._min_expected_harvest_date = None
        self._min_usable_area = None
        self._owner_ids = None
        self._project_asset_statuses = None
        self._soil_type_ids = None
        self._user_ids = None
        self._variety_ids = None
        self.discriminator = None
        if empty is not None:
            self.empty = empty
        if farmer_codes is not None:
            self.farmer_codes = farmer_codes
        if irrigation_type_ids is not None:
            self.irrigation_type_ids = irrigation_type_ids
        if location is not None:
            self.location = location
        if max_crop_unit_count is not None:
            self.max_crop_unit_count = max_crop_unit_count
        if max_date_of_sowing is not None:
            self.max_date_of_sowing = max_date_of_sowing
        if max_expected_harvest_date is not None:
            self.max_expected_harvest_date = max_expected_harvest_date
        if max_usable_area is not None:
            self.max_usable_area = max_usable_area
        if min_crop_unit_count is not None:
            self.min_crop_unit_count = min_crop_unit_count
        if min_date_of_sowing is not None:
            self.min_date_of_sowing = min_date_of_sowing
        if min_expected_harvest_date is not None:
            self.min_expected_harvest_date = min_expected_harvest_date
        if min_usable_area is not None:
            self.min_usable_area = min_usable_area
        if owner_ids is not None:
            self.owner_ids = owner_ids
        if project_asset_statuses is not None:
            self.project_asset_statuses = project_asset_statuses
        if soil_type_ids is not None:
            self.soil_type_ids = soil_type_ids
        if user_ids is not None:
            self.user_ids = user_ids
        if variety_ids is not None:
            self.variety_ids = variety_ids

    @property
    def empty(self):
        """Gets the empty of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The empty of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this ValidatedAssetFilterDto.


        :param empty: The empty of this ValidatedAssetFilterDto.  # noqa: E501
        :type: bool
        """

        self._empty = empty

    @property
    def farmer_codes(self):
        """Gets the farmer_codes of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The farmer_codes of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._farmer_codes

    @farmer_codes.setter
    def farmer_codes(self, farmer_codes):
        """Sets the farmer_codes of this ValidatedAssetFilterDto.


        :param farmer_codes: The farmer_codes of this ValidatedAssetFilterDto.  # noqa: E501
        :type: str
        """

        self._farmer_codes = farmer_codes

    @property
    def irrigation_type_ids(self):
        """Gets the irrigation_type_ids of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The irrigation_type_ids of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._irrigation_type_ids

    @irrigation_type_ids.setter
    def irrigation_type_ids(self, irrigation_type_ids):
        """Sets the irrigation_type_ids of this ValidatedAssetFilterDto.


        :param irrigation_type_ids: The irrigation_type_ids of this ValidatedAssetFilterDto.  # noqa: E501
        :type: list[int]
        """

        self._irrigation_type_ids = irrigation_type_ids

    @property
    def location(self):
        """Gets the location of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The location of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: LocationDto
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ValidatedAssetFilterDto.


        :param location: The location of this ValidatedAssetFilterDto.  # noqa: E501
        :type: LocationDto
        """

        self._location = location

    @property
    def max_crop_unit_count(self):
        """Gets the max_crop_unit_count of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The max_crop_unit_count of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: float
        """
        return self._max_crop_unit_count

    @max_crop_unit_count.setter
    def max_crop_unit_count(self, max_crop_unit_count):
        """Sets the max_crop_unit_count of this ValidatedAssetFilterDto.


        :param max_crop_unit_count: The max_crop_unit_count of this ValidatedAssetFilterDto.  # noqa: E501
        :type: float
        """

        self._max_crop_unit_count = max_crop_unit_count

    @property
    def max_date_of_sowing(self):
        """Gets the max_date_of_sowing of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The max_date_of_sowing of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._max_date_of_sowing

    @max_date_of_sowing.setter
    def max_date_of_sowing(self, max_date_of_sowing):
        """Sets the max_date_of_sowing of this ValidatedAssetFilterDto.


        :param max_date_of_sowing: The max_date_of_sowing of this ValidatedAssetFilterDto.  # noqa: E501
        :type: str
        """

        self._max_date_of_sowing = max_date_of_sowing

    @property
    def max_expected_harvest_date(self):
        """Gets the max_expected_harvest_date of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The max_expected_harvest_date of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._max_expected_harvest_date

    @max_expected_harvest_date.setter
    def max_expected_harvest_date(self, max_expected_harvest_date):
        """Sets the max_expected_harvest_date of this ValidatedAssetFilterDto.


        :param max_expected_harvest_date: The max_expected_harvest_date of this ValidatedAssetFilterDto.  # noqa: E501
        :type: str
        """

        self._max_expected_harvest_date = max_expected_harvest_date

    @property
    def max_usable_area(self):
        """Gets the max_usable_area of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The max_usable_area of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: float
        """
        return self._max_usable_area

    @max_usable_area.setter
    def max_usable_area(self, max_usable_area):
        """Sets the max_usable_area of this ValidatedAssetFilterDto.


        :param max_usable_area: The max_usable_area of this ValidatedAssetFilterDto.  # noqa: E501
        :type: float
        """

        self._max_usable_area = max_usable_area

    @property
    def min_crop_unit_count(self):
        """Gets the min_crop_unit_count of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The min_crop_unit_count of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: float
        """
        return self._min_crop_unit_count

    @min_crop_unit_count.setter
    def min_crop_unit_count(self, min_crop_unit_count):
        """Sets the min_crop_unit_count of this ValidatedAssetFilterDto.


        :param min_crop_unit_count: The min_crop_unit_count of this ValidatedAssetFilterDto.  # noqa: E501
        :type: float
        """

        self._min_crop_unit_count = min_crop_unit_count

    @property
    def min_date_of_sowing(self):
        """Gets the min_date_of_sowing of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The min_date_of_sowing of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._min_date_of_sowing

    @min_date_of_sowing.setter
    def min_date_of_sowing(self, min_date_of_sowing):
        """Sets the min_date_of_sowing of this ValidatedAssetFilterDto.


        :param min_date_of_sowing: The min_date_of_sowing of this ValidatedAssetFilterDto.  # noqa: E501
        :type: str
        """

        self._min_date_of_sowing = min_date_of_sowing

    @property
    def min_expected_harvest_date(self):
        """Gets the min_expected_harvest_date of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The min_expected_harvest_date of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: str
        """
        return self._min_expected_harvest_date

    @min_expected_harvest_date.setter
    def min_expected_harvest_date(self, min_expected_harvest_date):
        """Sets the min_expected_harvest_date of this ValidatedAssetFilterDto.


        :param min_expected_harvest_date: The min_expected_harvest_date of this ValidatedAssetFilterDto.  # noqa: E501
        :type: str
        """

        self._min_expected_harvest_date = min_expected_harvest_date

    @property
    def min_usable_area(self):
        """Gets the min_usable_area of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The min_usable_area of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: float
        """
        return self._min_usable_area

    @min_usable_area.setter
    def min_usable_area(self, min_usable_area):
        """Sets the min_usable_area of this ValidatedAssetFilterDto.


        :param min_usable_area: The min_usable_area of this ValidatedAssetFilterDto.  # noqa: E501
        :type: float
        """

        self._min_usable_area = min_usable_area

    @property
    def owner_ids(self):
        """Gets the owner_ids of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The owner_ids of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._owner_ids

    @owner_ids.setter
    def owner_ids(self, owner_ids):
        """Sets the owner_ids of this ValidatedAssetFilterDto.


        :param owner_ids: The owner_ids of this ValidatedAssetFilterDto.  # noqa: E501
        :type: list[int]
        """

        self._owner_ids = owner_ids

    @property
    def project_asset_statuses(self):
        """Gets the project_asset_statuses of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The project_asset_statuses of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._project_asset_statuses

    @project_asset_statuses.setter
    def project_asset_statuses(self, project_asset_statuses):
        """Sets the project_asset_statuses of this ValidatedAssetFilterDto.


        :param project_asset_statuses: The project_asset_statuses of this ValidatedAssetFilterDto.  # noqa: E501
        :type: list[str]
        """

        self._project_asset_statuses = project_asset_statuses

    @property
    def soil_type_ids(self):
        """Gets the soil_type_ids of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The soil_type_ids of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._soil_type_ids

    @soil_type_ids.setter
    def soil_type_ids(self, soil_type_ids):
        """Sets the soil_type_ids of this ValidatedAssetFilterDto.


        :param soil_type_ids: The soil_type_ids of this ValidatedAssetFilterDto.  # noqa: E501
        :type: list[int]
        """

        self._soil_type_ids = soil_type_ids

    @property
    def user_ids(self):
        """Gets the user_ids of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The user_ids of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this ValidatedAssetFilterDto.


        :param user_ids: The user_ids of this ValidatedAssetFilterDto.  # noqa: E501
        :type: list[int]
        """

        self._user_ids = user_ids

    @property
    def variety_ids(self):
        """Gets the variety_ids of this ValidatedAssetFilterDto.  # noqa: E501


        :return: The variety_ids of this ValidatedAssetFilterDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._variety_ids

    @variety_ids.setter
    def variety_ids(self, variety_ids):
        """Sets the variety_ids of this ValidatedAssetFilterDto.


        :param variety_ids: The variety_ids of this ValidatedAssetFilterDto.  # noqa: E501
        :type: list[int]
        """

        self._variety_ids = variety_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidatedAssetFilterDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidatedAssetFilterDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
