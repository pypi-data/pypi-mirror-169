# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CAConciseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_name': 'str',
        'asset_total_area': 'float',
        'audited_area': 'float',
        'ca_id': 'int',
        'crop_unit_count': 'int',
        'crop_variety_name': 'str',
        'croppable_area_name': 'str',
        'date_of_sowing': 'datetime',
        'declared_area': 'float',
        'project_id': 'int',
        'project_name': 'str',
        'project_status': 'str',
        'reported_loss': 'float',
        'usable_area': 'float'
    }

    attribute_map = {
        'asset_name': 'assetName',
        'asset_total_area': 'assetTotalArea',
        'audited_area': 'auditedArea',
        'ca_id': 'caId',
        'crop_unit_count': 'cropUnitCount',
        'crop_variety_name': 'cropVarietyName',
        'croppable_area_name': 'croppableAreaName',
        'date_of_sowing': 'dateOfSowing',
        'declared_area': 'declaredArea',
        'project_id': 'projectId',
        'project_name': 'projectName',
        'project_status': 'projectStatus',
        'reported_loss': 'reportedLoss',
        'usable_area': 'usableArea'
    }

    def __init__(self, asset_name=None, asset_total_area=None, audited_area=None, ca_id=None, crop_unit_count=None, crop_variety_name=None, croppable_area_name=None, date_of_sowing=None, declared_area=None, project_id=None, project_name=None, project_status=None, reported_loss=None, usable_area=None):  # noqa: E501
        """CAConciseDto - a model defined in Swagger"""  # noqa: E501
        self._asset_name = None
        self._asset_total_area = None
        self._audited_area = None
        self._ca_id = None
        self._crop_unit_count = None
        self._crop_variety_name = None
        self._croppable_area_name = None
        self._date_of_sowing = None
        self._declared_area = None
        self._project_id = None
        self._project_name = None
        self._project_status = None
        self._reported_loss = None
        self._usable_area = None
        self.discriminator = None
        if asset_name is not None:
            self.asset_name = asset_name
        if asset_total_area is not None:
            self.asset_total_area = asset_total_area
        if audited_area is not None:
            self.audited_area = audited_area
        if ca_id is not None:
            self.ca_id = ca_id
        if crop_unit_count is not None:
            self.crop_unit_count = crop_unit_count
        if crop_variety_name is not None:
            self.crop_variety_name = crop_variety_name
        if croppable_area_name is not None:
            self.croppable_area_name = croppable_area_name
        if date_of_sowing is not None:
            self.date_of_sowing = date_of_sowing
        if declared_area is not None:
            self.declared_area = declared_area
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if project_status is not None:
            self.project_status = project_status
        if reported_loss is not None:
            self.reported_loss = reported_loss
        if usable_area is not None:
            self.usable_area = usable_area

    @property
    def asset_name(self):
        """Gets the asset_name of this CAConciseDto.  # noqa: E501


        :return: The asset_name of this CAConciseDto.  # noqa: E501
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this CAConciseDto.


        :param asset_name: The asset_name of this CAConciseDto.  # noqa: E501
        :type: str
        """

        self._asset_name = asset_name

    @property
    def asset_total_area(self):
        """Gets the asset_total_area of this CAConciseDto.  # noqa: E501


        :return: The asset_total_area of this CAConciseDto.  # noqa: E501
        :rtype: float
        """
        return self._asset_total_area

    @asset_total_area.setter
    def asset_total_area(self, asset_total_area):
        """Sets the asset_total_area of this CAConciseDto.


        :param asset_total_area: The asset_total_area of this CAConciseDto.  # noqa: E501
        :type: float
        """

        self._asset_total_area = asset_total_area

    @property
    def audited_area(self):
        """Gets the audited_area of this CAConciseDto.  # noqa: E501


        :return: The audited_area of this CAConciseDto.  # noqa: E501
        :rtype: float
        """
        return self._audited_area

    @audited_area.setter
    def audited_area(self, audited_area):
        """Sets the audited_area of this CAConciseDto.


        :param audited_area: The audited_area of this CAConciseDto.  # noqa: E501
        :type: float
        """

        self._audited_area = audited_area

    @property
    def ca_id(self):
        """Gets the ca_id of this CAConciseDto.  # noqa: E501


        :return: The ca_id of this CAConciseDto.  # noqa: E501
        :rtype: int
        """
        return self._ca_id

    @ca_id.setter
    def ca_id(self, ca_id):
        """Sets the ca_id of this CAConciseDto.


        :param ca_id: The ca_id of this CAConciseDto.  # noqa: E501
        :type: int
        """

        self._ca_id = ca_id

    @property
    def crop_unit_count(self):
        """Gets the crop_unit_count of this CAConciseDto.  # noqa: E501


        :return: The crop_unit_count of this CAConciseDto.  # noqa: E501
        :rtype: int
        """
        return self._crop_unit_count

    @crop_unit_count.setter
    def crop_unit_count(self, crop_unit_count):
        """Sets the crop_unit_count of this CAConciseDto.


        :param crop_unit_count: The crop_unit_count of this CAConciseDto.  # noqa: E501
        :type: int
        """

        self._crop_unit_count = crop_unit_count

    @property
    def crop_variety_name(self):
        """Gets the crop_variety_name of this CAConciseDto.  # noqa: E501


        :return: The crop_variety_name of this CAConciseDto.  # noqa: E501
        :rtype: str
        """
        return self._crop_variety_name

    @crop_variety_name.setter
    def crop_variety_name(self, crop_variety_name):
        """Sets the crop_variety_name of this CAConciseDto.


        :param crop_variety_name: The crop_variety_name of this CAConciseDto.  # noqa: E501
        :type: str
        """

        self._crop_variety_name = crop_variety_name

    @property
    def croppable_area_name(self):
        """Gets the croppable_area_name of this CAConciseDto.  # noqa: E501


        :return: The croppable_area_name of this CAConciseDto.  # noqa: E501
        :rtype: str
        """
        return self._croppable_area_name

    @croppable_area_name.setter
    def croppable_area_name(self, croppable_area_name):
        """Sets the croppable_area_name of this CAConciseDto.


        :param croppable_area_name: The croppable_area_name of this CAConciseDto.  # noqa: E501
        :type: str
        """

        self._croppable_area_name = croppable_area_name

    @property
    def date_of_sowing(self):
        """Gets the date_of_sowing of this CAConciseDto.  # noqa: E501


        :return: The date_of_sowing of this CAConciseDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_sowing

    @date_of_sowing.setter
    def date_of_sowing(self, date_of_sowing):
        """Sets the date_of_sowing of this CAConciseDto.


        :param date_of_sowing: The date_of_sowing of this CAConciseDto.  # noqa: E501
        :type: datetime
        """

        self._date_of_sowing = date_of_sowing

    @property
    def declared_area(self):
        """Gets the declared_area of this CAConciseDto.  # noqa: E501


        :return: The declared_area of this CAConciseDto.  # noqa: E501
        :rtype: float
        """
        return self._declared_area

    @declared_area.setter
    def declared_area(self, declared_area):
        """Sets the declared_area of this CAConciseDto.


        :param declared_area: The declared_area of this CAConciseDto.  # noqa: E501
        :type: float
        """

        self._declared_area = declared_area

    @property
    def project_id(self):
        """Gets the project_id of this CAConciseDto.  # noqa: E501


        :return: The project_id of this CAConciseDto.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this CAConciseDto.


        :param project_id: The project_id of this CAConciseDto.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this CAConciseDto.  # noqa: E501


        :return: The project_name of this CAConciseDto.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this CAConciseDto.


        :param project_name: The project_name of this CAConciseDto.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def project_status(self):
        """Gets the project_status of this CAConciseDto.  # noqa: E501


        :return: The project_status of this CAConciseDto.  # noqa: E501
        :rtype: str
        """
        return self._project_status

    @project_status.setter
    def project_status(self, project_status):
        """Sets the project_status of this CAConciseDto.


        :param project_status: The project_status of this CAConciseDto.  # noqa: E501
        :type: str
        """

        self._project_status = project_status

    @property
    def reported_loss(self):
        """Gets the reported_loss of this CAConciseDto.  # noqa: E501


        :return: The reported_loss of this CAConciseDto.  # noqa: E501
        :rtype: float
        """
        return self._reported_loss

    @reported_loss.setter
    def reported_loss(self, reported_loss):
        """Sets the reported_loss of this CAConciseDto.


        :param reported_loss: The reported_loss of this CAConciseDto.  # noqa: E501
        :type: float
        """

        self._reported_loss = reported_loss

    @property
    def usable_area(self):
        """Gets the usable_area of this CAConciseDto.  # noqa: E501


        :return: The usable_area of this CAConciseDto.  # noqa: E501
        :rtype: float
        """
        return self._usable_area

    @usable_area.setter
    def usable_area(self, usable_area):
        """Sets the usable_area of this CAConciseDto.


        :param usable_area: The usable_area of this CAConciseDto.  # noqa: E501
        :type: float
        """

        self._usable_area = usable_area

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CAConciseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CAConciseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
