# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlanTypeDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'data': 'dict(str, object)',
        'data_collection': 'bool',
        'deleted': 'bool',
        'description': 'str',
        'id': 'int',
        'images': 'dict(str, object)',
        'name': 'str'
    }

    attribute_map = {
        'client_id': 'clientId',
        'data': 'data',
        'data_collection': 'dataCollection',
        'deleted': 'deleted',
        'description': 'description',
        'id': 'id',
        'images': 'images',
        'name': 'name'
    }

    def __init__(self, client_id=None, data=None, data_collection=None, deleted=None, description=None, id=None, images=None, name=None):  # noqa: E501
        """PlanTypeDto - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._data = None
        self._data_collection = None
        self._deleted = None
        self._description = None
        self._id = None
        self._images = None
        self._name = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        if data is not None:
            self.data = data
        if data_collection is not None:
            self.data_collection = data_collection
        if deleted is not None:
            self.deleted = deleted
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if images is not None:
            self.images = images
        self.name = name

    @property
    def client_id(self):
        """Gets the client_id of this PlanTypeDto.  # noqa: E501


        :return: The client_id of this PlanTypeDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this PlanTypeDto.


        :param client_id: The client_id of this PlanTypeDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def data(self):
        """Gets the data of this PlanTypeDto.  # noqa: E501


        :return: The data of this PlanTypeDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PlanTypeDto.


        :param data: The data of this PlanTypeDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def data_collection(self):
        """Gets the data_collection of this PlanTypeDto.  # noqa: E501


        :return: The data_collection of this PlanTypeDto.  # noqa: E501
        :rtype: bool
        """
        return self._data_collection

    @data_collection.setter
    def data_collection(self, data_collection):
        """Sets the data_collection of this PlanTypeDto.


        :param data_collection: The data_collection of this PlanTypeDto.  # noqa: E501
        :type: bool
        """

        self._data_collection = data_collection

    @property
    def deleted(self):
        """Gets the deleted of this PlanTypeDto.  # noqa: E501


        :return: The deleted of this PlanTypeDto.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this PlanTypeDto.


        :param deleted: The deleted of this PlanTypeDto.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this PlanTypeDto.  # noqa: E501


        :return: The description of this PlanTypeDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PlanTypeDto.


        :param description: The description of this PlanTypeDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this PlanTypeDto.  # noqa: E501


        :return: The id of this PlanTypeDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanTypeDto.


        :param id: The id of this PlanTypeDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this PlanTypeDto.  # noqa: E501


        :return: The images of this PlanTypeDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this PlanTypeDto.


        :param images: The images of this PlanTypeDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._images = images

    @property
    def name(self):
        """Gets the name of this PlanTypeDto.  # noqa: E501


        :return: The name of this PlanTypeDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlanTypeDto.


        :param name: The name of this PlanTypeDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanTypeDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanTypeDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
