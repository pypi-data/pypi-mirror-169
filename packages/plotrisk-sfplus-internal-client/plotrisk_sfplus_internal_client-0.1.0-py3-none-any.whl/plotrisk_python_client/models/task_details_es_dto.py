# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskDetailsESDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date': 'datetime',
        'executed_on': 'datetime',
        'execution_status': 'str',
        'farmer_id': 'int',
        'farmer_name': 'str',
        'pinned': 'bool',
        'plan_type_name': 'str',
        'start_date': 'datetime',
        'task_id': 'int',
        'task_name': 'str'
    }

    attribute_map = {
        'end_date': 'endDate',
        'executed_on': 'executedOn',
        'execution_status': 'executionStatus',
        'farmer_id': 'farmerId',
        'farmer_name': 'farmerName',
        'pinned': 'pinned',
        'plan_type_name': 'planTypeName',
        'start_date': 'startDate',
        'task_id': 'taskId',
        'task_name': 'taskName'
    }

    def __init__(self, end_date=None, executed_on=None, execution_status=None, farmer_id=None, farmer_name=None, pinned=None, plan_type_name=None, start_date=None, task_id=None, task_name=None):  # noqa: E501
        """TaskDetailsESDto - a model defined in Swagger"""  # noqa: E501
        self._end_date = None
        self._executed_on = None
        self._execution_status = None
        self._farmer_id = None
        self._farmer_name = None
        self._pinned = None
        self._plan_type_name = None
        self._start_date = None
        self._task_id = None
        self._task_name = None
        self.discriminator = None
        if end_date is not None:
            self.end_date = end_date
        if executed_on is not None:
            self.executed_on = executed_on
        if execution_status is not None:
            self.execution_status = execution_status
        if farmer_id is not None:
            self.farmer_id = farmer_id
        if farmer_name is not None:
            self.farmer_name = farmer_name
        if pinned is not None:
            self.pinned = pinned
        if plan_type_name is not None:
            self.plan_type_name = plan_type_name
        if start_date is not None:
            self.start_date = start_date
        if task_id is not None:
            self.task_id = task_id
        if task_name is not None:
            self.task_name = task_name

    @property
    def end_date(self):
        """Gets the end_date of this TaskDetailsESDto.  # noqa: E501


        :return: The end_date of this TaskDetailsESDto.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TaskDetailsESDto.


        :param end_date: The end_date of this TaskDetailsESDto.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def executed_on(self):
        """Gets the executed_on of this TaskDetailsESDto.  # noqa: E501


        :return: The executed_on of this TaskDetailsESDto.  # noqa: E501
        :rtype: datetime
        """
        return self._executed_on

    @executed_on.setter
    def executed_on(self, executed_on):
        """Sets the executed_on of this TaskDetailsESDto.


        :param executed_on: The executed_on of this TaskDetailsESDto.  # noqa: E501
        :type: datetime
        """

        self._executed_on = executed_on

    @property
    def execution_status(self):
        """Gets the execution_status of this TaskDetailsESDto.  # noqa: E501


        :return: The execution_status of this TaskDetailsESDto.  # noqa: E501
        :rtype: str
        """
        return self._execution_status

    @execution_status.setter
    def execution_status(self, execution_status):
        """Sets the execution_status of this TaskDetailsESDto.


        :param execution_status: The execution_status of this TaskDetailsESDto.  # noqa: E501
        :type: str
        """

        self._execution_status = execution_status

    @property
    def farmer_id(self):
        """Gets the farmer_id of this TaskDetailsESDto.  # noqa: E501


        :return: The farmer_id of this TaskDetailsESDto.  # noqa: E501
        :rtype: int
        """
        return self._farmer_id

    @farmer_id.setter
    def farmer_id(self, farmer_id):
        """Sets the farmer_id of this TaskDetailsESDto.


        :param farmer_id: The farmer_id of this TaskDetailsESDto.  # noqa: E501
        :type: int
        """

        self._farmer_id = farmer_id

    @property
    def farmer_name(self):
        """Gets the farmer_name of this TaskDetailsESDto.  # noqa: E501


        :return: The farmer_name of this TaskDetailsESDto.  # noqa: E501
        :rtype: str
        """
        return self._farmer_name

    @farmer_name.setter
    def farmer_name(self, farmer_name):
        """Sets the farmer_name of this TaskDetailsESDto.


        :param farmer_name: The farmer_name of this TaskDetailsESDto.  # noqa: E501
        :type: str
        """

        self._farmer_name = farmer_name

    @property
    def pinned(self):
        """Gets the pinned of this TaskDetailsESDto.  # noqa: E501


        :return: The pinned of this TaskDetailsESDto.  # noqa: E501
        :rtype: bool
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned):
        """Sets the pinned of this TaskDetailsESDto.


        :param pinned: The pinned of this TaskDetailsESDto.  # noqa: E501
        :type: bool
        """

        self._pinned = pinned

    @property
    def plan_type_name(self):
        """Gets the plan_type_name of this TaskDetailsESDto.  # noqa: E501


        :return: The plan_type_name of this TaskDetailsESDto.  # noqa: E501
        :rtype: str
        """
        return self._plan_type_name

    @plan_type_name.setter
    def plan_type_name(self, plan_type_name):
        """Sets the plan_type_name of this TaskDetailsESDto.


        :param plan_type_name: The plan_type_name of this TaskDetailsESDto.  # noqa: E501
        :type: str
        """

        self._plan_type_name = plan_type_name

    @property
    def start_date(self):
        """Gets the start_date of this TaskDetailsESDto.  # noqa: E501


        :return: The start_date of this TaskDetailsESDto.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TaskDetailsESDto.


        :param start_date: The start_date of this TaskDetailsESDto.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def task_id(self):
        """Gets the task_id of this TaskDetailsESDto.  # noqa: E501


        :return: The task_id of this TaskDetailsESDto.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskDetailsESDto.


        :param task_id: The task_id of this TaskDetailsESDto.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def task_name(self):
        """Gets the task_name of this TaskDetailsESDto.  # noqa: E501


        :return: The task_name of this TaskDetailsESDto.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this TaskDetailsESDto.


        :param task_name: The task_name of this TaskDetailsESDto.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskDetailsESDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskDetailsESDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
