# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BatchSampleDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_id': 'int',
        'client_id': 'str',
        'data': 'dict(str, object)',
        'description': 'str',
        'id': 'int',
        'name': 'str',
        'quantity': 'float',
        'sample_number': 'str'
    }

    attribute_map = {
        'batch_id': 'batchId',
        'client_id': 'clientId',
        'data': 'data',
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'quantity': 'quantity',
        'sample_number': 'sampleNumber'
    }

    def __init__(self, batch_id=None, client_id=None, data=None, description=None, id=None, name=None, quantity=None, sample_number=None):  # noqa: E501
        """BatchSampleDto - a model defined in Swagger"""  # noqa: E501
        self._batch_id = None
        self._client_id = None
        self._data = None
        self._description = None
        self._id = None
        self._name = None
        self._quantity = None
        self._sample_number = None
        self.discriminator = None
        self.batch_id = batch_id
        if client_id is not None:
            self.client_id = client_id
        if data is not None:
            self.data = data
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if quantity is not None:
            self.quantity = quantity
        if sample_number is not None:
            self.sample_number = sample_number

    @property
    def batch_id(self):
        """Gets the batch_id of this BatchSampleDto.  # noqa: E501


        :return: The batch_id of this BatchSampleDto.  # noqa: E501
        :rtype: int
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this BatchSampleDto.


        :param batch_id: The batch_id of this BatchSampleDto.  # noqa: E501
        :type: int
        """
        if batch_id is None:
            raise ValueError("Invalid value for `batch_id`, must not be `None`")  # noqa: E501

        self._batch_id = batch_id

    @property
    def client_id(self):
        """Gets the client_id of this BatchSampleDto.  # noqa: E501


        :return: The client_id of this BatchSampleDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this BatchSampleDto.


        :param client_id: The client_id of this BatchSampleDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def data(self):
        """Gets the data of this BatchSampleDto.  # noqa: E501


        :return: The data of this BatchSampleDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this BatchSampleDto.


        :param data: The data of this BatchSampleDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def description(self):
        """Gets the description of this BatchSampleDto.  # noqa: E501


        :return: The description of this BatchSampleDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BatchSampleDto.


        :param description: The description of this BatchSampleDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this BatchSampleDto.  # noqa: E501


        :return: The id of this BatchSampleDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BatchSampleDto.


        :param id: The id of this BatchSampleDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BatchSampleDto.  # noqa: E501


        :return: The name of this BatchSampleDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BatchSampleDto.


        :param name: The name of this BatchSampleDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def quantity(self):
        """Gets the quantity of this BatchSampleDto.  # noqa: E501


        :return: The quantity of this BatchSampleDto.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this BatchSampleDto.


        :param quantity: The quantity of this BatchSampleDto.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def sample_number(self):
        """Gets the sample_number of this BatchSampleDto.  # noqa: E501


        :return: The sample_number of this BatchSampleDto.  # noqa: E501
        :rtype: str
        """
        return self._sample_number

    @sample_number.setter
    def sample_number(self, sample_number):
        """Sets the sample_number of this BatchSampleDto.


        :param sample_number: The sample_number of this BatchSampleDto.  # noqa: E501
        :type: str
        """

        self._sample_number = sample_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchSampleDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchSampleDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
