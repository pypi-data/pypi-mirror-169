# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'AddressDto',
        'asset_status': 'str',
        'audited_area': 'Area',
        'client_id': 'str',
        'company_status': 'str',
        'data': 'dict(str, object)',
        'declared_area': 'Area',
        'deleted': 'bool',
        'id': 'int',
        'images': 'dict(str, object)',
        'irrigation_type': 'IrrigationTypeDto',
        'leased': 'str',
        'name': 'str',
        'name_counter': 'int',
        'owner_code': 'str',
        'owner_first_name': 'str',
        'owner_id': 'int',
        'soil_type': 'SoilTypeDto',
        'survey_number': 'str',
        'usable_area': 'Area'
    }

    attribute_map = {
        'address': 'address',
        'asset_status': 'assetStatus',
        'audited_area': 'auditedArea',
        'client_id': 'clientId',
        'company_status': 'companyStatus',
        'data': 'data',
        'declared_area': 'declaredArea',
        'deleted': 'deleted',
        'id': 'id',
        'images': 'images',
        'irrigation_type': 'irrigationType',
        'leased': 'leased',
        'name': 'name',
        'name_counter': 'nameCounter',
        'owner_code': 'ownerCode',
        'owner_first_name': 'ownerFirstName',
        'owner_id': 'ownerId',
        'soil_type': 'soilType',
        'survey_number': 'surveyNumber',
        'usable_area': 'usableArea'
    }

    def __init__(self, address=None, asset_status=None, audited_area=None, client_id=None, company_status=None, data=None, declared_area=None, deleted=None, id=None, images=None, irrigation_type=None, leased=None, name=None, name_counter=None, owner_code=None, owner_first_name=None, owner_id=None, soil_type=None, survey_number=None, usable_area=None):  # noqa: E501
        """AssetDto - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._asset_status = None
        self._audited_area = None
        self._client_id = None
        self._company_status = None
        self._data = None
        self._declared_area = None
        self._deleted = None
        self._id = None
        self._images = None
        self._irrigation_type = None
        self._leased = None
        self._name = None
        self._name_counter = None
        self._owner_code = None
        self._owner_first_name = None
        self._owner_id = None
        self._soil_type = None
        self._survey_number = None
        self._usable_area = None
        self.discriminator = None
        self.address = address
        if asset_status is not None:
            self.asset_status = asset_status
        if audited_area is not None:
            self.audited_area = audited_area
        if client_id is not None:
            self.client_id = client_id
        if company_status is not None:
            self.company_status = company_status
        if data is not None:
            self.data = data
        if declared_area is not None:
            self.declared_area = declared_area
        if deleted is not None:
            self.deleted = deleted
        if id is not None:
            self.id = id
        if images is not None:
            self.images = images
        if irrigation_type is not None:
            self.irrigation_type = irrigation_type
        if leased is not None:
            self.leased = leased
        if name is not None:
            self.name = name
        if name_counter is not None:
            self.name_counter = name_counter
        if owner_code is not None:
            self.owner_code = owner_code
        if owner_first_name is not None:
            self.owner_first_name = owner_first_name
        self.owner_id = owner_id
        if soil_type is not None:
            self.soil_type = soil_type
        if survey_number is not None:
            self.survey_number = survey_number
        if usable_area is not None:
            self.usable_area = usable_area

    @property
    def address(self):
        """Gets the address of this AssetDto.  # noqa: E501


        :return: The address of this AssetDto.  # noqa: E501
        :rtype: AddressDto
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AssetDto.


        :param address: The address of this AssetDto.  # noqa: E501
        :type: AddressDto
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def asset_status(self):
        """Gets the asset_status of this AssetDto.  # noqa: E501


        :return: The asset_status of this AssetDto.  # noqa: E501
        :rtype: str
        """
        return self._asset_status

    @asset_status.setter
    def asset_status(self, asset_status):
        """Sets the asset_status of this AssetDto.


        :param asset_status: The asset_status of this AssetDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["AVAILABLE", "UNAVAILABLE", "PARTIALLY_AVAILABLE"]  # noqa: E501
        if asset_status not in allowed_values:
            raise ValueError(
                "Invalid value for `asset_status` ({0}), must be one of {1}"  # noqa: E501
                .format(asset_status, allowed_values)
            )

        self._asset_status = asset_status

    @property
    def audited_area(self):
        """Gets the audited_area of this AssetDto.  # noqa: E501


        :return: The audited_area of this AssetDto.  # noqa: E501
        :rtype: Area
        """
        return self._audited_area

    @audited_area.setter
    def audited_area(self, audited_area):
        """Sets the audited_area of this AssetDto.


        :param audited_area: The audited_area of this AssetDto.  # noqa: E501
        :type: Area
        """

        self._audited_area = audited_area

    @property
    def client_id(self):
        """Gets the client_id of this AssetDto.  # noqa: E501


        :return: The client_id of this AssetDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AssetDto.


        :param client_id: The client_id of this AssetDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def company_status(self):
        """Gets the company_status of this AssetDto.  # noqa: E501


        :return: The company_status of this AssetDto.  # noqa: E501
        :rtype: str
        """
        return self._company_status

    @company_status.setter
    def company_status(self, company_status):
        """Sets the company_status of this AssetDto.


        :param company_status: The company_status of this AssetDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "TRIAL", "DEMO", "DISABLE", "DELETE"]  # noqa: E501
        if company_status not in allowed_values:
            raise ValueError(
                "Invalid value for `company_status` ({0}), must be one of {1}"  # noqa: E501
                .format(company_status, allowed_values)
            )

        self._company_status = company_status

    @property
    def data(self):
        """Gets the data of this AssetDto.  # noqa: E501


        :return: The data of this AssetDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AssetDto.


        :param data: The data of this AssetDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def declared_area(self):
        """Gets the declared_area of this AssetDto.  # noqa: E501


        :return: The declared_area of this AssetDto.  # noqa: E501
        :rtype: Area
        """
        return self._declared_area

    @declared_area.setter
    def declared_area(self, declared_area):
        """Sets the declared_area of this AssetDto.


        :param declared_area: The declared_area of this AssetDto.  # noqa: E501
        :type: Area
        """

        self._declared_area = declared_area

    @property
    def deleted(self):
        """Gets the deleted of this AssetDto.  # noqa: E501


        :return: The deleted of this AssetDto.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this AssetDto.


        :param deleted: The deleted of this AssetDto.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this AssetDto.  # noqa: E501


        :return: The id of this AssetDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetDto.


        :param id: The id of this AssetDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this AssetDto.  # noqa: E501


        :return: The images of this AssetDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this AssetDto.


        :param images: The images of this AssetDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._images = images

    @property
    def irrigation_type(self):
        """Gets the irrigation_type of this AssetDto.  # noqa: E501


        :return: The irrigation_type of this AssetDto.  # noqa: E501
        :rtype: IrrigationTypeDto
        """
        return self._irrigation_type

    @irrigation_type.setter
    def irrigation_type(self, irrigation_type):
        """Sets the irrigation_type of this AssetDto.


        :param irrigation_type: The irrigation_type of this AssetDto.  # noqa: E501
        :type: IrrigationTypeDto
        """

        self._irrigation_type = irrigation_type

    @property
    def leased(self):
        """Gets the leased of this AssetDto.  # noqa: E501


        :return: The leased of this AssetDto.  # noqa: E501
        :rtype: str
        """
        return self._leased

    @leased.setter
    def leased(self, leased):
        """Sets the leased of this AssetDto.


        :param leased: The leased of this AssetDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if leased not in allowed_values:
            raise ValueError(
                "Invalid value for `leased` ({0}), must be one of {1}"  # noqa: E501
                .format(leased, allowed_values)
            )

        self._leased = leased

    @property
    def name(self):
        """Gets the name of this AssetDto.  # noqa: E501


        :return: The name of this AssetDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetDto.


        :param name: The name of this AssetDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_counter(self):
        """Gets the name_counter of this AssetDto.  # noqa: E501


        :return: The name_counter of this AssetDto.  # noqa: E501
        :rtype: int
        """
        return self._name_counter

    @name_counter.setter
    def name_counter(self, name_counter):
        """Sets the name_counter of this AssetDto.


        :param name_counter: The name_counter of this AssetDto.  # noqa: E501
        :type: int
        """

        self._name_counter = name_counter

    @property
    def owner_code(self):
        """Gets the owner_code of this AssetDto.  # noqa: E501


        :return: The owner_code of this AssetDto.  # noqa: E501
        :rtype: str
        """
        return self._owner_code

    @owner_code.setter
    def owner_code(self, owner_code):
        """Sets the owner_code of this AssetDto.


        :param owner_code: The owner_code of this AssetDto.  # noqa: E501
        :type: str
        """

        self._owner_code = owner_code

    @property
    def owner_first_name(self):
        """Gets the owner_first_name of this AssetDto.  # noqa: E501


        :return: The owner_first_name of this AssetDto.  # noqa: E501
        :rtype: str
        """
        return self._owner_first_name

    @owner_first_name.setter
    def owner_first_name(self, owner_first_name):
        """Sets the owner_first_name of this AssetDto.


        :param owner_first_name: The owner_first_name of this AssetDto.  # noqa: E501
        :type: str
        """

        self._owner_first_name = owner_first_name

    @property
    def owner_id(self):
        """Gets the owner_id of this AssetDto.  # noqa: E501


        :return: The owner_id of this AssetDto.  # noqa: E501
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this AssetDto.


        :param owner_id: The owner_id of this AssetDto.  # noqa: E501
        :type: int
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")  # noqa: E501

        self._owner_id = owner_id

    @property
    def soil_type(self):
        """Gets the soil_type of this AssetDto.  # noqa: E501


        :return: The soil_type of this AssetDto.  # noqa: E501
        :rtype: SoilTypeDto
        """
        return self._soil_type

    @soil_type.setter
    def soil_type(self, soil_type):
        """Sets the soil_type of this AssetDto.


        :param soil_type: The soil_type of this AssetDto.  # noqa: E501
        :type: SoilTypeDto
        """

        self._soil_type = soil_type

    @property
    def survey_number(self):
        """Gets the survey_number of this AssetDto.  # noqa: E501


        :return: The survey_number of this AssetDto.  # noqa: E501
        :rtype: str
        """
        return self._survey_number

    @survey_number.setter
    def survey_number(self, survey_number):
        """Sets the survey_number of this AssetDto.


        :param survey_number: The survey_number of this AssetDto.  # noqa: E501
        :type: str
        """

        self._survey_number = survey_number

    @property
    def usable_area(self):
        """Gets the usable_area of this AssetDto.  # noqa: E501


        :return: The usable_area of this AssetDto.  # noqa: E501
        :rtype: Area
        """
        return self._usable_area

    @usable_area.setter
    def usable_area(self, usable_area):
        """Sets the usable_area of this AssetDto.


        :param usable_area: The usable_area of this AssetDto.  # noqa: E501
        :type: Area
        """

        self._usable_area = usable_area

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
