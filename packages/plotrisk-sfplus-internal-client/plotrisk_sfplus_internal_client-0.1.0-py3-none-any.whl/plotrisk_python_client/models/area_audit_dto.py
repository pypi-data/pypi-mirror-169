# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AreaAuditDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'administrative_area_level1': 'str',
        'administrative_area_level2': 'str',
        'administrative_area_level3': 'str',
        'administrative_area_level4': 'str',
        'administrative_area_level5': 'str',
        'country': 'str',
        'geo_info': 'dict(str, object)',
        'id': 'int',
        'latitude': 'float',
        'longitude': 'float',
        'name': 'str',
        'place_id': 'str',
        'sublocality_level1': 'str',
        'sublocality_level2': 'str',
        'sublocality_level3': 'str',
        'sublocality_level4': 'str',
        'sublocality_level5': 'str'
    }

    attribute_map = {
        'administrative_area_level1': 'administrativeAreaLevel1',
        'administrative_area_level2': 'administrativeAreaLevel2',
        'administrative_area_level3': 'administrativeAreaLevel3',
        'administrative_area_level4': 'administrativeAreaLevel4',
        'administrative_area_level5': 'administrativeAreaLevel5',
        'country': 'country',
        'geo_info': 'geoInfo',
        'id': 'id',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'name': 'name',
        'place_id': 'placeId',
        'sublocality_level1': 'sublocalityLevel1',
        'sublocality_level2': 'sublocalityLevel2',
        'sublocality_level3': 'sublocalityLevel3',
        'sublocality_level4': 'sublocalityLevel4',
        'sublocality_level5': 'sublocalityLevel5'
    }

    def __init__(self, administrative_area_level1=None, administrative_area_level2=None, administrative_area_level3=None, administrative_area_level4=None, administrative_area_level5=None, country=None, geo_info=None, id=None, latitude=None, longitude=None, name=None, place_id=None, sublocality_level1=None, sublocality_level2=None, sublocality_level3=None, sublocality_level4=None, sublocality_level5=None):  # noqa: E501
        """AreaAuditDto - a model defined in Swagger"""  # noqa: E501
        self._administrative_area_level1 = None
        self._administrative_area_level2 = None
        self._administrative_area_level3 = None
        self._administrative_area_level4 = None
        self._administrative_area_level5 = None
        self._country = None
        self._geo_info = None
        self._id = None
        self._latitude = None
        self._longitude = None
        self._name = None
        self._place_id = None
        self._sublocality_level1 = None
        self._sublocality_level2 = None
        self._sublocality_level3 = None
        self._sublocality_level4 = None
        self._sublocality_level5 = None
        self.discriminator = None
        if administrative_area_level1 is not None:
            self.administrative_area_level1 = administrative_area_level1
        if administrative_area_level2 is not None:
            self.administrative_area_level2 = administrative_area_level2
        if administrative_area_level3 is not None:
            self.administrative_area_level3 = administrative_area_level3
        if administrative_area_level4 is not None:
            self.administrative_area_level4 = administrative_area_level4
        if administrative_area_level5 is not None:
            self.administrative_area_level5 = administrative_area_level5
        if country is not None:
            self.country = country
        if geo_info is not None:
            self.geo_info = geo_info
        if id is not None:
            self.id = id
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if name is not None:
            self.name = name
        if place_id is not None:
            self.place_id = place_id
        if sublocality_level1 is not None:
            self.sublocality_level1 = sublocality_level1
        if sublocality_level2 is not None:
            self.sublocality_level2 = sublocality_level2
        if sublocality_level3 is not None:
            self.sublocality_level3 = sublocality_level3
        if sublocality_level4 is not None:
            self.sublocality_level4 = sublocality_level4
        if sublocality_level5 is not None:
            self.sublocality_level5 = sublocality_level5

    @property
    def administrative_area_level1(self):
        """Gets the administrative_area_level1 of this AreaAuditDto.  # noqa: E501


        :return: The administrative_area_level1 of this AreaAuditDto.  # noqa: E501
        :rtype: str
        """
        return self._administrative_area_level1

    @administrative_area_level1.setter
    def administrative_area_level1(self, administrative_area_level1):
        """Sets the administrative_area_level1 of this AreaAuditDto.


        :param administrative_area_level1: The administrative_area_level1 of this AreaAuditDto.  # noqa: E501
        :type: str
        """

        self._administrative_area_level1 = administrative_area_level1

    @property
    def administrative_area_level2(self):
        """Gets the administrative_area_level2 of this AreaAuditDto.  # noqa: E501


        :return: The administrative_area_level2 of this AreaAuditDto.  # noqa: E501
        :rtype: str
        """
        return self._administrative_area_level2

    @administrative_area_level2.setter
    def administrative_area_level2(self, administrative_area_level2):
        """Sets the administrative_area_level2 of this AreaAuditDto.


        :param administrative_area_level2: The administrative_area_level2 of this AreaAuditDto.  # noqa: E501
        :type: str
        """

        self._administrative_area_level2 = administrative_area_level2

    @property
    def administrative_area_level3(self):
        """Gets the administrative_area_level3 of this AreaAuditDto.  # noqa: E501


        :return: The administrative_area_level3 of this AreaAuditDto.  # noqa: E501
        :rtype: str
        """
        return self._administrative_area_level3

    @administrative_area_level3.setter
    def administrative_area_level3(self, administrative_area_level3):
        """Sets the administrative_area_level3 of this AreaAuditDto.


        :param administrative_area_level3: The administrative_area_level3 of this AreaAuditDto.  # noqa: E501
        :type: str
        """

        self._administrative_area_level3 = administrative_area_level3

    @property
    def administrative_area_level4(self):
        """Gets the administrative_area_level4 of this AreaAuditDto.  # noqa: E501


        :return: The administrative_area_level4 of this AreaAuditDto.  # noqa: E501
        :rtype: str
        """
        return self._administrative_area_level4

    @administrative_area_level4.setter
    def administrative_area_level4(self, administrative_area_level4):
        """Sets the administrative_area_level4 of this AreaAuditDto.


        :param administrative_area_level4: The administrative_area_level4 of this AreaAuditDto.  # noqa: E501
        :type: str
        """

        self._administrative_area_level4 = administrative_area_level4

    @property
    def administrative_area_level5(self):
        """Gets the administrative_area_level5 of this AreaAuditDto.  # noqa: E501


        :return: The administrative_area_level5 of this AreaAuditDto.  # noqa: E501
        :rtype: str
        """
        return self._administrative_area_level5

    @administrative_area_level5.setter
    def administrative_area_level5(self, administrative_area_level5):
        """Sets the administrative_area_level5 of this AreaAuditDto.


        :param administrative_area_level5: The administrative_area_level5 of this AreaAuditDto.  # noqa: E501
        :type: str
        """

        self._administrative_area_level5 = administrative_area_level5

    @property
    def country(self):
        """Gets the country of this AreaAuditDto.  # noqa: E501


        :return: The country of this AreaAuditDto.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AreaAuditDto.


        :param country: The country of this AreaAuditDto.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def geo_info(self):
        """Gets the geo_info of this AreaAuditDto.  # noqa: E501


        :return: The geo_info of this AreaAuditDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._geo_info

    @geo_info.setter
    def geo_info(self, geo_info):
        """Sets the geo_info of this AreaAuditDto.


        :param geo_info: The geo_info of this AreaAuditDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._geo_info = geo_info

    @property
    def id(self):
        """Gets the id of this AreaAuditDto.  # noqa: E501


        :return: The id of this AreaAuditDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AreaAuditDto.


        :param id: The id of this AreaAuditDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def latitude(self):
        """Gets the latitude of this AreaAuditDto.  # noqa: E501


        :return: The latitude of this AreaAuditDto.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this AreaAuditDto.


        :param latitude: The latitude of this AreaAuditDto.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this AreaAuditDto.  # noqa: E501


        :return: The longitude of this AreaAuditDto.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this AreaAuditDto.


        :param longitude: The longitude of this AreaAuditDto.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def name(self):
        """Gets the name of this AreaAuditDto.  # noqa: E501


        :return: The name of this AreaAuditDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AreaAuditDto.


        :param name: The name of this AreaAuditDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def place_id(self):
        """Gets the place_id of this AreaAuditDto.  # noqa: E501


        :return: The place_id of this AreaAuditDto.  # noqa: E501
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this AreaAuditDto.


        :param place_id: The place_id of this AreaAuditDto.  # noqa: E501
        :type: str
        """

        self._place_id = place_id

    @property
    def sublocality_level1(self):
        """Gets the sublocality_level1 of this AreaAuditDto.  # noqa: E501


        :return: The sublocality_level1 of this AreaAuditDto.  # noqa: E501
        :rtype: str
        """
        return self._sublocality_level1

    @sublocality_level1.setter
    def sublocality_level1(self, sublocality_level1):
        """Sets the sublocality_level1 of this AreaAuditDto.


        :param sublocality_level1: The sublocality_level1 of this AreaAuditDto.  # noqa: E501
        :type: str
        """

        self._sublocality_level1 = sublocality_level1

    @property
    def sublocality_level2(self):
        """Gets the sublocality_level2 of this AreaAuditDto.  # noqa: E501


        :return: The sublocality_level2 of this AreaAuditDto.  # noqa: E501
        :rtype: str
        """
        return self._sublocality_level2

    @sublocality_level2.setter
    def sublocality_level2(self, sublocality_level2):
        """Sets the sublocality_level2 of this AreaAuditDto.


        :param sublocality_level2: The sublocality_level2 of this AreaAuditDto.  # noqa: E501
        :type: str
        """

        self._sublocality_level2 = sublocality_level2

    @property
    def sublocality_level3(self):
        """Gets the sublocality_level3 of this AreaAuditDto.  # noqa: E501


        :return: The sublocality_level3 of this AreaAuditDto.  # noqa: E501
        :rtype: str
        """
        return self._sublocality_level3

    @sublocality_level3.setter
    def sublocality_level3(self, sublocality_level3):
        """Sets the sublocality_level3 of this AreaAuditDto.


        :param sublocality_level3: The sublocality_level3 of this AreaAuditDto.  # noqa: E501
        :type: str
        """

        self._sublocality_level3 = sublocality_level3

    @property
    def sublocality_level4(self):
        """Gets the sublocality_level4 of this AreaAuditDto.  # noqa: E501


        :return: The sublocality_level4 of this AreaAuditDto.  # noqa: E501
        :rtype: str
        """
        return self._sublocality_level4

    @sublocality_level4.setter
    def sublocality_level4(self, sublocality_level4):
        """Sets the sublocality_level4 of this AreaAuditDto.


        :param sublocality_level4: The sublocality_level4 of this AreaAuditDto.  # noqa: E501
        :type: str
        """

        self._sublocality_level4 = sublocality_level4

    @property
    def sublocality_level5(self):
        """Gets the sublocality_level5 of this AreaAuditDto.  # noqa: E501


        :return: The sublocality_level5 of this AreaAuditDto.  # noqa: E501
        :rtype: str
        """
        return self._sublocality_level5

    @sublocality_level5.setter
    def sublocality_level5(self, sublocality_level5):
        """Sets the sublocality_level5 of this AreaAuditDto.


        :param sublocality_level5: The sublocality_level5 of this AreaAuditDto.  # noqa: E501
        :type: str
        """

        self._sublocality_level5 = sublocality_level5

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AreaAuditDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AreaAuditDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
