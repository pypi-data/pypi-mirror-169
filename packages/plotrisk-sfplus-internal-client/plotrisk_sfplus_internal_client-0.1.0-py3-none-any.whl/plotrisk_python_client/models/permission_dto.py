# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PermissionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_resource': 'str',
        'api_scope': 'str',
        'behavior': 'str',
        'channel': 'str',
        'dependent_scope': 'str',
        'enabled': 'bool',
        'parent_id': 'str',
        'permission_id': 'str',
        'permission_name': 'str',
        'scope': 'str'
    }

    attribute_map = {
        'api_resource': 'apiResource',
        'api_scope': 'apiScope',
        'behavior': 'behavior',
        'channel': 'channel',
        'dependent_scope': 'dependentScope',
        'enabled': 'enabled',
        'parent_id': 'parentId',
        'permission_id': 'permissionId',
        'permission_name': 'permissionName',
        'scope': 'scope'
    }

    def __init__(self, api_resource=None, api_scope=None, behavior=None, channel=None, dependent_scope=None, enabled=None, parent_id=None, permission_id=None, permission_name=None, scope=None):  # noqa: E501
        """PermissionDto - a model defined in Swagger"""  # noqa: E501
        self._api_resource = None
        self._api_scope = None
        self._behavior = None
        self._channel = None
        self._dependent_scope = None
        self._enabled = None
        self._parent_id = None
        self._permission_id = None
        self._permission_name = None
        self._scope = None
        self.discriminator = None
        if api_resource is not None:
            self.api_resource = api_resource
        if api_scope is not None:
            self.api_scope = api_scope
        if behavior is not None:
            self.behavior = behavior
        if channel is not None:
            self.channel = channel
        if dependent_scope is not None:
            self.dependent_scope = dependent_scope
        if enabled is not None:
            self.enabled = enabled
        if parent_id is not None:
            self.parent_id = parent_id
        if permission_id is not None:
            self.permission_id = permission_id
        if permission_name is not None:
            self.permission_name = permission_name
        if scope is not None:
            self.scope = scope

    @property
    def api_resource(self):
        """Gets the api_resource of this PermissionDto.  # noqa: E501


        :return: The api_resource of this PermissionDto.  # noqa: E501
        :rtype: str
        """
        return self._api_resource

    @api_resource.setter
    def api_resource(self, api_resource):
        """Sets the api_resource of this PermissionDto.


        :param api_resource: The api_resource of this PermissionDto.  # noqa: E501
        :type: str
        """

        self._api_resource = api_resource

    @property
    def api_scope(self):
        """Gets the api_scope of this PermissionDto.  # noqa: E501


        :return: The api_scope of this PermissionDto.  # noqa: E501
        :rtype: str
        """
        return self._api_scope

    @api_scope.setter
    def api_scope(self, api_scope):
        """Sets the api_scope of this PermissionDto.


        :param api_scope: The api_scope of this PermissionDto.  # noqa: E501
        :type: str
        """

        self._api_scope = api_scope

    @property
    def behavior(self):
        """Gets the behavior of this PermissionDto.  # noqa: E501


        :return: The behavior of this PermissionDto.  # noqa: E501
        :rtype: str
        """
        return self._behavior

    @behavior.setter
    def behavior(self, behavior):
        """Sets the behavior of this PermissionDto.


        :param behavior: The behavior of this PermissionDto.  # noqa: E501
        :type: str
        """

        self._behavior = behavior

    @property
    def channel(self):
        """Gets the channel of this PermissionDto.  # noqa: E501


        :return: The channel of this PermissionDto.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this PermissionDto.


        :param channel: The channel of this PermissionDto.  # noqa: E501
        :type: str
        """

        self._channel = channel

    @property
    def dependent_scope(self):
        """Gets the dependent_scope of this PermissionDto.  # noqa: E501


        :return: The dependent_scope of this PermissionDto.  # noqa: E501
        :rtype: str
        """
        return self._dependent_scope

    @dependent_scope.setter
    def dependent_scope(self, dependent_scope):
        """Sets the dependent_scope of this PermissionDto.


        :param dependent_scope: The dependent_scope of this PermissionDto.  # noqa: E501
        :type: str
        """

        self._dependent_scope = dependent_scope

    @property
    def enabled(self):
        """Gets the enabled of this PermissionDto.  # noqa: E501


        :return: The enabled of this PermissionDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PermissionDto.


        :param enabled: The enabled of this PermissionDto.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def parent_id(self):
        """Gets the parent_id of this PermissionDto.  # noqa: E501


        :return: The parent_id of this PermissionDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this PermissionDto.


        :param parent_id: The parent_id of this PermissionDto.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def permission_id(self):
        """Gets the permission_id of this PermissionDto.  # noqa: E501


        :return: The permission_id of this PermissionDto.  # noqa: E501
        :rtype: str
        """
        return self._permission_id

    @permission_id.setter
    def permission_id(self, permission_id):
        """Sets the permission_id of this PermissionDto.


        :param permission_id: The permission_id of this PermissionDto.  # noqa: E501
        :type: str
        """

        self._permission_id = permission_id

    @property
    def permission_name(self):
        """Gets the permission_name of this PermissionDto.  # noqa: E501


        :return: The permission_name of this PermissionDto.  # noqa: E501
        :rtype: str
        """
        return self._permission_name

    @permission_name.setter
    def permission_name(self, permission_name):
        """Sets the permission_name of this PermissionDto.


        :param permission_name: The permission_name of this PermissionDto.  # noqa: E501
        :type: str
        """

        self._permission_name = permission_name

    @property
    def scope(self):
        """Gets the scope of this PermissionDto.  # noqa: E501


        :return: The scope of this PermissionDto.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this PermissionDto.


        :param scope: The scope of this PermissionDto.  # noqa: E501
        :type: str
        """

        self._scope = scope

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermissionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
