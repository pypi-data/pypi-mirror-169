# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewVarietyDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crop_id': 'int',
        'crop_name': 'str',
        'data': 'object',
        'expected_harvest_days': 'int',
        'id': 'int',
        'name': 'str',
        'parent_id': 'int'
    }

    attribute_map = {
        'crop_id': 'cropId',
        'crop_name': 'cropName',
        'data': 'data',
        'expected_harvest_days': 'expectedHarvestDays',
        'id': 'id',
        'name': 'name',
        'parent_id': 'parentId'
    }

    def __init__(self, crop_id=None, crop_name=None, data=None, expected_harvest_days=None, id=None, name=None, parent_id=None):  # noqa: E501
        """NewVarietyDto - a model defined in Swagger"""  # noqa: E501
        self._crop_id = None
        self._crop_name = None
        self._data = None
        self._expected_harvest_days = None
        self._id = None
        self._name = None
        self._parent_id = None
        self.discriminator = None
        if crop_id is not None:
            self.crop_id = crop_id
        if crop_name is not None:
            self.crop_name = crop_name
        if data is not None:
            self.data = data
        if expected_harvest_days is not None:
            self.expected_harvest_days = expected_harvest_days
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if parent_id is not None:
            self.parent_id = parent_id

    @property
    def crop_id(self):
        """Gets the crop_id of this NewVarietyDto.  # noqa: E501


        :return: The crop_id of this NewVarietyDto.  # noqa: E501
        :rtype: int
        """
        return self._crop_id

    @crop_id.setter
    def crop_id(self, crop_id):
        """Sets the crop_id of this NewVarietyDto.


        :param crop_id: The crop_id of this NewVarietyDto.  # noqa: E501
        :type: int
        """

        self._crop_id = crop_id

    @property
    def crop_name(self):
        """Gets the crop_name of this NewVarietyDto.  # noqa: E501


        :return: The crop_name of this NewVarietyDto.  # noqa: E501
        :rtype: str
        """
        return self._crop_name

    @crop_name.setter
    def crop_name(self, crop_name):
        """Sets the crop_name of this NewVarietyDto.


        :param crop_name: The crop_name of this NewVarietyDto.  # noqa: E501
        :type: str
        """

        self._crop_name = crop_name

    @property
    def data(self):
        """Gets the data of this NewVarietyDto.  # noqa: E501


        :return: The data of this NewVarietyDto.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this NewVarietyDto.


        :param data: The data of this NewVarietyDto.  # noqa: E501
        :type: object
        """

        self._data = data

    @property
    def expected_harvest_days(self):
        """Gets the expected_harvest_days of this NewVarietyDto.  # noqa: E501


        :return: The expected_harvest_days of this NewVarietyDto.  # noqa: E501
        :rtype: int
        """
        return self._expected_harvest_days

    @expected_harvest_days.setter
    def expected_harvest_days(self, expected_harvest_days):
        """Sets the expected_harvest_days of this NewVarietyDto.


        :param expected_harvest_days: The expected_harvest_days of this NewVarietyDto.  # noqa: E501
        :type: int
        """

        self._expected_harvest_days = expected_harvest_days

    @property
    def id(self):
        """Gets the id of this NewVarietyDto.  # noqa: E501


        :return: The id of this NewVarietyDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NewVarietyDto.


        :param id: The id of this NewVarietyDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this NewVarietyDto.  # noqa: E501


        :return: The name of this NewVarietyDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewVarietyDto.


        :param name: The name of this NewVarietyDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this NewVarietyDto.  # noqa: E501


        :return: The parent_id of this NewVarietyDto.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this NewVarietyDto.


        :param parent_id: The parent_id of this NewVarietyDto.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewVarietyDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewVarietyDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
