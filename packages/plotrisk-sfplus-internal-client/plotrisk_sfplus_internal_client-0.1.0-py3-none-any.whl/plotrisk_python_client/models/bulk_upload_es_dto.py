# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulkUploadESDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_attribute': 'str',
        'completed_task_counts': 'int',
        'linked_crop_varieties': 'Number',
        'number_of_plots': 'Number',
        'plan_type_id': 'int',
        'plan_type_name': 'str',
        'project_name': 'str',
        'task_count': 'dict(str, Number)'
    }

    attribute_map = {
        'column_attribute': 'columnAttribute',
        'completed_task_counts': 'completedTaskCounts',
        'linked_crop_varieties': 'linkedCropVarieties',
        'number_of_plots': 'numberOfPlots',
        'plan_type_id': 'planTypeId',
        'plan_type_name': 'planTypeName',
        'project_name': 'projectName',
        'task_count': 'taskCount'
    }

    def __init__(self, column_attribute=None, completed_task_counts=None, linked_crop_varieties=None, number_of_plots=None, plan_type_id=None, plan_type_name=None, project_name=None, task_count=None):  # noqa: E501
        """BulkUploadESDto - a model defined in Swagger"""  # noqa: E501
        self._column_attribute = None
        self._completed_task_counts = None
        self._linked_crop_varieties = None
        self._number_of_plots = None
        self._plan_type_id = None
        self._plan_type_name = None
        self._project_name = None
        self._task_count = None
        self.discriminator = None
        if column_attribute is not None:
            self.column_attribute = column_attribute
        if completed_task_counts is not None:
            self.completed_task_counts = completed_task_counts
        if linked_crop_varieties is not None:
            self.linked_crop_varieties = linked_crop_varieties
        if number_of_plots is not None:
            self.number_of_plots = number_of_plots
        if plan_type_id is not None:
            self.plan_type_id = plan_type_id
        if plan_type_name is not None:
            self.plan_type_name = plan_type_name
        if project_name is not None:
            self.project_name = project_name
        if task_count is not None:
            self.task_count = task_count

    @property
    def column_attribute(self):
        """Gets the column_attribute of this BulkUploadESDto.  # noqa: E501


        :return: The column_attribute of this BulkUploadESDto.  # noqa: E501
        :rtype: str
        """
        return self._column_attribute

    @column_attribute.setter
    def column_attribute(self, column_attribute):
        """Sets the column_attribute of this BulkUploadESDto.


        :param column_attribute: The column_attribute of this BulkUploadESDto.  # noqa: E501
        :type: str
        """

        self._column_attribute = column_attribute

    @property
    def completed_task_counts(self):
        """Gets the completed_task_counts of this BulkUploadESDto.  # noqa: E501


        :return: The completed_task_counts of this BulkUploadESDto.  # noqa: E501
        :rtype: int
        """
        return self._completed_task_counts

    @completed_task_counts.setter
    def completed_task_counts(self, completed_task_counts):
        """Sets the completed_task_counts of this BulkUploadESDto.


        :param completed_task_counts: The completed_task_counts of this BulkUploadESDto.  # noqa: E501
        :type: int
        """

        self._completed_task_counts = completed_task_counts

    @property
    def linked_crop_varieties(self):
        """Gets the linked_crop_varieties of this BulkUploadESDto.  # noqa: E501


        :return: The linked_crop_varieties of this BulkUploadESDto.  # noqa: E501
        :rtype: Number
        """
        return self._linked_crop_varieties

    @linked_crop_varieties.setter
    def linked_crop_varieties(self, linked_crop_varieties):
        """Sets the linked_crop_varieties of this BulkUploadESDto.


        :param linked_crop_varieties: The linked_crop_varieties of this BulkUploadESDto.  # noqa: E501
        :type: Number
        """

        self._linked_crop_varieties = linked_crop_varieties

    @property
    def number_of_plots(self):
        """Gets the number_of_plots of this BulkUploadESDto.  # noqa: E501


        :return: The number_of_plots of this BulkUploadESDto.  # noqa: E501
        :rtype: Number
        """
        return self._number_of_plots

    @number_of_plots.setter
    def number_of_plots(self, number_of_plots):
        """Sets the number_of_plots of this BulkUploadESDto.


        :param number_of_plots: The number_of_plots of this BulkUploadESDto.  # noqa: E501
        :type: Number
        """

        self._number_of_plots = number_of_plots

    @property
    def plan_type_id(self):
        """Gets the plan_type_id of this BulkUploadESDto.  # noqa: E501


        :return: The plan_type_id of this BulkUploadESDto.  # noqa: E501
        :rtype: int
        """
        return self._plan_type_id

    @plan_type_id.setter
    def plan_type_id(self, plan_type_id):
        """Sets the plan_type_id of this BulkUploadESDto.


        :param plan_type_id: The plan_type_id of this BulkUploadESDto.  # noqa: E501
        :type: int
        """

        self._plan_type_id = plan_type_id

    @property
    def plan_type_name(self):
        """Gets the plan_type_name of this BulkUploadESDto.  # noqa: E501


        :return: The plan_type_name of this BulkUploadESDto.  # noqa: E501
        :rtype: str
        """
        return self._plan_type_name

    @plan_type_name.setter
    def plan_type_name(self, plan_type_name):
        """Sets the plan_type_name of this BulkUploadESDto.


        :param plan_type_name: The plan_type_name of this BulkUploadESDto.  # noqa: E501
        :type: str
        """

        self._plan_type_name = plan_type_name

    @property
    def project_name(self):
        """Gets the project_name of this BulkUploadESDto.  # noqa: E501


        :return: The project_name of this BulkUploadESDto.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this BulkUploadESDto.


        :param project_name: The project_name of this BulkUploadESDto.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def task_count(self):
        """Gets the task_count of this BulkUploadESDto.  # noqa: E501


        :return: The task_count of this BulkUploadESDto.  # noqa: E501
        :rtype: dict(str, Number)
        """
        return self._task_count

    @task_count.setter
    def task_count(self, task_count):
        """Sets the task_count of this BulkUploadESDto.


        :param task_count: The task_count of this BulkUploadESDto.  # noqa: E501
        :type: dict(str, Number)
        """

        self._task_count = task_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkUploadESDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkUploadESDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
