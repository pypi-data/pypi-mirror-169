# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocaleDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code1': 'str',
        'code2': 'str',
        'i_so_country_code': 'str',
        'i_so_language_code': 'str',
        'id': 'int',
        'name': 'str'
    }

    attribute_map = {
        'code1': 'code1',
        'code2': 'code2',
        'i_so_country_code': 'iSOCountryCode',
        'i_so_language_code': 'iSOLanguageCode',
        'id': 'id',
        'name': 'name'
    }

    def __init__(self, code1=None, code2=None, i_so_country_code=None, i_so_language_code=None, id=None, name=None):  # noqa: E501
        """LocaleDto - a model defined in Swagger"""  # noqa: E501
        self._code1 = None
        self._code2 = None
        self._i_so_country_code = None
        self._i_so_language_code = None
        self._id = None
        self._name = None
        self.discriminator = None
        if code1 is not None:
            self.code1 = code1
        if code2 is not None:
            self.code2 = code2
        if i_so_country_code is not None:
            self.i_so_country_code = i_so_country_code
        if i_so_language_code is not None:
            self.i_so_language_code = i_so_language_code
        if id is not None:
            self.id = id
        self.name = name

    @property
    def code1(self):
        """Gets the code1 of this LocaleDto.  # noqa: E501


        :return: The code1 of this LocaleDto.  # noqa: E501
        :rtype: str
        """
        return self._code1

    @code1.setter
    def code1(self, code1):
        """Sets the code1 of this LocaleDto.


        :param code1: The code1 of this LocaleDto.  # noqa: E501
        :type: str
        """

        self._code1 = code1

    @property
    def code2(self):
        """Gets the code2 of this LocaleDto.  # noqa: E501


        :return: The code2 of this LocaleDto.  # noqa: E501
        :rtype: str
        """
        return self._code2

    @code2.setter
    def code2(self, code2):
        """Sets the code2 of this LocaleDto.


        :param code2: The code2 of this LocaleDto.  # noqa: E501
        :type: str
        """

        self._code2 = code2

    @property
    def i_so_country_code(self):
        """Gets the i_so_country_code of this LocaleDto.  # noqa: E501


        :return: The i_so_country_code of this LocaleDto.  # noqa: E501
        :rtype: str
        """
        return self._i_so_country_code

    @i_so_country_code.setter
    def i_so_country_code(self, i_so_country_code):
        """Sets the i_so_country_code of this LocaleDto.


        :param i_so_country_code: The i_so_country_code of this LocaleDto.  # noqa: E501
        :type: str
        """

        self._i_so_country_code = i_so_country_code

    @property
    def i_so_language_code(self):
        """Gets the i_so_language_code of this LocaleDto.  # noqa: E501


        :return: The i_so_language_code of this LocaleDto.  # noqa: E501
        :rtype: str
        """
        return self._i_so_language_code

    @i_so_language_code.setter
    def i_so_language_code(self, i_so_language_code):
        """Sets the i_so_language_code of this LocaleDto.


        :param i_so_language_code: The i_so_language_code of this LocaleDto.  # noqa: E501
        :type: str
        """

        self._i_so_language_code = i_so_language_code

    @property
    def id(self):
        """Gets the id of this LocaleDto.  # noqa: E501


        :return: The id of this LocaleDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LocaleDto.


        :param id: The id of this LocaleDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LocaleDto.  # noqa: E501


        :return: The name of this LocaleDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocaleDto.


        :param name: The name of this LocaleDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocaleDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocaleDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
