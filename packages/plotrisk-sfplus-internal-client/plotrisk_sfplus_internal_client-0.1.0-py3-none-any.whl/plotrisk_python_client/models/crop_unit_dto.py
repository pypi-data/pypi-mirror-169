# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CropUnitDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual_crop_stage_id': 'int',
        'actual_crop_stage_name': 'str',
        'area_status': 'str',
        'audited_area': 'Area',
        'client_id': 'str',
        'crop_audited': 'bool',
        'crop_id': 'int',
        'crop_name': 'str',
        'cropex_crop_code': 'str',
        'croppable_area_id': 'int',
        'croppable_area_name': 'str',
        'data': 'dict(str, object)',
        'deleted': 'bool',
        'expected_crop_stage_id': 'int',
        'expected_crop_stage_name': 'str',
        'expected_harvest_date': 'datetime',
        'expected_quantity': 'float',
        'has_task_started': 'bool',
        'id': 'int',
        'land_id': 'int',
        'land_name': 'str',
        'name': 'str',
        'organic': 'bool',
        'owner_first_name': 'str',
        'owner_id': 'int',
        'project_id': 'int',
        'project_name': 'str',
        'pruning_date': 'datetime',
        'reason_id': 'int',
        'reason_name': 'str',
        'received_harvest': 'float',
        'sowing_date': 'datetime',
        'status': 'str',
        'tasks': 'list[TaskDto]',
        'usable_area': 'Area',
        'variety_id': 'int',
        'variety_name': 'str'
    }

    attribute_map = {
        'actual_crop_stage_id': 'actualCropStageId',
        'actual_crop_stage_name': 'actualCropStageName',
        'area_status': 'areaStatus',
        'audited_area': 'auditedArea',
        'client_id': 'clientId',
        'crop_audited': 'cropAudited',
        'crop_id': 'cropId',
        'crop_name': 'cropName',
        'cropex_crop_code': 'cropexCropCode',
        'croppable_area_id': 'croppableAreaId',
        'croppable_area_name': 'croppableAreaName',
        'data': 'data',
        'deleted': 'deleted',
        'expected_crop_stage_id': 'expectedCropStageId',
        'expected_crop_stage_name': 'expectedCropStageName',
        'expected_harvest_date': 'expectedHarvestDate',
        'expected_quantity': 'expectedQuantity',
        'has_task_started': 'hasTaskStarted',
        'id': 'id',
        'land_id': 'landId',
        'land_name': 'landName',
        'name': 'name',
        'organic': 'organic',
        'owner_first_name': 'ownerFirstName',
        'owner_id': 'ownerId',
        'project_id': 'projectId',
        'project_name': 'projectName',
        'pruning_date': 'pruningDate',
        'reason_id': 'reasonId',
        'reason_name': 'reasonName',
        'received_harvest': 'receivedHarvest',
        'sowing_date': 'sowingDate',
        'status': 'status',
        'tasks': 'tasks',
        'usable_area': 'usableArea',
        'variety_id': 'varietyId',
        'variety_name': 'varietyName'
    }

    def __init__(self, actual_crop_stage_id=None, actual_crop_stage_name=None, area_status=None, audited_area=None, client_id=None, crop_audited=None, crop_id=None, crop_name=None, cropex_crop_code=None, croppable_area_id=None, croppable_area_name=None, data=None, deleted=None, expected_crop_stage_id=None, expected_crop_stage_name=None, expected_harvest_date=None, expected_quantity=None, has_task_started=None, id=None, land_id=None, land_name=None, name=None, organic=None, owner_first_name=None, owner_id=None, project_id=None, project_name=None, pruning_date=None, reason_id=None, reason_name=None, received_harvest=None, sowing_date=None, status=None, tasks=None, usable_area=None, variety_id=None, variety_name=None):  # noqa: E501
        """CropUnitDto - a model defined in Swagger"""  # noqa: E501
        self._actual_crop_stage_id = None
        self._actual_crop_stage_name = None
        self._area_status = None
        self._audited_area = None
        self._client_id = None
        self._crop_audited = None
        self._crop_id = None
        self._crop_name = None
        self._cropex_crop_code = None
        self._croppable_area_id = None
        self._croppable_area_name = None
        self._data = None
        self._deleted = None
        self._expected_crop_stage_id = None
        self._expected_crop_stage_name = None
        self._expected_harvest_date = None
        self._expected_quantity = None
        self._has_task_started = None
        self._id = None
        self._land_id = None
        self._land_name = None
        self._name = None
        self._organic = None
        self._owner_first_name = None
        self._owner_id = None
        self._project_id = None
        self._project_name = None
        self._pruning_date = None
        self._reason_id = None
        self._reason_name = None
        self._received_harvest = None
        self._sowing_date = None
        self._status = None
        self._tasks = None
        self._usable_area = None
        self._variety_id = None
        self._variety_name = None
        self.discriminator = None
        if actual_crop_stage_id is not None:
            self.actual_crop_stage_id = actual_crop_stage_id
        if actual_crop_stage_name is not None:
            self.actual_crop_stage_name = actual_crop_stage_name
        if area_status is not None:
            self.area_status = area_status
        if audited_area is not None:
            self.audited_area = audited_area
        if client_id is not None:
            self.client_id = client_id
        if crop_audited is not None:
            self.crop_audited = crop_audited
        if crop_id is not None:
            self.crop_id = crop_id
        if crop_name is not None:
            self.crop_name = crop_name
        if cropex_crop_code is not None:
            self.cropex_crop_code = cropex_crop_code
        self.croppable_area_id = croppable_area_id
        if croppable_area_name is not None:
            self.croppable_area_name = croppable_area_name
        if data is not None:
            self.data = data
        if deleted is not None:
            self.deleted = deleted
        if expected_crop_stage_id is not None:
            self.expected_crop_stage_id = expected_crop_stage_id
        if expected_crop_stage_name is not None:
            self.expected_crop_stage_name = expected_crop_stage_name
        if expected_harvest_date is not None:
            self.expected_harvest_date = expected_harvest_date
        if expected_quantity is not None:
            self.expected_quantity = expected_quantity
        if has_task_started is not None:
            self.has_task_started = has_task_started
        if id is not None:
            self.id = id
        if land_id is not None:
            self.land_id = land_id
        if land_name is not None:
            self.land_name = land_name
        if name is not None:
            self.name = name
        if organic is not None:
            self.organic = organic
        if owner_first_name is not None:
            self.owner_first_name = owner_first_name
        if owner_id is not None:
            self.owner_id = owner_id
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if pruning_date is not None:
            self.pruning_date = pruning_date
        if reason_id is not None:
            self.reason_id = reason_id
        if reason_name is not None:
            self.reason_name = reason_name
        if received_harvest is not None:
            self.received_harvest = received_harvest
        if sowing_date is not None:
            self.sowing_date = sowing_date
        if status is not None:
            self.status = status
        if tasks is not None:
            self.tasks = tasks
        if usable_area is not None:
            self.usable_area = usable_area
        if variety_id is not None:
            self.variety_id = variety_id
        if variety_name is not None:
            self.variety_name = variety_name

    @property
    def actual_crop_stage_id(self):
        """Gets the actual_crop_stage_id of this CropUnitDto.  # noqa: E501


        :return: The actual_crop_stage_id of this CropUnitDto.  # noqa: E501
        :rtype: int
        """
        return self._actual_crop_stage_id

    @actual_crop_stage_id.setter
    def actual_crop_stage_id(self, actual_crop_stage_id):
        """Sets the actual_crop_stage_id of this CropUnitDto.


        :param actual_crop_stage_id: The actual_crop_stage_id of this CropUnitDto.  # noqa: E501
        :type: int
        """

        self._actual_crop_stage_id = actual_crop_stage_id

    @property
    def actual_crop_stage_name(self):
        """Gets the actual_crop_stage_name of this CropUnitDto.  # noqa: E501


        :return: The actual_crop_stage_name of this CropUnitDto.  # noqa: E501
        :rtype: str
        """
        return self._actual_crop_stage_name

    @actual_crop_stage_name.setter
    def actual_crop_stage_name(self, actual_crop_stage_name):
        """Sets the actual_crop_stage_name of this CropUnitDto.


        :param actual_crop_stage_name: The actual_crop_stage_name of this CropUnitDto.  # noqa: E501
        :type: str
        """

        self._actual_crop_stage_name = actual_crop_stage_name

    @property
    def area_status(self):
        """Gets the area_status of this CropUnitDto.  # noqa: E501


        :return: The area_status of this CropUnitDto.  # noqa: E501
        :rtype: str
        """
        return self._area_status

    @area_status.setter
    def area_status(self, area_status):
        """Sets the area_status of this CropUnitDto.


        :param area_status: The area_status of this CropUnitDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACCEPTED", "PENDING", "REJECTED", "COMPLETED", "COMPLETE_LOSS", "CLOSED"]  # noqa: E501
        if area_status not in allowed_values:
            raise ValueError(
                "Invalid value for `area_status` ({0}), must be one of {1}"  # noqa: E501
                .format(area_status, allowed_values)
            )

        self._area_status = area_status

    @property
    def audited_area(self):
        """Gets the audited_area of this CropUnitDto.  # noqa: E501


        :return: The audited_area of this CropUnitDto.  # noqa: E501
        :rtype: Area
        """
        return self._audited_area

    @audited_area.setter
    def audited_area(self, audited_area):
        """Sets the audited_area of this CropUnitDto.


        :param audited_area: The audited_area of this CropUnitDto.  # noqa: E501
        :type: Area
        """

        self._audited_area = audited_area

    @property
    def client_id(self):
        """Gets the client_id of this CropUnitDto.  # noqa: E501


        :return: The client_id of this CropUnitDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CropUnitDto.


        :param client_id: The client_id of this CropUnitDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def crop_audited(self):
        """Gets the crop_audited of this CropUnitDto.  # noqa: E501


        :return: The crop_audited of this CropUnitDto.  # noqa: E501
        :rtype: bool
        """
        return self._crop_audited

    @crop_audited.setter
    def crop_audited(self, crop_audited):
        """Sets the crop_audited of this CropUnitDto.


        :param crop_audited: The crop_audited of this CropUnitDto.  # noqa: E501
        :type: bool
        """

        self._crop_audited = crop_audited

    @property
    def crop_id(self):
        """Gets the crop_id of this CropUnitDto.  # noqa: E501


        :return: The crop_id of this CropUnitDto.  # noqa: E501
        :rtype: int
        """
        return self._crop_id

    @crop_id.setter
    def crop_id(self, crop_id):
        """Sets the crop_id of this CropUnitDto.


        :param crop_id: The crop_id of this CropUnitDto.  # noqa: E501
        :type: int
        """

        self._crop_id = crop_id

    @property
    def crop_name(self):
        """Gets the crop_name of this CropUnitDto.  # noqa: E501


        :return: The crop_name of this CropUnitDto.  # noqa: E501
        :rtype: str
        """
        return self._crop_name

    @crop_name.setter
    def crop_name(self, crop_name):
        """Sets the crop_name of this CropUnitDto.


        :param crop_name: The crop_name of this CropUnitDto.  # noqa: E501
        :type: str
        """

        self._crop_name = crop_name

    @property
    def cropex_crop_code(self):
        """Gets the cropex_crop_code of this CropUnitDto.  # noqa: E501


        :return: The cropex_crop_code of this CropUnitDto.  # noqa: E501
        :rtype: str
        """
        return self._cropex_crop_code

    @cropex_crop_code.setter
    def cropex_crop_code(self, cropex_crop_code):
        """Sets the cropex_crop_code of this CropUnitDto.


        :param cropex_crop_code: The cropex_crop_code of this CropUnitDto.  # noqa: E501
        :type: str
        """

        self._cropex_crop_code = cropex_crop_code

    @property
    def croppable_area_id(self):
        """Gets the croppable_area_id of this CropUnitDto.  # noqa: E501


        :return: The croppable_area_id of this CropUnitDto.  # noqa: E501
        :rtype: int
        """
        return self._croppable_area_id

    @croppable_area_id.setter
    def croppable_area_id(self, croppable_area_id):
        """Sets the croppable_area_id of this CropUnitDto.


        :param croppable_area_id: The croppable_area_id of this CropUnitDto.  # noqa: E501
        :type: int
        """
        if croppable_area_id is None:
            raise ValueError("Invalid value for `croppable_area_id`, must not be `None`")  # noqa: E501

        self._croppable_area_id = croppable_area_id

    @property
    def croppable_area_name(self):
        """Gets the croppable_area_name of this CropUnitDto.  # noqa: E501


        :return: The croppable_area_name of this CropUnitDto.  # noqa: E501
        :rtype: str
        """
        return self._croppable_area_name

    @croppable_area_name.setter
    def croppable_area_name(self, croppable_area_name):
        """Sets the croppable_area_name of this CropUnitDto.


        :param croppable_area_name: The croppable_area_name of this CropUnitDto.  # noqa: E501
        :type: str
        """

        self._croppable_area_name = croppable_area_name

    @property
    def data(self):
        """Gets the data of this CropUnitDto.  # noqa: E501


        :return: The data of this CropUnitDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CropUnitDto.


        :param data: The data of this CropUnitDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def deleted(self):
        """Gets the deleted of this CropUnitDto.  # noqa: E501


        :return: The deleted of this CropUnitDto.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this CropUnitDto.


        :param deleted: The deleted of this CropUnitDto.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def expected_crop_stage_id(self):
        """Gets the expected_crop_stage_id of this CropUnitDto.  # noqa: E501


        :return: The expected_crop_stage_id of this CropUnitDto.  # noqa: E501
        :rtype: int
        """
        return self._expected_crop_stage_id

    @expected_crop_stage_id.setter
    def expected_crop_stage_id(self, expected_crop_stage_id):
        """Sets the expected_crop_stage_id of this CropUnitDto.


        :param expected_crop_stage_id: The expected_crop_stage_id of this CropUnitDto.  # noqa: E501
        :type: int
        """

        self._expected_crop_stage_id = expected_crop_stage_id

    @property
    def expected_crop_stage_name(self):
        """Gets the expected_crop_stage_name of this CropUnitDto.  # noqa: E501


        :return: The expected_crop_stage_name of this CropUnitDto.  # noqa: E501
        :rtype: str
        """
        return self._expected_crop_stage_name

    @expected_crop_stage_name.setter
    def expected_crop_stage_name(self, expected_crop_stage_name):
        """Sets the expected_crop_stage_name of this CropUnitDto.


        :param expected_crop_stage_name: The expected_crop_stage_name of this CropUnitDto.  # noqa: E501
        :type: str
        """

        self._expected_crop_stage_name = expected_crop_stage_name

    @property
    def expected_harvest_date(self):
        """Gets the expected_harvest_date of this CropUnitDto.  # noqa: E501


        :return: The expected_harvest_date of this CropUnitDto.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_harvest_date

    @expected_harvest_date.setter
    def expected_harvest_date(self, expected_harvest_date):
        """Sets the expected_harvest_date of this CropUnitDto.


        :param expected_harvest_date: The expected_harvest_date of this CropUnitDto.  # noqa: E501
        :type: datetime
        """

        self._expected_harvest_date = expected_harvest_date

    @property
    def expected_quantity(self):
        """Gets the expected_quantity of this CropUnitDto.  # noqa: E501


        :return: The expected_quantity of this CropUnitDto.  # noqa: E501
        :rtype: float
        """
        return self._expected_quantity

    @expected_quantity.setter
    def expected_quantity(self, expected_quantity):
        """Sets the expected_quantity of this CropUnitDto.


        :param expected_quantity: The expected_quantity of this CropUnitDto.  # noqa: E501
        :type: float
        """

        self._expected_quantity = expected_quantity

    @property
    def has_task_started(self):
        """Gets the has_task_started of this CropUnitDto.  # noqa: E501


        :return: The has_task_started of this CropUnitDto.  # noqa: E501
        :rtype: bool
        """
        return self._has_task_started

    @has_task_started.setter
    def has_task_started(self, has_task_started):
        """Sets the has_task_started of this CropUnitDto.


        :param has_task_started: The has_task_started of this CropUnitDto.  # noqa: E501
        :type: bool
        """

        self._has_task_started = has_task_started

    @property
    def id(self):
        """Gets the id of this CropUnitDto.  # noqa: E501


        :return: The id of this CropUnitDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CropUnitDto.


        :param id: The id of this CropUnitDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def land_id(self):
        """Gets the land_id of this CropUnitDto.  # noqa: E501


        :return: The land_id of this CropUnitDto.  # noqa: E501
        :rtype: int
        """
        return self._land_id

    @land_id.setter
    def land_id(self, land_id):
        """Sets the land_id of this CropUnitDto.


        :param land_id: The land_id of this CropUnitDto.  # noqa: E501
        :type: int
        """

        self._land_id = land_id

    @property
    def land_name(self):
        """Gets the land_name of this CropUnitDto.  # noqa: E501


        :return: The land_name of this CropUnitDto.  # noqa: E501
        :rtype: str
        """
        return self._land_name

    @land_name.setter
    def land_name(self, land_name):
        """Sets the land_name of this CropUnitDto.


        :param land_name: The land_name of this CropUnitDto.  # noqa: E501
        :type: str
        """

        self._land_name = land_name

    @property
    def name(self):
        """Gets the name of this CropUnitDto.  # noqa: E501


        :return: The name of this CropUnitDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CropUnitDto.


        :param name: The name of this CropUnitDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def organic(self):
        """Gets the organic of this CropUnitDto.  # noqa: E501


        :return: The organic of this CropUnitDto.  # noqa: E501
        :rtype: bool
        """
        return self._organic

    @organic.setter
    def organic(self, organic):
        """Sets the organic of this CropUnitDto.


        :param organic: The organic of this CropUnitDto.  # noqa: E501
        :type: bool
        """

        self._organic = organic

    @property
    def owner_first_name(self):
        """Gets the owner_first_name of this CropUnitDto.  # noqa: E501


        :return: The owner_first_name of this CropUnitDto.  # noqa: E501
        :rtype: str
        """
        return self._owner_first_name

    @owner_first_name.setter
    def owner_first_name(self, owner_first_name):
        """Sets the owner_first_name of this CropUnitDto.


        :param owner_first_name: The owner_first_name of this CropUnitDto.  # noqa: E501
        :type: str
        """

        self._owner_first_name = owner_first_name

    @property
    def owner_id(self):
        """Gets the owner_id of this CropUnitDto.  # noqa: E501


        :return: The owner_id of this CropUnitDto.  # noqa: E501
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this CropUnitDto.


        :param owner_id: The owner_id of this CropUnitDto.  # noqa: E501
        :type: int
        """

        self._owner_id = owner_id

    @property
    def project_id(self):
        """Gets the project_id of this CropUnitDto.  # noqa: E501


        :return: The project_id of this CropUnitDto.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this CropUnitDto.


        :param project_id: The project_id of this CropUnitDto.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this CropUnitDto.  # noqa: E501


        :return: The project_name of this CropUnitDto.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this CropUnitDto.


        :param project_name: The project_name of this CropUnitDto.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def pruning_date(self):
        """Gets the pruning_date of this CropUnitDto.  # noqa: E501


        :return: The pruning_date of this CropUnitDto.  # noqa: E501
        :rtype: datetime
        """
        return self._pruning_date

    @pruning_date.setter
    def pruning_date(self, pruning_date):
        """Sets the pruning_date of this CropUnitDto.


        :param pruning_date: The pruning_date of this CropUnitDto.  # noqa: E501
        :type: datetime
        """

        self._pruning_date = pruning_date

    @property
    def reason_id(self):
        """Gets the reason_id of this CropUnitDto.  # noqa: E501


        :return: The reason_id of this CropUnitDto.  # noqa: E501
        :rtype: int
        """
        return self._reason_id

    @reason_id.setter
    def reason_id(self, reason_id):
        """Sets the reason_id of this CropUnitDto.


        :param reason_id: The reason_id of this CropUnitDto.  # noqa: E501
        :type: int
        """

        self._reason_id = reason_id

    @property
    def reason_name(self):
        """Gets the reason_name of this CropUnitDto.  # noqa: E501


        :return: The reason_name of this CropUnitDto.  # noqa: E501
        :rtype: str
        """
        return self._reason_name

    @reason_name.setter
    def reason_name(self, reason_name):
        """Sets the reason_name of this CropUnitDto.


        :param reason_name: The reason_name of this CropUnitDto.  # noqa: E501
        :type: str
        """

        self._reason_name = reason_name

    @property
    def received_harvest(self):
        """Gets the received_harvest of this CropUnitDto.  # noqa: E501


        :return: The received_harvest of this CropUnitDto.  # noqa: E501
        :rtype: float
        """
        return self._received_harvest

    @received_harvest.setter
    def received_harvest(self, received_harvest):
        """Sets the received_harvest of this CropUnitDto.


        :param received_harvest: The received_harvest of this CropUnitDto.  # noqa: E501
        :type: float
        """

        self._received_harvest = received_harvest

    @property
    def sowing_date(self):
        """Gets the sowing_date of this CropUnitDto.  # noqa: E501


        :return: The sowing_date of this CropUnitDto.  # noqa: E501
        :rtype: datetime
        """
        return self._sowing_date

    @sowing_date.setter
    def sowing_date(self, sowing_date):
        """Sets the sowing_date of this CropUnitDto.


        :param sowing_date: The sowing_date of this CropUnitDto.  # noqa: E501
        :type: datetime
        """

        self._sowing_date = sowing_date

    @property
    def status(self):
        """Gets the status of this CropUnitDto.  # noqa: E501


        :return: The status of this CropUnitDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CropUnitDto.


        :param status: The status of this CropUnitDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tasks(self):
        """Gets the tasks of this CropUnitDto.  # noqa: E501


        :return: The tasks of this CropUnitDto.  # noqa: E501
        :rtype: list[TaskDto]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this CropUnitDto.


        :param tasks: The tasks of this CropUnitDto.  # noqa: E501
        :type: list[TaskDto]
        """

        self._tasks = tasks

    @property
    def usable_area(self):
        """Gets the usable_area of this CropUnitDto.  # noqa: E501


        :return: The usable_area of this CropUnitDto.  # noqa: E501
        :rtype: Area
        """
        return self._usable_area

    @usable_area.setter
    def usable_area(self, usable_area):
        """Sets the usable_area of this CropUnitDto.


        :param usable_area: The usable_area of this CropUnitDto.  # noqa: E501
        :type: Area
        """

        self._usable_area = usable_area

    @property
    def variety_id(self):
        """Gets the variety_id of this CropUnitDto.  # noqa: E501


        :return: The variety_id of this CropUnitDto.  # noqa: E501
        :rtype: int
        """
        return self._variety_id

    @variety_id.setter
    def variety_id(self, variety_id):
        """Sets the variety_id of this CropUnitDto.


        :param variety_id: The variety_id of this CropUnitDto.  # noqa: E501
        :type: int
        """

        self._variety_id = variety_id

    @property
    def variety_name(self):
        """Gets the variety_name of this CropUnitDto.  # noqa: E501


        :return: The variety_name of this CropUnitDto.  # noqa: E501
        :rtype: str
        """
        return self._variety_name

    @variety_name.setter
    def variety_name(self, variety_name):
        """Sets the variety_name of this CropUnitDto.


        :param variety_name: The variety_name of this CropUnitDto.  # noqa: E501
        :type: str
        """

        self._variety_name = variety_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CropUnitDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CropUnitDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
