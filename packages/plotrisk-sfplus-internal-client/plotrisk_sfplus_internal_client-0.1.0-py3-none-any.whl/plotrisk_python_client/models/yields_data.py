# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class YieldsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'planned_harvest_projection': 'str',
        'yield_avg': 'str',
        'yield_max': 'str',
        'yield_min': 'str'
    }

    attribute_map = {
        'planned_harvest_projection': 'plannedHarvestProjection',
        'yield_avg': 'yieldAvg',
        'yield_max': 'yieldMax',
        'yield_min': 'yieldMin'
    }

    def __init__(self, planned_harvest_projection=None, yield_avg=None, yield_max=None, yield_min=None):  # noqa: E501
        """YieldsData - a model defined in Swagger"""  # noqa: E501
        self._planned_harvest_projection = None
        self._yield_avg = None
        self._yield_max = None
        self._yield_min = None
        self.discriminator = None
        if planned_harvest_projection is not None:
            self.planned_harvest_projection = planned_harvest_projection
        if yield_avg is not None:
            self.yield_avg = yield_avg
        if yield_max is not None:
            self.yield_max = yield_max
        if yield_min is not None:
            self.yield_min = yield_min

    @property
    def planned_harvest_projection(self):
        """Gets the planned_harvest_projection of this YieldsData.  # noqa: E501


        :return: The planned_harvest_projection of this YieldsData.  # noqa: E501
        :rtype: str
        """
        return self._planned_harvest_projection

    @planned_harvest_projection.setter
    def planned_harvest_projection(self, planned_harvest_projection):
        """Sets the planned_harvest_projection of this YieldsData.


        :param planned_harvest_projection: The planned_harvest_projection of this YieldsData.  # noqa: E501
        :type: str
        """

        self._planned_harvest_projection = planned_harvest_projection

    @property
    def yield_avg(self):
        """Gets the yield_avg of this YieldsData.  # noqa: E501


        :return: The yield_avg of this YieldsData.  # noqa: E501
        :rtype: str
        """
        return self._yield_avg

    @yield_avg.setter
    def yield_avg(self, yield_avg):
        """Sets the yield_avg of this YieldsData.


        :param yield_avg: The yield_avg of this YieldsData.  # noqa: E501
        :type: str
        """

        self._yield_avg = yield_avg

    @property
    def yield_max(self):
        """Gets the yield_max of this YieldsData.  # noqa: E501


        :return: The yield_max of this YieldsData.  # noqa: E501
        :rtype: str
        """
        return self._yield_max

    @yield_max.setter
    def yield_max(self, yield_max):
        """Sets the yield_max of this YieldsData.


        :param yield_max: The yield_max of this YieldsData.  # noqa: E501
        :type: str
        """

        self._yield_max = yield_max

    @property
    def yield_min(self):
        """Gets the yield_min of this YieldsData.  # noqa: E501


        :return: The yield_min of this YieldsData.  # noqa: E501
        :rtype: str
        """
        return self._yield_min

    @yield_min.setter
    def yield_min(self, yield_min):
        """Sets the yield_min of this YieldsData.


        :param yield_min: The yield_min of this YieldsData.  # noqa: E501
        :type: str
        """

        self._yield_min = yield_min

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(YieldsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, YieldsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
