# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Weather(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day_rh': 'float',
        'day_temperature': 'float',
        'diurnal_temperature': 'float',
        'gdd': 'float',
        'mean_temperature': 'float',
        'night_rh': 'float',
        'night_temperature': 'float',
        'precipitation': 'float',
        'wind_speed': 'float'
    }

    attribute_map = {
        'day_rh': 'dayRH',
        'day_temperature': 'dayTemperature',
        'diurnal_temperature': 'diurnalTemperature',
        'gdd': 'gdd',
        'mean_temperature': 'meanTemperature',
        'night_rh': 'nightRH',
        'night_temperature': 'nightTemperature',
        'precipitation': 'precipitation',
        'wind_speed': 'windSpeed'
    }

    def __init__(self, day_rh=None, day_temperature=None, diurnal_temperature=None, gdd=None, mean_temperature=None, night_rh=None, night_temperature=None, precipitation=None, wind_speed=None):  # noqa: E501
        """Weather - a model defined in Swagger"""  # noqa: E501
        self._day_rh = None
        self._day_temperature = None
        self._diurnal_temperature = None
        self._gdd = None
        self._mean_temperature = None
        self._night_rh = None
        self._night_temperature = None
        self._precipitation = None
        self._wind_speed = None
        self.discriminator = None
        if day_rh is not None:
            self.day_rh = day_rh
        if day_temperature is not None:
            self.day_temperature = day_temperature
        if diurnal_temperature is not None:
            self.diurnal_temperature = diurnal_temperature
        if gdd is not None:
            self.gdd = gdd
        if mean_temperature is not None:
            self.mean_temperature = mean_temperature
        if night_rh is not None:
            self.night_rh = night_rh
        if night_temperature is not None:
            self.night_temperature = night_temperature
        if precipitation is not None:
            self.precipitation = precipitation
        if wind_speed is not None:
            self.wind_speed = wind_speed

    @property
    def day_rh(self):
        """Gets the day_rh of this Weather.  # noqa: E501


        :return: The day_rh of this Weather.  # noqa: E501
        :rtype: float
        """
        return self._day_rh

    @day_rh.setter
    def day_rh(self, day_rh):
        """Sets the day_rh of this Weather.


        :param day_rh: The day_rh of this Weather.  # noqa: E501
        :type: float
        """

        self._day_rh = day_rh

    @property
    def day_temperature(self):
        """Gets the day_temperature of this Weather.  # noqa: E501


        :return: The day_temperature of this Weather.  # noqa: E501
        :rtype: float
        """
        return self._day_temperature

    @day_temperature.setter
    def day_temperature(self, day_temperature):
        """Sets the day_temperature of this Weather.


        :param day_temperature: The day_temperature of this Weather.  # noqa: E501
        :type: float
        """

        self._day_temperature = day_temperature

    @property
    def diurnal_temperature(self):
        """Gets the diurnal_temperature of this Weather.  # noqa: E501


        :return: The diurnal_temperature of this Weather.  # noqa: E501
        :rtype: float
        """
        return self._diurnal_temperature

    @diurnal_temperature.setter
    def diurnal_temperature(self, diurnal_temperature):
        """Sets the diurnal_temperature of this Weather.


        :param diurnal_temperature: The diurnal_temperature of this Weather.  # noqa: E501
        :type: float
        """

        self._diurnal_temperature = diurnal_temperature

    @property
    def gdd(self):
        """Gets the gdd of this Weather.  # noqa: E501


        :return: The gdd of this Weather.  # noqa: E501
        :rtype: float
        """
        return self._gdd

    @gdd.setter
    def gdd(self, gdd):
        """Sets the gdd of this Weather.


        :param gdd: The gdd of this Weather.  # noqa: E501
        :type: float
        """

        self._gdd = gdd

    @property
    def mean_temperature(self):
        """Gets the mean_temperature of this Weather.  # noqa: E501


        :return: The mean_temperature of this Weather.  # noqa: E501
        :rtype: float
        """
        return self._mean_temperature

    @mean_temperature.setter
    def mean_temperature(self, mean_temperature):
        """Sets the mean_temperature of this Weather.


        :param mean_temperature: The mean_temperature of this Weather.  # noqa: E501
        :type: float
        """

        self._mean_temperature = mean_temperature

    @property
    def night_rh(self):
        """Gets the night_rh of this Weather.  # noqa: E501


        :return: The night_rh of this Weather.  # noqa: E501
        :rtype: float
        """
        return self._night_rh

    @night_rh.setter
    def night_rh(self, night_rh):
        """Sets the night_rh of this Weather.


        :param night_rh: The night_rh of this Weather.  # noqa: E501
        :type: float
        """

        self._night_rh = night_rh

    @property
    def night_temperature(self):
        """Gets the night_temperature of this Weather.  # noqa: E501


        :return: The night_temperature of this Weather.  # noqa: E501
        :rtype: float
        """
        return self._night_temperature

    @night_temperature.setter
    def night_temperature(self, night_temperature):
        """Sets the night_temperature of this Weather.


        :param night_temperature: The night_temperature of this Weather.  # noqa: E501
        :type: float
        """

        self._night_temperature = night_temperature

    @property
    def precipitation(self):
        """Gets the precipitation of this Weather.  # noqa: E501


        :return: The precipitation of this Weather.  # noqa: E501
        :rtype: float
        """
        return self._precipitation

    @precipitation.setter
    def precipitation(self, precipitation):
        """Sets the precipitation of this Weather.


        :param precipitation: The precipitation of this Weather.  # noqa: E501
        :type: float
        """

        self._precipitation = precipitation

    @property
    def wind_speed(self):
        """Gets the wind_speed of this Weather.  # noqa: E501


        :return: The wind_speed of this Weather.  # noqa: E501
        :rtype: float
        """
        return self._wind_speed

    @wind_speed.setter
    def wind_speed(self, wind_speed):
        """Sets the wind_speed of this Weather.


        :param wind_speed: The wind_speed of this Weather.  # noqa: E501
        :type: float
        """

        self._wind_speed = wind_speed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Weather, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Weather):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
