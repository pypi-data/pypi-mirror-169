# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DetailingMassUploadDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_dto': 'AssetDto',
        'croppable_area_dto': 'CroppableAreaDto',
        'farmer_dto': 'FarmerDto'
    }

    attribute_map = {
        'asset_dto': 'assetDto',
        'croppable_area_dto': 'croppableAreaDto',
        'farmer_dto': 'farmerDto'
    }

    def __init__(self, asset_dto=None, croppable_area_dto=None, farmer_dto=None):  # noqa: E501
        """DetailingMassUploadDto - a model defined in Swagger"""  # noqa: E501
        self._asset_dto = None
        self._croppable_area_dto = None
        self._farmer_dto = None
        self.discriminator = None
        if asset_dto is not None:
            self.asset_dto = asset_dto
        if croppable_area_dto is not None:
            self.croppable_area_dto = croppable_area_dto
        if farmer_dto is not None:
            self.farmer_dto = farmer_dto

    @property
    def asset_dto(self):
        """Gets the asset_dto of this DetailingMassUploadDto.  # noqa: E501


        :return: The asset_dto of this DetailingMassUploadDto.  # noqa: E501
        :rtype: AssetDto
        """
        return self._asset_dto

    @asset_dto.setter
    def asset_dto(self, asset_dto):
        """Sets the asset_dto of this DetailingMassUploadDto.


        :param asset_dto: The asset_dto of this DetailingMassUploadDto.  # noqa: E501
        :type: AssetDto
        """

        self._asset_dto = asset_dto

    @property
    def croppable_area_dto(self):
        """Gets the croppable_area_dto of this DetailingMassUploadDto.  # noqa: E501


        :return: The croppable_area_dto of this DetailingMassUploadDto.  # noqa: E501
        :rtype: CroppableAreaDto
        """
        return self._croppable_area_dto

    @croppable_area_dto.setter
    def croppable_area_dto(self, croppable_area_dto):
        """Sets the croppable_area_dto of this DetailingMassUploadDto.


        :param croppable_area_dto: The croppable_area_dto of this DetailingMassUploadDto.  # noqa: E501
        :type: CroppableAreaDto
        """

        self._croppable_area_dto = croppable_area_dto

    @property
    def farmer_dto(self):
        """Gets the farmer_dto of this DetailingMassUploadDto.  # noqa: E501


        :return: The farmer_dto of this DetailingMassUploadDto.  # noqa: E501
        :rtype: FarmerDto
        """
        return self._farmer_dto

    @farmer_dto.setter
    def farmer_dto(self, farmer_dto):
        """Sets the farmer_dto of this DetailingMassUploadDto.


        :param farmer_dto: The farmer_dto of this DetailingMassUploadDto.  # noqa: E501
        :type: FarmerDto
        """

        self._farmer_dto = farmer_dto

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetailingMassUploadDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailingMassUploadDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
