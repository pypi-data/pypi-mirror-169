# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HarvestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'comment': 'str',
        'crop_unit_id': 'int',
        'croppable_area_id': 'int',
        'current_delivery_date': 'datetime',
        'current_harvest_date': 'datetime',
        'current_harvest_quantity': 'float',
        'data': 'dict(str, object)',
        'form_id': 'int',
        'harvest_estimated_on': 'datetime',
        'id': 'int',
        'images': 'dict(str, object)',
        'new_delivery_date': 'datetime',
        'new_harvest_date': 'datetime',
        'new_harvest_quantity': 'float',
        'project_id': 'int',
        'reason': 'str'
    }

    attribute_map = {
        'client_id': 'clientId',
        'comment': 'comment',
        'crop_unit_id': 'cropUnitId',
        'croppable_area_id': 'croppableAreaId',
        'current_delivery_date': 'currentDeliveryDate',
        'current_harvest_date': 'currentHarvestDate',
        'current_harvest_quantity': 'currentHarvestQuantity',
        'data': 'data',
        'form_id': 'formId',
        'harvest_estimated_on': 'harvestEstimatedOn',
        'id': 'id',
        'images': 'images',
        'new_delivery_date': 'newDeliveryDate',
        'new_harvest_date': 'newHarvestDate',
        'new_harvest_quantity': 'newHarvestQuantity',
        'project_id': 'projectId',
        'reason': 'reason'
    }

    def __init__(self, client_id=None, comment=None, crop_unit_id=None, croppable_area_id=None, current_delivery_date=None, current_harvest_date=None, current_harvest_quantity=None, data=None, form_id=None, harvest_estimated_on=None, id=None, images=None, new_delivery_date=None, new_harvest_date=None, new_harvest_quantity=None, project_id=None, reason=None):  # noqa: E501
        """HarvestDto - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._comment = None
        self._crop_unit_id = None
        self._croppable_area_id = None
        self._current_delivery_date = None
        self._current_harvest_date = None
        self._current_harvest_quantity = None
        self._data = None
        self._form_id = None
        self._harvest_estimated_on = None
        self._id = None
        self._images = None
        self._new_delivery_date = None
        self._new_harvest_date = None
        self._new_harvest_quantity = None
        self._project_id = None
        self._reason = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        if comment is not None:
            self.comment = comment
        if crop_unit_id is not None:
            self.crop_unit_id = crop_unit_id
        if croppable_area_id is not None:
            self.croppable_area_id = croppable_area_id
        if current_delivery_date is not None:
            self.current_delivery_date = current_delivery_date
        if current_harvest_date is not None:
            self.current_harvest_date = current_harvest_date
        if current_harvest_quantity is not None:
            self.current_harvest_quantity = current_harvest_quantity
        if data is not None:
            self.data = data
        if form_id is not None:
            self.form_id = form_id
        if harvest_estimated_on is not None:
            self.harvest_estimated_on = harvest_estimated_on
        if id is not None:
            self.id = id
        if images is not None:
            self.images = images
        if new_delivery_date is not None:
            self.new_delivery_date = new_delivery_date
        if new_harvest_date is not None:
            self.new_harvest_date = new_harvest_date
        if new_harvest_quantity is not None:
            self.new_harvest_quantity = new_harvest_quantity
        if project_id is not None:
            self.project_id = project_id
        if reason is not None:
            self.reason = reason

    @property
    def client_id(self):
        """Gets the client_id of this HarvestDto.  # noqa: E501


        :return: The client_id of this HarvestDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this HarvestDto.


        :param client_id: The client_id of this HarvestDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def comment(self):
        """Gets the comment of this HarvestDto.  # noqa: E501


        :return: The comment of this HarvestDto.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this HarvestDto.


        :param comment: The comment of this HarvestDto.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def crop_unit_id(self):
        """Gets the crop_unit_id of this HarvestDto.  # noqa: E501


        :return: The crop_unit_id of this HarvestDto.  # noqa: E501
        :rtype: int
        """
        return self._crop_unit_id

    @crop_unit_id.setter
    def crop_unit_id(self, crop_unit_id):
        """Sets the crop_unit_id of this HarvestDto.


        :param crop_unit_id: The crop_unit_id of this HarvestDto.  # noqa: E501
        :type: int
        """

        self._crop_unit_id = crop_unit_id

    @property
    def croppable_area_id(self):
        """Gets the croppable_area_id of this HarvestDto.  # noqa: E501


        :return: The croppable_area_id of this HarvestDto.  # noqa: E501
        :rtype: int
        """
        return self._croppable_area_id

    @croppable_area_id.setter
    def croppable_area_id(self, croppable_area_id):
        """Sets the croppable_area_id of this HarvestDto.


        :param croppable_area_id: The croppable_area_id of this HarvestDto.  # noqa: E501
        :type: int
        """

        self._croppable_area_id = croppable_area_id

    @property
    def current_delivery_date(self):
        """Gets the current_delivery_date of this HarvestDto.  # noqa: E501


        :return: The current_delivery_date of this HarvestDto.  # noqa: E501
        :rtype: datetime
        """
        return self._current_delivery_date

    @current_delivery_date.setter
    def current_delivery_date(self, current_delivery_date):
        """Sets the current_delivery_date of this HarvestDto.


        :param current_delivery_date: The current_delivery_date of this HarvestDto.  # noqa: E501
        :type: datetime
        """

        self._current_delivery_date = current_delivery_date

    @property
    def current_harvest_date(self):
        """Gets the current_harvest_date of this HarvestDto.  # noqa: E501


        :return: The current_harvest_date of this HarvestDto.  # noqa: E501
        :rtype: datetime
        """
        return self._current_harvest_date

    @current_harvest_date.setter
    def current_harvest_date(self, current_harvest_date):
        """Sets the current_harvest_date of this HarvestDto.


        :param current_harvest_date: The current_harvest_date of this HarvestDto.  # noqa: E501
        :type: datetime
        """

        self._current_harvest_date = current_harvest_date

    @property
    def current_harvest_quantity(self):
        """Gets the current_harvest_quantity of this HarvestDto.  # noqa: E501


        :return: The current_harvest_quantity of this HarvestDto.  # noqa: E501
        :rtype: float
        """
        return self._current_harvest_quantity

    @current_harvest_quantity.setter
    def current_harvest_quantity(self, current_harvest_quantity):
        """Sets the current_harvest_quantity of this HarvestDto.


        :param current_harvest_quantity: The current_harvest_quantity of this HarvestDto.  # noqa: E501
        :type: float
        """

        self._current_harvest_quantity = current_harvest_quantity

    @property
    def data(self):
        """Gets the data of this HarvestDto.  # noqa: E501


        :return: The data of this HarvestDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this HarvestDto.


        :param data: The data of this HarvestDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def form_id(self):
        """Gets the form_id of this HarvestDto.  # noqa: E501


        :return: The form_id of this HarvestDto.  # noqa: E501
        :rtype: int
        """
        return self._form_id

    @form_id.setter
    def form_id(self, form_id):
        """Sets the form_id of this HarvestDto.


        :param form_id: The form_id of this HarvestDto.  # noqa: E501
        :type: int
        """

        self._form_id = form_id

    @property
    def harvest_estimated_on(self):
        """Gets the harvest_estimated_on of this HarvestDto.  # noqa: E501


        :return: The harvest_estimated_on of this HarvestDto.  # noqa: E501
        :rtype: datetime
        """
        return self._harvest_estimated_on

    @harvest_estimated_on.setter
    def harvest_estimated_on(self, harvest_estimated_on):
        """Sets the harvest_estimated_on of this HarvestDto.


        :param harvest_estimated_on: The harvest_estimated_on of this HarvestDto.  # noqa: E501
        :type: datetime
        """

        self._harvest_estimated_on = harvest_estimated_on

    @property
    def id(self):
        """Gets the id of this HarvestDto.  # noqa: E501


        :return: The id of this HarvestDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HarvestDto.


        :param id: The id of this HarvestDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this HarvestDto.  # noqa: E501


        :return: The images of this HarvestDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this HarvestDto.


        :param images: The images of this HarvestDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._images = images

    @property
    def new_delivery_date(self):
        """Gets the new_delivery_date of this HarvestDto.  # noqa: E501


        :return: The new_delivery_date of this HarvestDto.  # noqa: E501
        :rtype: datetime
        """
        return self._new_delivery_date

    @new_delivery_date.setter
    def new_delivery_date(self, new_delivery_date):
        """Sets the new_delivery_date of this HarvestDto.


        :param new_delivery_date: The new_delivery_date of this HarvestDto.  # noqa: E501
        :type: datetime
        """

        self._new_delivery_date = new_delivery_date

    @property
    def new_harvest_date(self):
        """Gets the new_harvest_date of this HarvestDto.  # noqa: E501


        :return: The new_harvest_date of this HarvestDto.  # noqa: E501
        :rtype: datetime
        """
        return self._new_harvest_date

    @new_harvest_date.setter
    def new_harvest_date(self, new_harvest_date):
        """Sets the new_harvest_date of this HarvestDto.


        :param new_harvest_date: The new_harvest_date of this HarvestDto.  # noqa: E501
        :type: datetime
        """

        self._new_harvest_date = new_harvest_date

    @property
    def new_harvest_quantity(self):
        """Gets the new_harvest_quantity of this HarvestDto.  # noqa: E501


        :return: The new_harvest_quantity of this HarvestDto.  # noqa: E501
        :rtype: float
        """
        return self._new_harvest_quantity

    @new_harvest_quantity.setter
    def new_harvest_quantity(self, new_harvest_quantity):
        """Sets the new_harvest_quantity of this HarvestDto.


        :param new_harvest_quantity: The new_harvest_quantity of this HarvestDto.  # noqa: E501
        :type: float
        """

        self._new_harvest_quantity = new_harvest_quantity

    @property
    def project_id(self):
        """Gets the project_id of this HarvestDto.  # noqa: E501


        :return: The project_id of this HarvestDto.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this HarvestDto.


        :param project_id: The project_id of this HarvestDto.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def reason(self):
        """Gets the reason of this HarvestDto.  # noqa: E501


        :return: The reason of this HarvestDto.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this HarvestDto.


        :param reason: The reason of this HarvestDto.  # noqa: E501
        :type: str
        """

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HarvestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HarvestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
