# coding: utf-8

"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AvailableAssetsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contractor_ids': 'list[int]',
        'empty': 'bool',
        'farmer_codes': 'str',
        'irrigation_type_ids': 'list[int]',
        'location': 'LocationDto',
        'max_declared_area': 'float',
        'max_usable_area': 'float',
        'min_declared_area': 'float',
        'min_usable_area': 'float',
        'owner_ids': 'list[int]',
        'soil_type_ids': 'list[int]',
        'user_ids': 'list[int]'
    }

    attribute_map = {
        'contractor_ids': 'contractorIds',
        'empty': 'empty',
        'farmer_codes': 'farmerCodes',
        'irrigation_type_ids': 'irrigationTypeIds',
        'location': 'location',
        'max_declared_area': 'maxDeclaredArea',
        'max_usable_area': 'maxUsableArea',
        'min_declared_area': 'minDeclaredArea',
        'min_usable_area': 'minUsableArea',
        'owner_ids': 'ownerIds',
        'soil_type_ids': 'soilTypeIds',
        'user_ids': 'userIds'
    }

    def __init__(self, contractor_ids=None, empty=None, farmer_codes=None, irrigation_type_ids=None, location=None, max_declared_area=None, max_usable_area=None, min_declared_area=None, min_usable_area=None, owner_ids=None, soil_type_ids=None, user_ids=None):  # noqa: E501
        """AvailableAssetsDto - a model defined in Swagger"""  # noqa: E501
        self._contractor_ids = None
        self._empty = None
        self._farmer_codes = None
        self._irrigation_type_ids = None
        self._location = None
        self._max_declared_area = None
        self._max_usable_area = None
        self._min_declared_area = None
        self._min_usable_area = None
        self._owner_ids = None
        self._soil_type_ids = None
        self._user_ids = None
        self.discriminator = None
        if contractor_ids is not None:
            self.contractor_ids = contractor_ids
        if empty is not None:
            self.empty = empty
        if farmer_codes is not None:
            self.farmer_codes = farmer_codes
        if irrigation_type_ids is not None:
            self.irrigation_type_ids = irrigation_type_ids
        if location is not None:
            self.location = location
        if max_declared_area is not None:
            self.max_declared_area = max_declared_area
        if max_usable_area is not None:
            self.max_usable_area = max_usable_area
        if min_declared_area is not None:
            self.min_declared_area = min_declared_area
        if min_usable_area is not None:
            self.min_usable_area = min_usable_area
        if owner_ids is not None:
            self.owner_ids = owner_ids
        if soil_type_ids is not None:
            self.soil_type_ids = soil_type_ids
        if user_ids is not None:
            self.user_ids = user_ids

    @property
    def contractor_ids(self):
        """Gets the contractor_ids of this AvailableAssetsDto.  # noqa: E501


        :return: The contractor_ids of this AvailableAssetsDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._contractor_ids

    @contractor_ids.setter
    def contractor_ids(self, contractor_ids):
        """Sets the contractor_ids of this AvailableAssetsDto.


        :param contractor_ids: The contractor_ids of this AvailableAssetsDto.  # noqa: E501
        :type: list[int]
        """

        self._contractor_ids = contractor_ids

    @property
    def empty(self):
        """Gets the empty of this AvailableAssetsDto.  # noqa: E501


        :return: The empty of this AvailableAssetsDto.  # noqa: E501
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this AvailableAssetsDto.


        :param empty: The empty of this AvailableAssetsDto.  # noqa: E501
        :type: bool
        """

        self._empty = empty

    @property
    def farmer_codes(self):
        """Gets the farmer_codes of this AvailableAssetsDto.  # noqa: E501


        :return: The farmer_codes of this AvailableAssetsDto.  # noqa: E501
        :rtype: str
        """
        return self._farmer_codes

    @farmer_codes.setter
    def farmer_codes(self, farmer_codes):
        """Sets the farmer_codes of this AvailableAssetsDto.


        :param farmer_codes: The farmer_codes of this AvailableAssetsDto.  # noqa: E501
        :type: str
        """

        self._farmer_codes = farmer_codes

    @property
    def irrigation_type_ids(self):
        """Gets the irrigation_type_ids of this AvailableAssetsDto.  # noqa: E501


        :return: The irrigation_type_ids of this AvailableAssetsDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._irrigation_type_ids

    @irrigation_type_ids.setter
    def irrigation_type_ids(self, irrigation_type_ids):
        """Sets the irrigation_type_ids of this AvailableAssetsDto.


        :param irrigation_type_ids: The irrigation_type_ids of this AvailableAssetsDto.  # noqa: E501
        :type: list[int]
        """

        self._irrigation_type_ids = irrigation_type_ids

    @property
    def location(self):
        """Gets the location of this AvailableAssetsDto.  # noqa: E501


        :return: The location of this AvailableAssetsDto.  # noqa: E501
        :rtype: LocationDto
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AvailableAssetsDto.


        :param location: The location of this AvailableAssetsDto.  # noqa: E501
        :type: LocationDto
        """

        self._location = location

    @property
    def max_declared_area(self):
        """Gets the max_declared_area of this AvailableAssetsDto.  # noqa: E501


        :return: The max_declared_area of this AvailableAssetsDto.  # noqa: E501
        :rtype: float
        """
        return self._max_declared_area

    @max_declared_area.setter
    def max_declared_area(self, max_declared_area):
        """Sets the max_declared_area of this AvailableAssetsDto.


        :param max_declared_area: The max_declared_area of this AvailableAssetsDto.  # noqa: E501
        :type: float
        """

        self._max_declared_area = max_declared_area

    @property
    def max_usable_area(self):
        """Gets the max_usable_area of this AvailableAssetsDto.  # noqa: E501


        :return: The max_usable_area of this AvailableAssetsDto.  # noqa: E501
        :rtype: float
        """
        return self._max_usable_area

    @max_usable_area.setter
    def max_usable_area(self, max_usable_area):
        """Sets the max_usable_area of this AvailableAssetsDto.


        :param max_usable_area: The max_usable_area of this AvailableAssetsDto.  # noqa: E501
        :type: float
        """

        self._max_usable_area = max_usable_area

    @property
    def min_declared_area(self):
        """Gets the min_declared_area of this AvailableAssetsDto.  # noqa: E501


        :return: The min_declared_area of this AvailableAssetsDto.  # noqa: E501
        :rtype: float
        """
        return self._min_declared_area

    @min_declared_area.setter
    def min_declared_area(self, min_declared_area):
        """Sets the min_declared_area of this AvailableAssetsDto.


        :param min_declared_area: The min_declared_area of this AvailableAssetsDto.  # noqa: E501
        :type: float
        """

        self._min_declared_area = min_declared_area

    @property
    def min_usable_area(self):
        """Gets the min_usable_area of this AvailableAssetsDto.  # noqa: E501


        :return: The min_usable_area of this AvailableAssetsDto.  # noqa: E501
        :rtype: float
        """
        return self._min_usable_area

    @min_usable_area.setter
    def min_usable_area(self, min_usable_area):
        """Sets the min_usable_area of this AvailableAssetsDto.


        :param min_usable_area: The min_usable_area of this AvailableAssetsDto.  # noqa: E501
        :type: float
        """

        self._min_usable_area = min_usable_area

    @property
    def owner_ids(self):
        """Gets the owner_ids of this AvailableAssetsDto.  # noqa: E501


        :return: The owner_ids of this AvailableAssetsDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._owner_ids

    @owner_ids.setter
    def owner_ids(self, owner_ids):
        """Sets the owner_ids of this AvailableAssetsDto.


        :param owner_ids: The owner_ids of this AvailableAssetsDto.  # noqa: E501
        :type: list[int]
        """

        self._owner_ids = owner_ids

    @property
    def soil_type_ids(self):
        """Gets the soil_type_ids of this AvailableAssetsDto.  # noqa: E501


        :return: The soil_type_ids of this AvailableAssetsDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._soil_type_ids

    @soil_type_ids.setter
    def soil_type_ids(self, soil_type_ids):
        """Sets the soil_type_ids of this AvailableAssetsDto.


        :param soil_type_ids: The soil_type_ids of this AvailableAssetsDto.  # noqa: E501
        :type: list[int]
        """

        self._soil_type_ids = soil_type_ids

    @property
    def user_ids(self):
        """Gets the user_ids of this AvailableAssetsDto.  # noqa: E501


        :return: The user_ids of this AvailableAssetsDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this AvailableAssetsDto.


        :param user_ids: The user_ids of this AvailableAssetsDto.  # noqa: E501
        :type: list[int]
        """

        self._user_ids = user_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvailableAssetsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvailableAssetsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
