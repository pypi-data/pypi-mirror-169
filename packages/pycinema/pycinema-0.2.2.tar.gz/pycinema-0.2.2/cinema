#!/usr/bin/env python3

import os
import argparse
import pycinema

#
# the cinema command line tool
#

helptext = ""

# normal option parsing
parser = argparse.ArgumentParser(
            description="cinema: the cinema command line tool",
            epilog=helptext,
            formatter_class=argparse.ArgumentDefaultsHelpFormatter )

# parser.add_argument( "year", nargs="?", help="run reports for a single year" )

parser.add_argument(    "--database",
                        required=False,
                        default="cinema.cdb",
                        help="path to the new cinema database")

parser.add_argument(    "--phivalues",
                        required=False,
                        default=[10.0, 20.0, 30.0, 40.0],
                        nargs='+',
                        type=float,
                        help="resolution of images to create")

parser.add_argument(    "--thetavalues",
                        required=False,
                        default=[110.0, 120.0, 130.0, 140.0],
                        nargs='+',
                        type=float,
                        help="resolution of images to create")

parser.add_argument(    "--resolution",
                        required=False,
                        default=[640, 480],
                        nargs=2,
                        type=int,
                        help="resolution of images to create")

args = parser.parse_args()

print(f'Creating database: {args.database}')
os.makedirs(args.database)

# create an artifact source
artifactSource = pycinema.TestImageArtifactSource();

with open(f'{args.database}/data.csv', 'w') as dbinfo:
    cur_image = 0
    dbinfo.write("phi,theta,FILE\n")
    for p in args.phivalues:
        for t in args.thetavalues:
            im_name = f'{cur_image:03}.jpg'

            # provide input parameters and save the resulting images
            artifactSource.inputs.Parameters.set( {'phi': p, 'theta': t} );
            images = artifactSource.outputs.Artifacts.get();
            for i in images:
                i.save(os.path.join(args.database, im_name))
                cur_image += 1
                dbinfo.write("{},{},{}\n".format(p, t, im_name))
