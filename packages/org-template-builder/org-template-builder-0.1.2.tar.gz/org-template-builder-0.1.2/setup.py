# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['orgtemp']

package_data = \
{'': ['*']}

install_requires = \
['bs4>=0.0.1,<0.0.2',
 'orgparse>=0.3.1,<0.4.0',
 'requests==2.28.1',
 'selenium>=4.4.3,<5.0.0',
 'webdriver-manager>=3.8.3,<4.0.0']

setup_kwargs = {
    'name': 'org-template-builder',
    'version': '0.1.2',
    'description': 'Python Org-Mode Template Builder.',
    'long_description': '- [Org-template-builder](#org-template-builder)\n- [Template Builder Arguments](#template-builder-arguments)\n  - [Project Name](#project-name)\n  - [Author Name](#author-name)\n- [Introduction](#introduction)\n- [Folder Structure](#folder-structure)\n- [Dependencies](#dependencies)\n- [Default theme and modules](#default-theme-and-modules)\n  - [Running from a parent project](#running-from-a-parent-project)\n- [Code Examples](#code-examples)\n  - [Shell Example](#shell-example)\n  - [SQL Example](#sql-example)\n  - [Elisp Example](#elisp-example)\n  - [Python Example](#python-example)\n- [To Do](#to-do)\n  - [Fix the README file in the project root.](#org9dfb94a)\n- [Admonitions](#admonitions)\n\n\n\n<a id="org-template-builder"></a>\n\n# Org-template-builder\n\n```shell\npip install org-template-builder\n```\n\n```shell\npython -m orgtemp myprojectname --author myname\n```\n\nThe `orgtemp` process will raise an exception if the directory is not empty. It won&rsquo;t exit if it contains dotfiles, like `.git` or `.projectile`. This means that the best way to use it is the following.\n\n```shell\nmkdir myprojectname && cd myprojectname && python -m orgtemp myprojectname\n```\n\nThis behaviour is to protect (in case of user mistake) overwriting existing configurations from other org-template-builder projects, individual checking/versioning/uninstalling has not been implemented.\n\nThe template will attempt to initialize a git repo with the `subprocess` module and add submodules to it but it won&rsquo;t make any commits. It will attempt to create and checkout a branch named `main`, to avoid using the default `master` name.\n\n\n<a id="template-builder-arguments"></a>\n\n# Template Builder Arguments\n\n\n<a id="project-name"></a>\n\n## Project Name\n\nWhenever `org-template-builder` installs all the parts, it will use whatever `projectname` was given to it to modify the default of a few files:\n\n1.  Create a `.org` file in `src` and give it the `projectname`.\n2.  Set the title and first header of that file to `projectname`.\n3.  Set the `PROJECT_NAME` variable in the `Makefile`.\n\nHowever, when copying the `projectname.md` file from `docs` to the root directory, `Makefile` will rename it to `README.md`.\n\nIf no project name is given, it will be set to &ldquo;readme&rdquo;.\n\n\n<a id="author-name"></a>\n\n## Author Name\n\nThe author name argument is optional, defaults to `""` and it is only added to the header of the `projectname.org` file.\n\n\n<a id="introduction"></a>\n\n# Introduction\n\nThis is an org-mode template for literate programming. The HTML theme is a fork of <https://github.com/fniessen/org-html-themes>.\n\nThe Makefile options are:\n\n1.  `make update` will go over all submodules and pull any changes.\n2.  `make` should call `tangle.el` and `publish.el` without `force`, which renders all the HTML and Markdown and copies all the static files from `resources` to `public`.\n3.  `make clean` should remove all directories in `public` before running a `force` version of `publish`.\n4.  `make commit` should run `publish` (non-forced) and then add and commit with automated timestamp.\n\n```shell\nmake update\n```\n\n```shell\nmake\n```\n\n```shell\nmake clean\n```\n\n\n<a id="folder-structure"></a>\n\n# Folder Structure\n\nThis is the structure from the root directory.\n\n```shell\ntree .. -I \'venv|orgtemp\' -d\n```\n\n    ..\n    ├── config\n    ├── dist\n    ├── docs\n    ├── public\n    │\xa0\xa0 ├── build\n    │\xa0\xa0 └── resources\n    │\xa0\xa0     ├── images\n    │\xa0\xa0     └── theme\n    │\xa0\xa0         ├── css\n    │\xa0\xa0         ├── js\n    │\xa0\xa0         └── lib\n    │\xa0\xa0             └── js\n    ├── resources\n    │\xa0\xa0 ├── images\n    │\xa0\xa0 └── theme\n    │\xa0\xa0     ├── css\n    │\xa0\xa0     ├── js\n    │\xa0\xa0     └── lib\n    │\xa0\xa0         └── js\n    ├── src\n    └── tests\n        └── __pycache__\n    \n    22 directories\n\n1.  Public: HTML directory for web.\n    -   Resources: Copies of all files from root/resources specified on publish.el.\n    -   Build: This is the equivalent of the `src` directory but for the HTML renders.\n2.  Resources: All static files, plus the `theme` submodule from `org-theme` repository.\n3.  Docs: The equivalent of `src` but for Markdown renders.\n4.  Src: Where all org and tangled code files live.\n5.  Tests: Reserved for writing tests with our without org files.\n\nAll files in `resources` that match the types specified in `publish.el` will be copied to `/public/resources`.\n\nHaving the `src` and `build` folders at the same tree level helps when accessing the equivalent `resources` folder from either directory.\n\n![img](../resources/images/emacs.png "Emacs logo")\n\n\n<a id="dependencies"></a>\n\n# Dependencies\n\nThe two base dependencies are in `config` and `resources/theme`. They do not share the same parent directory so the user must be careful when assuming their paths. The reason is simply to separate directories that are copied to `public`. So in case that there is any sensitive information in `config` we are sure it is not by default copied to `public`.\n\nThe file types to copy to public from resources are specified in the `publish.el` files anyway. And the `.gitignore` includes some paths in `resources` like `resources/keys` that at least won&rsquo;t be commited. In case of storing keys in json, it is not included in the static files as of `0.1.1`.\n\nAs of `0.1.1`, the static files are the following.\n\n```elisp\n"ico\\\\|png\\\\|jpg\\\\|jpeg\\\\|gif\\\\|svg\\\\|html\\\\|css\\\\|js\\\\|txt"\n```\n\n    ico\\|png\\|jpg\\|jpeg\\|gif\\|svg\\|html\\|css\\|js\\|txt\n\n    ico\\|png\\|jpg\\|jpeg\\|gif\\|svg\\|html\\|css\\|js\\|txt\n\nIn conclusion we can say that dependencies go in two places, for the public dependencies, we use `resources` and for the rest we use the root directory by default.\n\nMy personal use of literate projects with org-mode is for studying and ETL-like processes where there may be data that I need to load from `resources`, then output the results in the same `resources` directory. In case of graphs and plots, `.png` files will be the results, but HTML and JS may also come into play.\n\n\n<a id="default-theme-and-modules"></a>\n\n# Default theme and modules\n\nBy default, the `resources/theme` path of the theme is referenced in `config/org-theme.config` and it will link to a relative path in the project directory.\n\nHowever, there is a second file named `config/org-theme-alt.config` that will link to an external and absolute path that we can use instead of the default one.\n\nWe must set the name of the file in the header of our `.org` files and run `C-c C-c` in order to update the configuration.\n\n```org\n#+SETUPFILE: ../config/org-theme-alt.config\n```\n\nThen we can edit the contents of the file to fit our needs. Its default values link to the `org-template` repository but we can set them to wherever else.\n\nOnce we don&rsquo;t need the theme in `resources/theme` we can remove it from the repository.\n\n```shell\ngit rm resources/theme\ngit commit "removed default theme"\n```\n\nThat way we don&rsquo;t copy the contents to the `public` folder, as we are no longer using it. This can also be useful when dealing with a nested project where we may have trees of org projects and we want them to use the same common theme.\n\n\n<a id="running-from-a-parent-project"></a>\n\n## Running from a parent project\n\nWe can apply the same idea to the headers of the org file and redirect to an absolute path outside of the `.org` file directory. Then we can run `make` from a parent repository because the default behaviour of `publish.el` is to act recursively, so all `.org` files in whatever directory we set, `src` by default, will be exported to the parent&rsquo;s directory respective `public` and `docs` directories.\n\nIn that case, we should also copy the resources path recursively in order to keep the folder structure of the new tree.\n\n\n<a id="code-examples"></a>\n\n# Code Examples\n\n\n<a id="shell-example"></a>\n\n## Shell Example\n\nShell source blocks don&rsquo;t tangle as they are normally one liners. This particular line just sets the local Python environment via `pyenv`, I don&rsquo;t need a `venv` for this demo.\n\nWe must make sure that `:dir` is set to the parent directory `..`.\n\n```shell\npyenv local 3.7.13 && cat .python-version\n```\n\n    3.7.13\n\n\n<a id="sql-example"></a>\n\n## SQL Example\n\nThis is an SQL query for the database specified in the `org-header.config` file, which is the pagila sample database. For changing the sql info it&rsquo;s always better to override the `header-args` in the current document while using the original configuration as reference.\n\n```sql\nSELECT\n\tCONCAT(customer.last_name, \', \', customer.first_name) AS customer,\n\taddress.phone,\n\tfilm.title\nFROM\n\trental\n\tINNER JOIN customer ON rental.customer_id = customer.customer_id\n\tINNER JOIN address ON customer.address_id = address.address_id\n\tINNER JOIN inventory ON rental.inventory_id = inventory.inventory_id\n\tINNER JOIN film ON inventory.film_id = film.film_id\nWHERE\n\trental.return_date IS NULL\n\tAND rental_date < CURRENT_DATE\nORDER BY\n\ttitle\nLIMIT 5;\n```\n\n    customer\tphone\ttitle\n    OLVERA, DWAYNE\t62127829280\tACADEMY DINOSAUR\n    HUEY, BRANDON\t99883471275\tACE GOLDFINGER\n    OWENS, CARMEN\t272234298332\tAFFAIR PREJUDICE\n    HANNON, SETH\t864392582257\tAFRICAN EGG\n    COLE, TRACY\t371490777743\tALI FOREVER\n\n\n<a id="elisp-example"></a>\n\n## Elisp Example\n\nElisp blocks do not tangle by default either as they are mostly functions to evaluate on-the-go while using emacs.\n\n```elisp\n(run-python)\n```\n\n```elisp\n(emacs-version)\n```\n\n    GNU Emacs 28.1 (build 1, x86_64-apple-darwin18.7.0, NS appkit-1671.60 Version 10.14.6 (Build 18G95))\n     of 2022-05-11\n\n\n<a id="python-example"></a>\n\n## Python Example\n\nPython uses a session, as specified in the `../config/org-header.config`, so there must be a `(run-python)` session running.\n\n```python\nprint("TODO: finish this part.")\n```\n\n    TODO: finish this part.\n\n\n<a id="to-do"></a>\n\n# To Do\n\n\n<a id="org9dfb94a"></a>\n\n## TODO Fix the README file in the project root.\n\n**Problem**: Whenever using the README.md file outside of a repository with the `resources` folder, the image links break.\n\n**Possible solution**: Whenever copying the README.md to root, process it with a Python script so it references the public url address.\n\n\n<a id="admonitions"></a>\n\n# Admonitions\n\nSupport for HTML export admonitions. Four colors for a few options.\n\n<div class="note" id="orgc8f5c46">\n<p>\nThis is a note.\n</p>\n\n</div>\n\n<div class="hint" id="orga0afb3d">\n<p>\nThis is a hint.\n</p>\n\n</div>\n\n<div class="caution" id="orgff2c843">\n<p>\nThis is a caution.\n</p>\n\n</div>\n\n<div class="warning" id="org3b9e660">\n<p>\nThis is a warning.\n</p>\n\n</div>\n',
    'author': 'AlbertoV5',
    'author_email': '58243333+AlbertoV5@users.noreply.github.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
