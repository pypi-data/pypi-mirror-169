[tool.poetry]
name = "project-config"
version = "0.7.6"
description = "Reproducible configuration across projects."
authors = ["Álvaro Mondéjar Rubio <mondejar1994@gmail.com>"]
license = "BSD-3-Clause"
readme = "README.md"
repository = "https://github.com/mondeja/project-config"
documentation = "https://mondeja.github.io/project-config"
classifiers = [
  "Development Status :: 4 - Beta",
  "Operating System :: OS Independent",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Quality Assurance",
  "Environment :: Console"
]

[[tool.poetry.packages]]
include = "project_config"
from = "src"

[tool.poetry.urls]
"Bug tracker" = "https://github.com/mondeja/project-config/issues"
Changelog = "https://github.com/mondeja/project-config/releases"

[tool.poetry.dependencies]
python = "^3.7"
importlib-metadata-argparse-version = "*"
tomli-w = "^1"
pyjson5 = "*"
colored = "*"
tabulate = "^0.8"
jmespath = "^1"
identify = "^2"
"ruamel.yaml" = "~0.17"
appdirs = "^1"
diskcache = "^5"
typing-extensions = "^4.3.0"
requests = "^2.28.1"
requests-futures = "^1.0.0"
deepmerge = "^1.0.1"
tomlkit = "^0.11.1"

[tool.poetry.dependencies.importlib-metadata]
version = "*"
python = "<3.10"

[tool.poetry.dependencies.tomli]
version = "^2"
python = "<3.11"

[tool.poetry.group.dev.dependencies]
mondeja-bump = "*"

[tool.poetry.group.test.dependencies]
pytest = "^7"
coverage = "^6.4"
pre-commit = "^2.9"
contextlib-chdir = "^1"
pytest-maybe-raises = "^0.1.1"
pytest-mock = "^3"
flask = "^2"
pysetenv = "^1"

[tool.poetry.group.doc.dependencies]
Sphinx = "^4"
sphinx-rtd-theme = "^1"
sphinx-tabs = "~3.3"
chios = "^1"
sphinx-argparse-cli = "^1.8.3"
sphinx-github-changelog = "^1.2.0"

[tool.poetry.group.doc.dependencies.importlib-metadata]
version = "*"
python = "<3.10"

[tool.poetry.scripts]
project-config = "project_config.__main__:main"

[tool.poetry.plugins."project_config.plugins"]
inclusion = "project_config.plugins.inclusion:InclusionPlugin"
jmespath = "project_config.plugins.jmespath:JMESPathPlugin"
existence = "project_config.plugins.existence:ExistencePlugin"

[tool.poetry.plugins.pytest11]
project-config-tester = "project_config.tests.pytest_plugin.plugin"

[[tool.bump.targets]]
file = "pyproject.toml"
regex = "(version = [\"'])(\\d+\\.\\d+\\.\\d+)([\"'])"

[[tool.bump.targets]]
file = "docs/install.rst"
regex = "(v)(\\d+\\.\\d+\\.\\d+)"

[[tool.bump.targets]]
file = "contrib/npm/package.json"
regex = "(\"version\": \")(\\d+\\.\\d+\\.\\d+)(\")"

[[tool.bump.targets]]
file = "contrib/mega-linter-plugin-project-config/project-config.megalinter-descriptor.yml"

[tool.project-config]
cache = "2 days"
style = [
  # Basic Python style: use poetry, pre-commit, Github workflows, etc
  "gh://mondeja/project-config-styles/python/base.json5",
  # Minimum Python version
  "gh://mondeja/project-config-styles/python/version/min-37.json5",
  # Double quotes: formatting with Black
  "gh://mondeja/project-config-styles/python/double-quotes.json5",
  # Maximum line length
  "gh://mondeja/project-config-styles/python/line-length-80.json5",
  # Testing styles: use pytest
  "gh://mondeja/project-config-styles/python/tests.json5",
  # Documentation styles: use Sphinx with Readthedocs theme
  "gh://mondeja/project-config-styles/python/sphinx.json5",
  "gh://mondeja/project-config-styles/python/google-docstrings.json5",
  "gh://mondeja/project-config-styles/python/readthedocs.json5",
  # Type checking with mypy
  "gh://mondeja/project-config-styles/python/mypy.json5"
]

[tool.poetry-exec-plugin.commands]
t = "coverage run -m pytest"
test = "coverage run -m pytest"
"test:show" = "pysetenv PROJECT_CONFIG_TESTS_E2E=true coverage run -m pytest &&\ncoverage html &&\npython -c 'import webbrowser as w;w.open(\"http://127.0.0.1:8088\")' &&\npython -m http.server 8088 -b localhost -d htmlcov\n"
"test:e2e" = "pysetenv PROJECT_CONFIG_TESTS_E2E=true coverage run -m pytest"
doc = "python -m sphinx -n -T -E -W docs docs/_build/html"
"doc:show" = "python -m sphinx -n -T -E -W docs docs/_build/html &&\npython -c 'import webbrowser as w;w.open(\"http://127.0.0.1:8089\")' &&\npython -m http.server 8089 -b localhost -d docs/_build/html"
lint = "pre-commit run -a"
self = "project-config"
"clean:cache" = "project-config clean cache"

[tool.pytest.ini_options]
addopts = "-s"

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__\\(",
  "raise NotImplementedError",
  "@(abc\\.)?abstractmethod",
  "class .*\\bProtocol\\):",
  "if __name__ == [\"']__main__[\"']:"
]
omit = ["src/project_config/tests/*"]

[tool.coverage.run]
source = ["src"]

[tool.mypy]
python_version = "3.7"
strict = true

[tool.isort]
lines_after_imports = 2
multi_line_output = 3
line_length = 79
use_parentheses = true
combine_as_imports = true
include_trailing_comma = true
py_version = 37
known_tests = "tests"
sections = [
  "FUTURE",
  "STDLIB",
  "THIRDPARTY",
  "FIRSTPARTY",
  "TESTS",
  "LOCALFOLDER"
]
remove_redundant_aliases = true
extra_standard_library = [
  "contextvars",
  "dataclasses",
  "importlib.resources",
  "importlib.metadata",
  "zoneinfo",
  "graphlib",
  "tomllib",
  "wsgiref.types"
]

[tool.black]
line-length = 80
target-version = ["py37"]

[tool.flakeheaven]
max-line-length = 80
inline-quotes = "double"
docstring-convention = "google"
pytest-parametrize-values-type = "tuple"
pytest-fixture-no-parentheses = true
unused-arguments-ignore-abstract-functions = true

[tool.flakeheaven.plugins]
pycodestyle = ["+*", "-W503", "-E203"]
pyflakes = ["+*"]
pylint = ["+*"]
flake8-builtins = ["+*"]
flake8-comprehensions = ["+*"]
flake8-docstrings = ["+*", "-D105", "-D107"]
flake8-executable = ["+*"]
flake8-implicit-str-concat = ["+*"]
flake8-print = ["+*"]
flake8-printf-formatting = ["+*"]
flake8-pytest-style = ["+*"]
flake8-bugbear = ["+*"]
flake8-encodings = ["+*"]
flake8-no-pep420 = ["+*"]
flake8-absolute-import = ["+*"]
flake8-unused-arguments = ["+*"]
flake8-slots = ["+*"]
dlint = ["+*"]

[tool.flakeheaven.exceptions."tests/**"]
flake8-docstrings = [
  "-D100",
  "-D101",
  "-D102",
  "-D103",
  "-D104",
  "-D107",
  "-D205",
  "-D415"
]
flake8-no-pep420 = ["-INP001"]

[tool.flakeheaven.exceptions."docs/**"]
flake8-docstrings = ["-D100", "-D101", "-D102"]
flake8-print = ["-T201"]
flake8-no-pep420 = ["-INP001"]
flake8-unused-arguments = ["-*"]

[tool.flakeheaven.exceptions."src/project_config/plugins/**"]
flake8-docstrings = ["-D101", "-D102", "-D417"]

[tool.flakeheaven.exceptions."docs/dev/plugins.rst"]
pyflakes = ["-F401"]

[tool.flakeheaven.exceptions."examples/**"]
flake8-docstrings = ["-D100"]
flake8-no-pep420 = ["-INP001"]

[build-system]
requires = ["poetry-core>=1.1.0b2"]
build-backend = "poetry.core.masonry.api"
