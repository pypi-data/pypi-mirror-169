##################### generated by xml-casa (v2) from sdm.xml #######################
##################### 1791be80da03123c83ee65af1079c576 ##############################
from __future__ import absolute_import 
from .__casac__ import sdm as _sdm

from .platform import str_encode as _str_ec
from .platform import str_decode as _str_dc
from .platform import dict_encode as _dict_ec
from .platform import dict_decode as _dict_dc
from .platform import dict_encode as _quant_ec
from .platform import dict_decode as _quant_dc
from .platform import encode as _any_ec
from .platform import decode as _any_dc
from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class sdm:
    _info_group_ = """sdm"""
    _info_desc_ = """Manipulate or examine SDM datasets"""
    ### self, path=''
    def __init__(self, path='', *args, **kwargs):
        """
        """
        schema = {'path': {'type': 'cPath', 'coerce': _coerce.expand_path}}
        doc = {'path': path}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _sdm(_str_ec(_pc.document['path']))

    def summarystr(self):
        """
        """
        return _str_dc(self._swigobj.summarystr())

    def fromms(self, mspath='', datacolumn='DATA', archiveid='S0', rangeid='X1', subscanduration=float(24.0*3600.0), sbduration=float(2700.0), apcorrected=False, verbose=True):
        """Create an sdm object with a non-existant path, and then use this function to populate
        the directory (which will be created) with the specified measurement set.
        
        """
        return self._swigobj.fromms(_str_ec(mspath), _str_ec(datacolumn), _str_ec(archiveid), _str_ec(rangeid), subscanduration, sbduration, apcorrected, verbose)

    def toms(self, vis='', createmms=False, separationaxis='auto', numsubms='auto', corr_mode='all', srt='all', time_sampling='all', ocorr_mode='ca', compression=False, lazy=False, asis='', wvr_corrected_data='no', scans='', ignore_time=False, process_syspower=True, process_caldevice=True, process_pointing=True, process_flags=True, tbuff=float(0.0), applyflags=False, savecmds=False, outfile='', flagbackup=True, verbose=False, overwrite=False, bdfflags=False, with_pointing_correction=False, convert_ephem2geo=True, polyephem_tabtimestep=float(0.)):
        """
        """
        return self._swigobj.toms(_str_ec(vis), createmms, _str_ec(separationaxis), _any_ec(numsubms), _str_ec(corr_mode), _str_ec(srt), _str_ec(time_sampling), _str_ec(ocorr_mode), compression, lazy, _str_ec(asis), _str_ec(wvr_corrected_data), _str_ec(scans), ignore_time, process_syspower, process_caldevice, process_pointing, process_flags, tbuff, applyflags, savecmds, _any_ec(outfile), flagbackup, verbose, overwrite, bdfflags, with_pointing_correction, convert_ephem2geo, polyephem_tabtimestep)

