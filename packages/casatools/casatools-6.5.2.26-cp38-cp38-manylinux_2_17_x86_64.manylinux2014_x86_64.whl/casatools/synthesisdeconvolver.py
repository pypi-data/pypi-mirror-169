##################### generated by xml-casa (v2) from synthesisdeconvolver.xml ######
##################### 1f8d10faaa180a62198e3dacd443e069 ##############################
from __future__ import absolute_import 
from .__casac__ import synthesisdeconvolver as _synthesisdeconvolver

from .platform import str_encode as _str_ec
from .platform import str_decode as _str_dc
from .platform import dict_encode as _dict_ec
from .platform import dict_decode as _dict_dc
from .platform import dict_encode as _quant_ec
from .platform import dict_decode as _quant_dc
from .platform import encode as _any_ec
from .platform import decode as _any_dc
from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class synthesisdeconvolver:
    _info_group_ = """synthesisdeconvolver"""
    _info_desc_ = """tool for synthesis imaging"""
    ### self
    def __init__(self, *args, **kwargs):
        """This is used to construct {tt synthesisdeconvolver} tool.
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _synthesisdeconvolver()

    def setupdeconvolution(self, decpars={ }):
        """
        """
        return self._swigobj.setupdeconvolution(_dict_ec(decpars))

    def initminorcycle(self):
        """
        """
        return _dict_dc(self._swigobj.initminorcycle())

    def setupmask(self):
        """
        """
        return self._swigobj.setupmask()

    def interactivegui(self, iterbotrecord={ }):
        """
        """
        return _dict_dc(self._swigobj.interactivegui(_dict_ec(iterbotrecord)))

    def estimatememory(self, imsize=[  ]):
        """This function returns an estimate of the memory (RAM) to be used by synthesisdeconvolver tool. Need to be run after functions setdata and defineimage are done
        """
        return _any_dc(self._swigobj.estimatememory(imsize))

    def executeminorcycle(self, iterbotrecord={ }):
        """
        """
        return _dict_dc(self._swigobj.executeminorcycle(_dict_ec(iterbotrecord)))

    def restore(self):
        """
        """
        return self._swigobj.restore()

    def pbcor(self):
        """
        """
        return self._swigobj.pbcor()

    def checkrestoringbeam(self):
        """
        """
        return self._swigobj.checkrestoringbeam()

    def done(self):
        """
        """
        return self._swigobj.done()

