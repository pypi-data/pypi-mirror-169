##################### generated by xml-casa (v2) from iterbotsink.xml ###############
##################### c00af6257704ea25101b2b6bd2625b58 ##############################
from __future__ import absolute_import 
from .__casac__ import iterbotsink as _iterbotsink

from .platform import str_encode as _str_ec
from .platform import str_decode as _str_dc
from .platform import dict_encode as _dict_ec
from .platform import dict_decode as _dict_dc
from .platform import dict_encode as _quant_ec
from .platform import dict_decode as _quant_dc
from .platform import encode as _any_ec
from .platform import decode as _any_dc
from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class iterbotsink:
    _info_group_ = """synthesisiterbot"""
    _info_desc_ = """tool for synthesis imaging"""
    ### self
    def __init__(self, *args, **kwargs):
        """This is used to construct {tt synthesisiterbot} tool.
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _iterbotsink()

    def setupiteration(self, iterpars={ }):
        """
        """
        return _dict_dc(self._swigobj.setupiteration(_dict_ec(iterpars)))

    def cleanComplete(self, lastcyclecheck=False, reachedMajorLimit=False):
        """
        """
        return self._swigobj.cleanComplete(lastcyclecheck, reachedMajorLimit)

    def endmajorcycle(self):
        """
        """
        return self._swigobj.endmajorcycle()

    def resetminorcycleinfo(self):
        """
        """
        return self._swigobj.resetminorcycleinfo()

    def getminorcyclecontrols(self):
        """
        """
        return _dict_dc(self._swigobj.getminorcyclecontrols())

    def mergeexecrecord(self, execrecord={ }, immod=int()):
        """
        """
        return self._swigobj.mergeexecrecord(_dict_ec(execrecord), immod)

    def changestopflag(self, stopflag=False):
        """
        """
        return self._swigobj.changestopflag(stopflag)

    def mergeinitrecord(self, initrecord={ }):
        """
        """
        return self._swigobj.mergeinitrecord(_dict_ec(initrecord))

    def getiterationdetails(self):
        """
        """
        return _dict_dc(self._swigobj.getiterationdetails())

    def pauseforinteraction(self):
        """
        """
        return _dict_dc(self._swigobj.pauseforinteraction())

    def getiterationsummary(self):
        """
        """
        return _dict_dc(self._swigobj.getiterationsummary())

    def done(self):
        """
        """
        return self._swigobj.done()

