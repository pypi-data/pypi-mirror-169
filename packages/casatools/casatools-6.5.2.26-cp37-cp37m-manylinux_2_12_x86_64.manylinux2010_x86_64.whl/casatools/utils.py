##################### generated by xml-casa (v2) from utils.xml #####################
##################### 399b3a10be4cfe2afa2f5b5a567e3d20 ##############################
from __future__ import absolute_import 
from .__casac__ import utils as _utils

from .platform import str_encode as _str_ec
from .platform import str_decode as _str_dc
from .platform import dict_encode as _dict_ec
from .platform import dict_decode as _dict_dc
from .platform import dict_encode as _quant_ec
from .platform import dict_decode as _quant_dc
from .platform import encode as _any_ec
from .platform import decode as _any_dc
from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class utils:
    _info_group_ = """utils"""
    _info_desc_ = """Utility component, verified, xml translator"""
    ### self
    def __init__(self, *args, **kwargs):
        """
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _utils()

    def getrc(self, rcvar=''):
        """
        """
        return _str_dc(self._swigobj.getrc(_str_ec(rcvar)))

    def removetable(self, tablenames=[  ]):
        """
        """
        return self._swigobj.removetable(_str_ec(tablenames))

    def tableinfo(self, tablename=''):
        """Currently this only returns the pid of the process locking the table (lockpid), if the lock
        is permanent (lockperm), and the status (lockstatus) -- 'not in use', 'open', 'read', 'write',
        or 'unknown'. However, the hope is that this will eventually return a complete description of
        the table.
        
        """
        return _dict_dc(self._swigobj.tableinfo(_str_ec(tablename)))

    def lockedtables(self):
        """
        """
        return _str_dc(self._swigobj.lockedtables())

    def hostinfo(self):
        """
        """
        return _dict_dc(self._swigobj.hostinfo())

    def c_exception(self):
        """Returns detailed information from the last CASA C++ exception (i.e., AipsError).  The
        exception message and the stack trace (mangled; use the shell's c++filt to demangle)
        from the last CASA C++ exception.  The information is from the last one generated
        and may not represent an exception from the last action; c_exception_clear can be
        used to remove stale information.  The information's exception might also
        have been caught in the C++ code and not have been translated into a Python-level
        exception.
        
        """
        return _str_dc(self._swigobj.c_exception())

    def c_exception_clear(self):
        """Clears the CASA C++ exception information.  This allows the user to be sure that
        information retrieved using c_exception is not from an exception in the
        distant past.
        
        """
        return self._swigobj.c_exception_clear()

    def _crash_reporter_initialize(self, crashDumpDirectory, crashDumpPosterApplication, crashPostingUrl, logFile):
        """Initializes the crash reporter which will generate a crash report if casapy
        crashes.  For reporter purposes a crash is the reception of an signal by
        casapy which would normally result in the program being terminated.  This includes
        segfaults, aborts, etc., plus any unhandled C++ exceptions (C++ generates an
        abort signal for unhandled exceptions).  This method is intended for use by the
        casapy infrastructure and should not be called by other code or by users; however,
        the call will only install the crash reporter the first time it is called so any
        subsequent calls should be no-ops.  Returns true if initialization occurred and
        false if the crash reporter was stubbed out (i.e., symbol UseCrashReporter was
        not defined).
        
        """
        return _str_dc(self._swigobj._crash_reporter_initialize(_str_ec(crashDumpDirectory), _str_ec(crashDumpPosterApplication), _str_ec(crashPostingUrl), _str_ec(logFile)))

    def _trigger_segfault(self, faultType=int(0)):
        """This triggers a segfault for testing the crash reporter.  Obviously you
        shouldn't call this unless that's what you want.  It's in here for
        development/debugging purposes and ought to be removed before you see this.
        
        """
        return self._swigobj._trigger_segfault(faultType)

    def tryit(self, input):
        """test variant convesion
        """
        return self._swigobj.tryit(_dict_ec(input))

    def maxint(self):
        """maximum number an C++ int can hold
        """
        return self._swigobj.maxint()

    def minint(self):
        """minimum number an C++ int can hold
        """
        return self._swigobj.minint()

    def maxlong(self):
        """maximum number an C++ long can hold
        """
        return self._swigobj.maxlong()

    def minlong(self):
        """minimum number an C++ long can hold
        """
        return self._swigobj.minlong()

    def initialize(self, python_path, distro_data_path, default_path, nogui, agg, pipeline):
        """returns true if initalization was performed; returns false if initialization was already done
        """
        return self._swigobj.initialize(_str_ec(python_path), _str_ec(distro_data_path), _str_ec(default_path), nogui, agg, pipeline)

    def rundata(self):
        """path to the measures data
        """
        return _str_dc(self._swigobj.rundata())

    def setrundata(self, path=''):
        """Set path to the measures data. Must be called during initalization
        before Measures module is initialized.
        """
        return self._swigobj.setrundata(_str_ec(path))

    def defaultpath(self):
        """Returns the default data path. This path is used unless the user has set the current path to something else using the setpath function.
        """
        return _str_dc(self._swigobj.defaultpath())

    def setpath(self, dirs=[  ]):
        """Sets the data path to the specified list of directories. Returns true if all directories were added
        returns false otherwise.
        """
        return self._swigobj.setpath(_str_ec(dirs))

    def getpath(self):
        """Returns the list of directories that are currently in the data path.
        """
        return _str_dc(self._swigobj.getpath())

    def clearpath(self):
        """Removes all directories from the data path.
        """
        return self._swigobj.clearpath()

    def resolve(self, path=''):
        """If the provided path already represents a file or a directory, it is returned. If it does not,
        this function tries to find a complete path by matching up this partial directory with the
        elements of the data path.
        """
        return _str_dc(self._swigobj.resolve(_str_ec(path)))

    def getnogui(self):
        """Returns the value of the nogui parameter used at startup. Defaults to False.
        
        """
        return self._swigobj.getnogui()

    def getagg(self):
        """Returns the value of the agg parameter used at startup. Defaults to False.
        
        """
        return self._swigobj.getagg()

    def getpipeline(self):
        """Returns the value of the pipeline parameter used at startup. Defaults to False.
        
        """
        return self._swigobj.getpipeline()

    def registry(self):
        """returns record containing the URI for the CASAtools registry which can be used by other unix processes to access the registry
        """
        return _dict_dc(self._swigobj.registry())

    def services(self):
        """returns record containing the information about the services that have been registered with CASAtools
        """
        return _dict_dc(self._swigobj.services())

    def remove_service(self, uri=''):
        """Remove a service from the registry using the URI for the
        service. The URI should be a string that looks something
        like "0.0.0.0:34101". This function returns true if the
        removal was successful. Otherwise, it returns false.
        """
        return self._swigobj.remove_service(_str_ec(uri))

    def shutdown(self):
        """python is shutting down cleanup anything that is outstanding
        """
        return self._swigobj.shutdown()

    def getpython(self):
        """
        """
        return _str_dc(self._swigobj.getpython())

    def version(self):
        """Returns a four element vector representing the version (major, minor, patch and feature).
        """
        return self._swigobj.version()

    def version_variant(self):
        """Returns the target instrument. This helps distinguish versions that otherwise may have the same version number
        """
        return _str_dc(self._swigobj.version_variant())

    def version_desc(self):
        """The descriptive string describes a particular packaged version. During a development
        cycle there are different sorts of packaged distributions. For example, a development
        version ("DEV") or a release version ("REL").
        """
        return _str_dc(self._swigobj.version_desc())

    def version_info(self):
        """Returns a description string that includes the version information and the descriptive string..
        """
        return _str_dc(self._swigobj.version_info())

    def version_string(self):
        """Returns a description string that includes the version information and the descriptive string..
        """
        return _str_dc(self._swigobj.version_string())

    def compare_version(self, comparitor, vec):
        """Returns a description string that includes the version information and the descriptive string..
        """
        return self._swigobj.compare_version(_str_ec(comparitor), vec)

    def toolversion(self):
        """Returns a two element vector representing the CASAtools version (year, build). This is only
        returned with CASA 6. With CASA 5, an zero element vector is returned.
        """
        return self._swigobj.toolversion()

    def toolversion_string(self):
        """Returns a description string that shows the CASA 6 CASAtools version information as a descriptive string.
        With CASA 5, a zero length string is returned.
        """
        return _str_dc(self._swigobj.toolversion_string())

