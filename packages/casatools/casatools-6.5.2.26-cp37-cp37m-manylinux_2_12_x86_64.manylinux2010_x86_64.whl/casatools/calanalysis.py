##################### generated by xml-casa (v2) from calanalysis.xml ###############
##################### 876211c3a83f995d560f64a2e19f5adf ##############################
from __future__ import absolute_import 
from .__casac__ import calanalysis as _calanalysis

from .platform import str_encode as _str_ec
from .platform import str_decode as _str_dc
from .platform import dict_encode as _dict_ec
from .platform import dict_decode as _dict_dc
from .platform import dict_encode as _quant_ec
from .platform import dict_decode as _quant_dc
from .platform import encode as _any_ec
from .platform import decode as _any_dc
from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class calanalysis:
    _info_group_ = """calanalysis"""
    _info_desc_ = """
Get and fit data from a calibration table (CASA 3.4 and later).
"""
    ### self
    def __init__(self, *args, **kwargs):
        """Construct a calibration analysis tool.
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _calanalysis()

    def open(self, caltable=''):
        """This member function opens a calibration table.
        """
        return self._swigobj.open(_str_ec(caltable))

    def close(self):
        """This member function closes a calibration table.
        """
        return self._swigobj.close()

    def calname(self):
        """This member function returns calibration table name.
        """
        return _str_dc(self._swigobj.calname())

    def msname(self):
        """This member function returns the name of the MS that created this calibration
        table.
        """
        return _str_dc(self._swigobj.msname())

    def viscal(self):
        """This member function returns the type of calibration table ('B', 'G', 'T',
        etc.).
        """
        return _str_dc(self._swigobj.viscal())

    def partype(self):
        """This member function returns the parameter column type in the calibration table
        ('Complex' or 'Float').
        """
        return _str_dc(self._swigobj.partype())

    def polbasis(self):
        """This member function returns the polarization basis in the calibration table
        ('L' for linear or 'C' for circular).
        """
        return _str_dc(self._swigobj.polbasis())

    def numfield(self):
        """This member function returns the number of fields in the calibration table.
        """
        return self._swigobj.numfield()

    def field(self, name=True):
        """This member function returns the fields in the calibration table.
        """
        return _str_dc(self._swigobj.field(name))

    def numantenna(self):
        """This member function returns the number of antennas in the calibration table.
        """
        return self._swigobj.numantenna()

    def numantenna1(self):
        """This member function returns the number of antenna 1s in the calibration table.
        """
        return self._swigobj.numantenna1()

    def numantenna2(self):
        """This member function returns the number of antenna 2s in the calibration table.
        """
        return self._swigobj.numantenna2()

    def antenna(self, name=True):
        """This member function returns the antennas in the calibration table.
        """
        return _str_dc(self._swigobj.antenna(name))

    def antenna1(self, name=True):
        """This member function returns the antenna 1s in the calibration table.
        """
        return _str_dc(self._swigobj.antenna1(name))

    def antenna2(self, name=True):
        """This member function returns the antenna 2s in the calibration table.
        """
        return _str_dc(self._swigobj.antenna2(name))

    def numfeed(self):
        """This member function returns the number of feeds in the calibration table.
        """
        return self._swigobj.numfeed()

    def feed(self):
        """This member function returns the feeds in the calibration table.
        """
        return _str_dc(self._swigobj.feed())

    def numtime(self):
        """This member function returns the number of times in the calibration table.
        """
        return self._swigobj.numtime()

    def time(self):
        """This member function returns the times (in MJD seconds) in the calibration
        table.
        """
        return self._swigobj.time()

    def numspw(self):
        """This member function returns the number of spectral windows in the calibration
        table.
        """
        return self._swigobj.numspw()

    def spw(self, name=True):
        """This member function returns the spectral windows in the calibration table.
        """
        return _str_dc(self._swigobj.spw(name))

    def numchannel(self):
        """This member function returns the number of channels per spectral window in the
        calibration table.
        """
        return self._swigobj.numchannel()

    def freq(self):
        """This member function returns the frequencies per spectral window in the
        calibration table.
        """
        return _dict_dc(self._swigobj.freq())

    def get(self, field=[ ], antenna=[ ], timerange=[ ], spw=[ ], feed=[ ], axis='TIME', ap='AMPLITUDE', norm=False, unwrap=False, jumpmax=float(0.0)):
        """This member function returns the calibration data.
        """
        return _dict_dc(self._swigobj.get(_any_ec(field), _any_ec(antenna), _any_ec(timerange), _any_ec(spw), _any_ec(feed), _str_ec(axis), _str_ec(ap), norm, unwrap, jumpmax))

    def fit(self, field=[ ], antenna=[ ], timerange=[ ], spw=[ ], feed=[ ], axis='TIME', ap='AMPLITUDE', norm=False, unwrap=False, jumpmax=float(0.0), order='AVERAGE', type='LSQ', weight=False):
        """This member function returns the calibration data and fits along the
        non-iteration axis.
        """
        return _dict_dc(self._swigobj.fit(_any_ec(field), _any_ec(antenna), _any_ec(timerange), _any_ec(spw), _any_ec(feed), _str_ec(axis), _str_ec(ap), norm, unwrap, jumpmax, _str_ec(order), _str_ec(type), weight))

