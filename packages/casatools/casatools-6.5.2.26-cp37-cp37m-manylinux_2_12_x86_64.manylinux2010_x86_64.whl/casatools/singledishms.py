##################### generated by xml-casa (v2) from singledishms.xml ##############
##################### a4df7bdedb92ac3c6488a5f6ac49bdc7 ##############################
from __future__ import absolute_import 
from .__casac__ import singledishms as _singledishms

from .platform import str_encode as _str_ec
from .platform import str_decode as _str_dc
from .platform import dict_encode as _dict_ec
from .platform import dict_decode as _dict_dc
from .platform import dict_encode as _quant_ec
from .platform import dict_decode as _quant_dc
from .platform import encode as _any_ec
from .platform import decode as _any_dc
from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class singledishms:
    _info_group_ = """singledishms"""
    _info_desc_ = """New single dish tool interface to process an MS"""
    ### self
    def __init__(self, *args, **kwargs):
        """This is used to construct a singledishms tool instance. The created instance is
        just like the default one ('sdms') but physically independent from it.
        This is useful when users want to create their own tool instance inside scripts/modules
        to avoid possible conflicts that may happen when using the default tool instance
        from various places.
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _singledishms()

    def open(self, ms_name=''):
        """Close the current MeasurementSet and open a new MeasurementSet
        instead. The current state of sdms is retained, except for
        the data selection.
        """
        return self._swigobj.open(_str_ec(ms_name))

    def close(self):
        """This is used to close sdms tools. Note that the
        data is written to disk and detached from sdms tool.
        This is a synonym for done.
        
        """
        return self._swigobj.close()

    def done(self):
        """This is used to close and sdms tools. Note that the
        data is written to disk  and detached from sdms tool.
        This is a synonym for close.
        
        """
        return self._swigobj.done()

    def name(self):
        """Returns the name of the attached MeasurementSet.
        
        """
        return _str_dc(self._swigobj.name())

    def subtract_baseline(self, datacolumn='data', outfile='', bloutput='', dosubtract=True, spw=[ ], updateweight=False, sigmavalue='stddev', blfunc='poly', order=int(5), clip_threshold_sigma=float(3.0), num_fitting_max=int(1), linefinding=False, threshold=float(5.0), avg_limit=int(4), minwidth=int(4), edge=[ int(0),int(0) ]):
        """Fit baseline and subtract it from selected spectra
        
        """
        return self._swigobj.subtract_baseline(_str_ec(datacolumn), _str_ec(outfile), _str_ec(bloutput), dosubtract, _any_ec(spw), updateweight, _str_ec(sigmavalue), _str_ec(blfunc), order, clip_threshold_sigma, num_fitting_max, linefinding, threshold, avg_limit, minwidth, edge)

    def subtract_baseline_cspline(self, datacolumn='data', outfile='', bloutput='', dosubtract=True, spw=[ ], updateweight=False, sigmavalue='stddev', npiece=int(5), clip_threshold_sigma=float(3.0), num_fitting_max=int(1), linefinding=False, threshold=float(5.0), avg_limit=int(4), minwidth=int(4), edge=[ int(0),int(0) ]):
        """Fit baseline and subtract it from selected spectra
        
        """
        return self._swigobj.subtract_baseline_cspline(_str_ec(datacolumn), _str_ec(outfile), _str_ec(bloutput), dosubtract, _any_ec(spw), updateweight, _str_ec(sigmavalue), npiece, clip_threshold_sigma, num_fitting_max, linefinding, threshold, avg_limit, minwidth, edge)

    def subtract_baseline_sinusoid(self, datacolumn='data', outfile='', bloutput='', dosubtract=True, spw=[ ], updateweight=False, sigmavalue='stddev', addwn='0', rejwn='', applyfft=False, fftmethod='fft', fftthresh=[ ], clip_threshold_sigma=float(3.0), num_fitting_max=int(1), linefinding=False, threshold=float(5.0), avg_limit=int(4), minwidth=int(4), edge=[ int(0),int(0) ]):
        """Fit baseline and subtract it from selected spectra
        
        """
        return self._swigobj.subtract_baseline_sinusoid(_str_ec(datacolumn), _str_ec(outfile), _str_ec(bloutput), dosubtract, _any_ec(spw), updateweight, _str_ec(sigmavalue), _str_ec(addwn), _str_ec(rejwn), applyfft, _str_ec(fftmethod), _any_ec(fftthresh), clip_threshold_sigma, num_fitting_max, linefinding, threshold, avg_limit, minwidth, edge)

    def subtract_baseline_variable(self, datacolumn='data', outfile='', bloutput='', dosubtract=True, spw=[ ], updateweight=False, sigmavalue='stddev', blparam='', verbose=False):
        """Fit baseline and subtract it from selected spectra.
        Fit parameters for each spectrum are obtained from a text file.
        
        """
        return self._swigobj.subtract_baseline_variable(_str_ec(datacolumn), _str_ec(outfile), _str_ec(bloutput), dosubtract, _any_ec(spw), updateweight, _str_ec(sigmavalue), _str_ec(blparam), verbose)

    def apply_baseline_table(self, bltable='', datacolumn='data', spw=[ ], updateweight=False, sigmavalue='stddev', outfile=''):
        """For each row of given baseline table, read baseline parameters,
        construct baseline, then subtract it from the corresponding spectrum
        in the MS.
        
        """
        return self._swigobj.apply_baseline_table(_str_ec(bltable), _str_ec(datacolumn), _any_ec(spw), updateweight, _str_ec(sigmavalue), _str_ec(outfile))

    def fit_line(self, datacolumn='data', spw=[ ], pol=[ ], timebin='', timespan='', polaverage='', fitfunc='gaussian', nfit='0', linefinding=False, threshold=float(5.0), avg_limit=int(4), minwidth=int(4), edge=[ int(0),int(0) ], tempfile='', tempoutfile=''):
        """Fit line profile to selected spectra and obtain the best-fit parameter values
        
        """
        return self._swigobj.fit_line(_str_ec(datacolumn), _any_ec(spw), _any_ec(pol), _str_ec(timebin), _str_ec(timespan), _str_ec(polaverage), _str_ec(fitfunc), _str_ec(nfit), linefinding, threshold, avg_limit, minwidth, edge, _str_ec(tempfile), _str_ec(tempoutfile))

    def set_selection(self, spw=[ ], field=[ ], antenna=[ ], timerange=[ ], scan=[ ], observation=[ ], polarization=[ ], beam=[ ], intent=[ ], feed=[ ], taql='', reindex=True):
        """
        """
        return self._swigobj.set_selection(_any_ec(spw), _any_ec(field), _any_ec(antenna), _any_ec(timerange), _any_ec(scan), _any_ec(observation), _any_ec(polarization), _any_ec(beam), _any_ec(intent), _any_ec(feed), _str_ec(taql), reindex)

    def smooth(self, type='gaussian', width=float(0.0), datacolumn='data', outfile=''):
        """NOTE: currently only Gaussian kernel is supported.
        
        """
        return self._swigobj.smooth(_str_ec(type), width, _str_ec(datacolumn), _str_ec(outfile))

    def atmcor(self, config={ }, datacolumn='data', outfile=''):
        """Offline atmospheric correction of calibrated data
        
        """
        return self._swigobj.atmcor(_dict_ec(config), _str_ec(datacolumn), _str_ec(outfile))

    def importasap(self, infile='', outfile='', parallel=False):
        """Import ASAP Scantable data to MeasurementSet.
        
        """
        return self._swigobj.importasap(_str_ec(infile), _str_ec(outfile), parallel)

    def importnro(self, infile='', outfile='', parallel=False):
        """Import NOSTAR data to MeasurementSet.
        
        """
        return self._swigobj.importnro(_str_ec(infile), _str_ec(outfile), parallel)

