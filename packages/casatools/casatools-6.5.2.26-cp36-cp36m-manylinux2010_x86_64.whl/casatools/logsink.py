##################### generated by xml-casa (v2) from logsink.xml ###################
##################### 89863e5293a11a53fd6e9ab302e9d786 ##############################
from __future__ import absolute_import 
from .__casac__ import logsink as _logsink

from .platform import str_encode as _str_ec
from .platform import str_decode as _str_dc
from .platform import dict_encode as _dict_ec
from .platform import dict_decode as _dict_dc
from .platform import dict_encode as _quant_ec
from .platform import dict_decode as _quant_dc
from .platform import encode as _any_ec
from .platform import decode as _any_dc
from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class logsink:
    _info_group_ = """logsink"""
    _info_desc_ = """tool for logsink"""
    ### self, filename='casa.log', enable_telemetry=False, telemetry_logfile='false'
    def __init__(self, filename='casa.log', enable_telemetry=False, telemetry_logfile='false', *args, **kwargs):
        """
        """
        schema = {'filename': {'type': 'cStr', 'coerce': _coerce.to_str}, 'enable_telemetry': {'type': 'cBool'}, 'telemetry_logfile': {'type': 'cStr', 'coerce': _coerce.to_str}}
        doc = {'filename': filename, 'enable_telemetry': enable_telemetry, 'telemetry_logfile': telemetry_logfile}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _logsink(_str_ec(_pc.document['filename']), _pc.document['enable_telemetry'], _str_ec(_pc.document['telemetry_logfile']))

    def origin(self, fromwhere):
        """Sets the origin of messages to be displayed
        """
        return self._swigobj.origin(_str_ec(fromwhere))

    def processorOrigin(self, fromwhere):
        """Sets the CASA processor origin which is shown at the end of each log origin
        """
        return self._swigobj.processorOrigin(_str_ec(fromwhere))

    def filter(self, level='DEBUG2'):
        """Set the filter level of logging messages to be displayed.
        This will determine what log messages go into the log file. The logger itself
        can adjust what gets displayed so you could set INFO5 and then filter in the
        logger everything above INFO1.
        """
        return self._swigobj.filter(_str_ec(level))

    def filterMsg(self, msgList=[  ]):
        """Add messages to the filter out list
        """
        return self._swigobj.filterMsg(_str_ec(msgList))

    def clearFilterMsgList(self):
        """Clear list of messages to be filter out
        """
        return self._swigobj.clearFilterMsgList()

    def post(self, message, priority='INFO', origin=''):
        """If the message passes the filter, write it (same as postLocally)
        """
        return self._swigobj.post(_str_ec(message), _str_ec(priority), _str_ec(origin))

    def poststat(self, message, origin=''):
        """Write telemetry data
        """
        return self._swigobj.poststat(_str_ec(message), _str_ec(origin))

    def postLocally(self, message, priority='INFO', origin=''):
        """If the message passes the filter, write it
        """
        return self._swigobj.postLocally(_str_ec(message), _str_ec(priority), _str_ec(origin))

    def localId(self):
        """Returns the id for this class
        """
        return _str_dc(self._swigobj.localId())

    def version(self):
        """Returns the version of CASA as well as sending it to the log
        """
        return _str_dc(self._swigobj.version())

    def getstatslogfile(self):
        """String representation of statistics logfile path
        """
        return _str_dc(self._swigobj.getstatslogfile())

    def id(self):
        """Returns the ID of the LogSink in use
        """
        return _str_dc(self._swigobj.id())

    def setglobal(self, isglobal=True):
        """
        """
        return self._swigobj.setglobal(isglobal)

    def setlogfile(self, filename='casapy.log'):
        """
        """
        return self._swigobj.setlogfile(_str_ec(filename))

    def setstatslogfile(self, filename='casapy.log'):
        """
        """
        return self._swigobj.setstatslogfile(_str_ec(filename))

    def showconsole(self, onconsole=False):
        """
        """
        return self._swigobj.showconsole(onconsole)

    def logfile(self):
        """Returns the full path of the log file
        """
        return _str_dc(self._swigobj.logfile())

    def ompNumThreadsTest(self):
        """
        """
        return self._swigobj.ompNumThreadsTest()

    def ompGetNumThreads(self):
        """
        """
        return self._swigobj.ompGetNumThreads()

    def ompSetNumThreads(self, numThreads=int(1)):
        """
        """
        return self._swigobj.ompSetNumThreads(numThreads)

    def setMemoryTotal(self, memory=int(0)):
        """
        """
        return self._swigobj.setMemoryTotal(memory)

    def setMemoryFraction(self, memfrac=int(0)):
        """
        """
        return self._swigobj.setMemoryFraction(memfrac)

    def setNumCPUs(self, cores=int(0)):
        """
        """
        return self._swigobj.setNumCPUs(cores)

    def getMemoryTotal(self, use_aipsrc=True):
        """
        """
        return self._swigobj.getMemoryTotal(use_aipsrc)

    def getNumCPUs(self, use_aipsrc=True):
        """
        """
        return self._swigobj.getNumCPUs(use_aipsrc)

    def getOrigin(self):
        """Gets the origin of messages to be displayed
        """
        return _str_dc(self._swigobj.getOrigin())

