import os
import os.path
import re
import string
import datetime

from urllib.parse import urlparse, parse_qs

import logging
logger = logging.getLogger(__name__)

from . import __version__ as version_str


_ltx_arg_safe = r'-:;&?/.+=^_\[\]' + string.ascii_letters + string.digits

_rx_escape = re.compile(
    r'(?:(?P<pc>%(?P<pchex>[a-fA-F0-9]{2}))|(?P<char>[^'+_ltx_arg_safe+']))'
)

def _makeltxsafe(s):
    def _do_replace(m):
        if m.group('pc'):
            # use \lplxHexChar{FF} instead
            return r'\lplxHexChar{'+m.group('pchex')+'}'
        return r'\lplxHexChar{%02x}'%(ord(m.group()))
    return _rx_escape.sub(_do_replace, s)


class LplxPictureEnvExporter:
    def __init__(self, *, include_comments_catcode=False):
        super().__init__()
        self.include_comments_catcode = include_comments_catcode

    def export(self, extractedgraphiclinks):
        e = extractedgraphiclinks # shorthand
        graphic_basefname, graphic_ext = os.path.splitext(e.graphic_fname)

        s = ""

        if self.include_comments_catcode:
            s += r"""\catcode`\%=14\relax""" + "\n"

        s += (
r"""% Automatically generated by ltxpdflinks """ + version_str + r""" on """ +
            datetime.datetime.now().isoformat() + r"""
%
% LPLX - """ + _makeltxsafe(e.graphic_fname) + r"""
%
\LPLX{version=0,ltxpdflinksversion={""" + version_str +
            r"""},features={bbox}}{%
\lplxGraphic{""" + _makeltxsafe(graphic_basefname) + r"""}{"""
            + _makeltxsafe(graphic_ext) + r"""}%
\lplxUserSpaceUnitLength{""" + e.unitlength + r"""}%
\lplxSetBbox{0}{0}""" + "{{{:.6g}}}{{{:.6g}}}".format(e.size[0], e.size[1]) + r"""%
%%BoundingBox: 0 0 """ + "{:d} {:d}".format(int(e.size[0]+0.5), int(e.size[1]+0.5)) + r"""
%%HiResBoundingBox: 0 0 """ + "{:.6g} {:.6g}".format(e.size[0], e.size[1]) + r"""
\lplxPicture{%
"""
        )

        for el in e.links:
            x, y, w, h = el.link_bbox
            lplxcmd = r'\lplxPutLink'
            lplxtailargs = ''
            if el.link_type == 'URI':
                hrstart = r"""\href{{{tgt}}}""".format(tgt=_makeltxsafe(el.link_target))
                lplxtailargs = '{{{hrstart}}}{{}}'.format(hrstart=hrstart)
            elif el.link_type == 'latex-ref':
                hrstart = r"""\hyperref[{{{tgt}}}]""".format(tgt=_makeltxsafe(el.link_target))
                lplxtailargs = '{{{hrstart}}}{{}}'.format(hrstart=hrstart)
            elif el.link_type == 'latex-cite':
                hrstart = r"""\hyperlink{{cite.{tgt}}}""".format(tgt=_makeltxsafe(el.link_target))
                lplxtailargs = '{{{hrstart}}}{{}}'.format(hrstart=hrstart)
            elif el.link_type == 'latex-box':
                lplxcmd, lplxtailargs = _make_latexbox_from_url(el.link_target, el)
            else:
                logger.warning("Ignoring link with unsupported link_type: %r", el)
                continue

            # s += (
            #     r"\put({x},{y})".format(x=el.link_bbox[0], y=el.link_bbox[1]) +
            #     "{" + s2 + "}\n"
            # )
            s += (
                r"{lplxcmd}{{{x:.8g}}}{{{y:.8g}}}{{{w:.8g}}}{{{h:.8g}}}{lplxtailargs}"
                .format(lplxcmd=lplxcmd, x=x, y=y, w=w, h=h, lplxtailargs=lplxtailargs)
                + r"%" + "\n"
            )

        s += r"""}}%""" + "\n"
        
        return s



rx_safe_box_domain_and_name = re.compile(r'^[a-zA-Z_0-9.+-]+$')
rx_macroname = re.compile(r'^[a-zA-Z]+$')

def _make_latexbox_from_url(url, el):

    x, y, w, h = el.link_bbox

    p = urlparse(url)

    qs = parse_qs(p.query)

    valign = "".join(qs.get('valign', ['b']))
    halign = "".join(qs.get('halign', ['p'])) # p == 'paragraph, use full width with \parbox'

    stylemacro = "".join(qs.get('stylemacro', [''])) # name of macro, to style content

    assert( p.scheme == 'latexbox' )

    box_domain = p.netloc
    box_name = p.path.lstrip('/')

    assert rx_safe_box_domain_and_name.match(box_domain) is not None
    assert rx_safe_box_domain_and_name.match(box_name) is not None

    if stylemacro:
        assert rx_macroname.match(stylemacro) is not None
        stylemacrocall = '\\' + stylemacro
    else:
        stylemacrocall = ''
        
    logger.debug(
        f'generating place-content for box, {x=}, {y=}, {w=}, {h=}, {halign=}, {valign=}'
        f', {stylemacrocall=}, {box_domain=}, {box_name=}'
    )

    lplxcmd = r'\lplxPlaceContent'
    lplxtailargs = (
        r'{\lplxRenderBox[{' + halign + '}]{' + str(w) + 'bp}[{' + valign + '}]{' + str(h) + 'bp}'
        + '{' + stylemacrocall + '}{' + box_domain + '}{' + box_name + '}'
        r'}'
    )

    return lplxcmd, lplxtailargs
