"""
    Copyright 2017 Inmanta

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: code@inmanta.com
"""
import web
import apache
import mysql
import php
import exec

Application.database [1] -- mysql::Database

entity Application extends php::Application:
    """
        A single drupal application.
    """
    string admin_user
    string admin_password
    string admin_email
    string site_name
    bool run_install=true
end

Application._exec [1] -- exec::Run

implementation installer for Application:
    self._exec = exec::Run(host=container.host,
                           command="bash -c 'cd /usr/share/drupal7; /usr/bin/drush site-install -y --account-mail={{ admin_email }} --account-name={{ admin_user }} --account-pass={{ admin_password }} --site-name='{{ site_name }}' --sites-subdir={{ name.hostname }}'",
                           cwd="/usr/share/drupal7/",
                           unless="/usr/bin/is_drupal_installed.sh {{ database.server.host.ip }} {{ database.user }} {{ database.password }} {{ database.name }}",
                           environment={"DRUSH_PHP": "/usr/bin/php", "PATH": "/bin:/sbin"})
end

implement Application using installer when run_install

implementation noInstaller for Application:
    self._exec = exec::Run(host=container.host, command="/bin/true")
end

implement Application using noInstaller when not run_install

implementation drupalSiteRPM for Application:
    host = container.host
    pkg = std::Package(host=host, name="drupal7", state="installed",
                       requires=std::Package[host=host, name="epel-release"])
    pkg.requires = self.requires

    drupal_cfg = std::ConfigFile(host=host, path="/etc/drupal7/{{ name.hostname }}/settings.php",
        content=std::template("drupal/settings.php.tmpl"), provides=container,
        requires=drupal_settings_dir)

    drupal_settings_dir = std::Directory(host=host, path="/etc/drupal7/{{ name.hostname }}",
        owner="root", group="root", mode=755, requires=pkg)
    drupal_files_dir = std::Directory(host=host, path="/var/lib/drupal7/files/{{ name.hostname }}",
        owner="root", group=container.group, mode=775, requires=pkg)
    drupal_file_link = std::Symlink(host=host, source="/var/lib/drupal7/files/{{ name.hostname }}",
        target="/etc/drupal7/{{ name.hostname }}/files", requires=drupal_files_dir)

    self.document_root = "/usr/share/drupal7"

    p_drush = std::Package(host=host, name="php-drush-drush", state="installed", requires=p_which)
    p_which = std::Package(host=host, name="which", state="installed")
    p_mysql = std::Package(host=host, name="mariadb", state="installed")
    script = std::File(host=host, path="/usr/bin/is_drupal_installed.sh", owner="root",
                       group="root", mode=755, content=std::source("drupal/is_drupal_installed.sh"))

    
    exec::Run(host=host,
              command="/usr/sbin/setsebool -P httpd_can_network_connect 1",
              onlyif="/bin/test -f /usr/sbin/setsebool")

    self._exec.requires = [p_drush, p_mysql, drupal_cfg, script, database, p_sm]
    self._exec.provides = self.provides

    # drush site install requires /usr/bin/sendmail to be available
    p_sm = std::Package(host=host, name="postfix", state="installed")
end

implementation drupalSiteDEB for Application:
    host = container.host
    pkg = std::Package(host=host, name="drupal7", state="installed", requires=self.requires)

    drupal_cfg = std::ConfigFile(host=host, path="/etc/drupal/7/sites/{{ name.hostname }}/settings.php",
        content=std::template("drupal/settings.php.tmpl"), provides=container,
        requires=[drupal_settings_dir, pkg])

    drupal_settings_dir = std::Directory(host=host, path="/etc/drupal/7/sites/{{ name.hostname }}",
        owner="root", group="root", mode=755, requires=pkg)
    drupal_files_dir = std::Directory(host=host, path="/var/lib/drupal7/files/{{ name.hostname }}",
        owner="root", group=container.group, mode=775, requires=pkg)
    drupal_file_link = std::Symlink(host=host, source="/var/lib/drupal7/files/{{ name.hostname }}",
        target="/etc/drupal/7/sites/{{ name.hostname }}/files", requires=drupal_files_dir)

    self.document_root = "/usr/share/drupal7"

    p_drush = std::Package(host=host, name="drush", state="installed")
    p_mysql = std::Package(host=host, name="mysql-client", state="installed")
    script = std::File(host=host, path="/usr/bin/is_drupal_installed.sh", owner="root",
                       group="root", mode=755, content=std::source("drupal/is_drupal_installed.sh"))

    self.requires = [p_drush, p_mysql, drupal_cfg, script]
    self.provides = self.provides
end

implement Application using drupalSiteRPM, php::phpApacheRPM, apache::appImplRPM when std::familyof(container.host.os, "rhel") or std::familyof(container.host.os, "fedora")
implement Application using drupalSiteDEB, php::phpApacheDEB, apache::appImplDEB when std::familyof(container.host.os, "ubuntu")
