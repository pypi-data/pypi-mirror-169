{"version":3,"file":"88c10474.js","mappings":";AAaA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;ACQA;AACA;AACA;;AA1BA;ACuBA;AAYA;;;;AAMA;;;AAjCA;AAiDA;;;AAIA;;AAIA;AAEA;;;AAIA;;;AAMA;;AAKA;;;AA5BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9CA;ACoBA;AAEA;;AAGA;AACA;;;;;;AAMA;;;;AASA;;;AAlBA;AAwBA;;AAKA;AACA;;;;;;AAMA;;;;AASA;;;AAMA;AAEA;AAiBA;AACA;AACA;AAOA;;AAXA;AAgBA;;AAGA;AACA;;;;;;AAMA;;;;AASA;;;AAKA;AAEA;AAGA;AACA;;;;AAIA;;AAGA;AAEA;AACA;AACA;AASA;;AAEA;;AAsBA;;;;AASA;AAGA;;;;;;;;;;;;;AAzLA;;AC+QA;;;;AAIA;;AAOA;;AAGA;;;AAGA;;;AAGA;;AA0BA;AACA;AACA;AACA;AACA;AAIA;;AAMA;;;AAGA;AACA;AACA;AAGA;;AAEA;;;;AAKA;AAIA;AACA;AACA;;;AAGA;AASA;;AAHA;AAiKA;;;;AASA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AApfA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-icon-button-prev.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/ha-integration-list-item.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/ha-domain-integrations.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/dialog-add-integration.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { mdiChevronLeft, mdiChevronRight } from \"@mdi/js\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-icon-button-prev\")\nexport class HaIconButtonPrev extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property() public label?: string;\n\n  @state() private _icon = mdiChevronLeft;\n\n  public connectedCallback() {\n    super.connectedCallback();\n\n    // wait to check for direction since otherwise direction is wrong even though top level is RTL\n    setTimeout(() => {\n      this._icon =\n        window.getComputedStyle(this).direction === \"ltr\"\n          ? mdiChevronLeft\n          : mdiChevronRight;\n    }, 100);\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-icon-button\n        .disabled=${this.disabled}\n        .label=${this.label || this.hass?.localize(\"ui.common.back\") || \"Back\"}\n        .path=${this._icon}\n      ></ha-icon-button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button-prev\": HaIconButtonPrev;\n  }\n}\n","import {\n  GraphicType,\n  ListItemBase,\n} from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { mdiCloudOutline, mdiOpenInNew, mdiPackageVariant } from \"@mdi/js\";\nimport { css, CSSResultGroup, html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { customElement, property } from \"lit/decorators\";\nimport { domainToName } from \"../../../data/integration\";\nimport { HomeAssistant } from \"../../../types\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { IntegrationListItem } from \"./dialog-add-integration\";\n\n@customElement(\"ha-integration-list-item\")\nexport class HaIntegrationListItem extends ListItemBase {\n  public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public integration?: IntegrationListItem;\n\n  @property({ type: String, reflect: true }) graphic: GraphicType = \"medium\";\n\n  @property({ type: Boolean }) hasMeta = true;\n\n  renderSingleLine() {\n    if (!this.integration) {\n      return html``;\n    }\n    return html`${this.integration.name ||\n    domainToName(this.hass.localize, this.integration.domain)}\n    ${this.integration.is_helper ? \" (helper)\" : \"\"}`;\n  }\n\n  protected renderGraphic() {\n    if (!this.integration) {\n      return html``;\n    }\n    const graphicClasses = {\n      multi: this.multipleGraphics,\n    };\n\n    return html` <span\n      class=\"mdc-deprecated-list-item__graphic material-icons ${classMap(\n        graphicClasses\n      )}\"\n    >\n      <img\n        loading=\"lazy\"\n        src=${brandsUrl({\n          domain: this.integration.domain,\n          type: \"icon\",\n          useFallback: true,\n          darkOptimized: this.hass.themes?.darkMode,\n        })}\n        referrerpolicy=\"no-referrer\"\n      />\n    </span>`;\n  }\n\n  protected renderMeta() {\n    if (!this.integration) {\n      return html``;\n    }\n    return html`<span class=\"mdc-deprecated-list-item__meta material-icons\">\n      ${this.integration.cloud\n        ? html`<span\n            ><ha-svg-icon .path=${mdiCloudOutline}></ha-svg-icon\n            ><paper-tooltip animation-delay=\"0\" position=\"left\"\n              >${this.hass.localize(\n                \"ui.panel.config.integrations.config_entry.depends_on_cloud\"\n              )}</paper-tooltip\n            ></span\n          >`\n        : \"\"}\n      ${!this.integration.is_built_in\n        ? html`<span\n            ><ha-svg-icon .path=${mdiPackageVariant}></ha-svg-icon\n            ><paper-tooltip animation-delay=\"0\" position=\"left\"\n              >${this.hass.localize(\n                \"ui.panel.config.integrations.config_entry.provided_by_custom_integration\"\n              )}</paper-tooltip\n            ></span\n          >`\n        : \"\"}\n      ${!this.integration.config_flow &&\n      !this.integration.integrations &&\n      !this.integration.iot_standards\n        ? html`<span\n            ><paper-tooltip animation-delay=\"0\" position=\"left\"\n              >${this.hass.localize(\n                \"ui.panel.config.integrations.config_entry.yaml_only\"\n              )}</paper-tooltip\n            ><ha-svg-icon .path=${mdiOpenInNew}></ha-svg-icon\n          ></span>`\n        : html`<ha-icon-next></ha-icon-next>`}\n    </span>`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n        img {\n          width: 40px;\n          height: 40px;\n        }\n        .mdc-deprecated-list-item__meta {\n          width: auto;\n          white-space: nowrap;\n        }\n        .mdc-deprecated-list-item__meta > * {\n          margin-right: 8px;\n        }\n        .mdc-deprecated-list-item__meta > *:last-child {\n          margin-right: 0px;\n        }\n        ha-icon-next {\n          margin-right: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-integration-list-item\": HaIntegrationListItem;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { protocolIntegrationPicked } from \"../../../common/integrations/protocolIntegrationPicked\";\nimport { caseInsensitiveStringCompare } from \"../../../common/string/compare\";\nimport { localizeConfigFlowTitle } from \"../../../data/config_flow\";\nimport { DataEntryFlowProgress } from \"../../../data/data_entry_flow\";\nimport {\n  domainToName,\n  fetchIntegrationManifest,\n} from \"../../../data/integration\";\nimport { Integration } from \"../../../data/integrations\";\nimport { showConfigFlowDialog } from \"../../../dialogs/config-flow/show-dialog-config-flow\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport \"./ha-integration-list-item\";\n\nconst standardToDomain = { zigbee: \"zha\", zwave: \"zwave_js\" } as const;\n\n@customElement(\"ha-domain-integrations\")\nclass HaDomainIntegrations extends LitElement {\n  public hass!: HomeAssistant;\n\n  @property() public domain!: string;\n\n  @property({ attribute: false }) public integration!: Integration;\n\n  @property({ attribute: false })\n  public flowsInProgress?: DataEntryFlowProgress[];\n\n  protected render() {\n    return html`<mwc-list>\n      ${this.flowsInProgress?.length\n        ? html`<h3>We discovered the following:</h3>\n            ${this.flowsInProgress.map(\n              (flow) => html`<mwc-list-item\n                graphic=\"medium\"\n                .flow=${flow}\n                @click=${this._flowInProgressPicked}\n                hasMeta\n              >\n                <img\n                  slot=\"graphic\"\n                  loading=\"lazy\"\n                  src=${brandsUrl({\n                    domain: flow.handler,\n                    type: \"icon\",\n                    useFallback: true,\n                    darkOptimized: this.hass.themes?.darkMode,\n                  })}\n                  referrerpolicy=\"no-referrer\"\n                />\n                <span\n                  >${localizeConfigFlowTitle(this.hass.localize, flow)}</span\n                >\n                <ha-icon-next slot=\"meta\"></ha-icon-next>\n              </mwc-list-item>`\n            )}`\n        : \"\"}\n      ${this.integration?.iot_standards\n        ? this.integration.iot_standards.map((standard) => {\n            const domain: string = standardToDomain[standard] || standard;\n            return html`<mwc-list-item\n              graphic=\"medium\"\n              .domain=${domain}\n              @click=${this._standardPicked}\n              hasMeta\n            >\n              <img\n                slot=\"graphic\"\n                loading=\"lazy\"\n                src=${brandsUrl({\n                  domain,\n                  type: \"icon\",\n                  useFallback: true,\n                  darkOptimized: this.hass.themes?.darkMode,\n                })}\n                referrerpolicy=\"no-referrer\"\n              />\n              <span\n                >${this.hass.localize(\n                  `ui.panel.config.integrations.add_${domain}_device`\n                )}</span\n              >\n              <ha-icon-next slot=\"meta\"></ha-icon-next>\n            </mwc-list-item>`;\n          })\n        : \"\"}\n      ${this.integration?.integrations\n        ? Object.entries(this.integration.integrations)\n            .sort((a, b) => {\n              if (a[1].config_flow && !b[1].config_flow) {\n                return -1;\n              }\n              if (b[1].config_flow && !a[1].config_flow) {\n                return 0;\n              }\n              return caseInsensitiveStringCompare(\n                a[1].name || domainToName(this.hass.localize, a[0]),\n                b[1].name || domainToName(this.hass.localize, b[0])\n              );\n            })\n            .map(\n              ([dom, val]) =>\n                html`<ha-integration-list-item\n                  .hass=${this.hass}\n                  .domain=${dom}\n                  .integration=${{\n                    ...val,\n                    domain: dom,\n                    name: val.name || domainToName(this.hass.localize, dom),\n                    is_built_in: val.is_built_in !== false,\n                    cloud: val.iot_class?.startsWith(\"cloud_\"),\n                  }}\n                  @click=${this._integrationPicked}\n                >\n                </ha-integration-list-item>`\n            )\n        : \"\"}\n      ${[\"zha\", \"zwave_js\"].includes(this.domain)\n        ? html`<mwc-list-item\n            graphic=\"medium\"\n            .domain=${this.domain}\n            @click=${this._standardPicked}\n            hasMeta\n          >\n            <img\n              slot=\"graphic\"\n              loading=\"lazy\"\n              src=${brandsUrl({\n                domain: this.domain,\n                type: \"icon\",\n                useFallback: true,\n                darkOptimized: this.hass.themes?.darkMode,\n              })}\n              referrerpolicy=\"no-referrer\"\n            />\n            <span\n              >${this.hass.localize(\n                `ui.panel.config.integrations.add_${this.domain}_device`\n              )}</span\n            >\n            <ha-icon-next slot=\"meta\"></ha-icon-next>\n          </mwc-list-item>`\n        : \"\"}\n      ${this.integration?.config_flow\n        ? html`${this.flowsInProgress?.length\n            ? html`<mwc-list-item\n                .domain=${this.domain}\n                @click=${this._integrationPicked}\n                hasMeta\n              >\n                Setup another instance of\n                ${this.integration.name ||\n                domainToName(this.hass.localize, this.domain)}\n                <ha-icon-next slot=\"meta\"></ha-icon-next>\n              </mwc-list-item>`\n            : html`<ha-integration-list-item\n                .hass=${this.hass}\n                .domain=${this.domain}\n                .integration=${{\n                  ...this.integration,\n                  domain: this.domain,\n                  name:\n                    this.integration.name ||\n                    domainToName(this.hass.localize, this.domain),\n                  is_built_in: this.integration.is_built_in !== false,\n                  cloud: this.integration.iot_class?.startsWith(\"cloud_\"),\n                }}\n                @click=${this._integrationPicked}\n              >\n              </ha-integration-list-item>`}`\n        : \"\"}\n    </mwc-list> `;\n  }\n\n  private async _integrationPicked(ev) {\n    const domain = ev.currentTarget.domain;\n    if (\n      (domain === this.domain && !this.integration.config_flow) ||\n      !this.integration.integrations?.[domain]?.config_flow\n    ) {\n      const manifest = await fetchIntegrationManifest(this.hass, domain);\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.integrations.config_flow.yaml_only_title\"\n        ),\n        text: this.hass.localize(\n          \"ui.panel.config.integrations.config_flow.yaml_only_text\",\n          {\n            link:\n              manifest?.is_built_in || manifest?.documentation\n                ? html`<a\n                    href=${manifest.is_built_in\n                      ? documentationUrl(\n                          this.hass,\n                          `/integrations/${manifest.domain}`\n                        )\n                      : manifest.documentation}\n                    target=\"_blank\"\n                    rel=\"noreferrer noopener\"\n                  >\n                    ${this.hass.localize(\n                      \"ui.panel.config.integrations.config_flow.documentation\"\n                    )}</a\n                  >`\n                : this.hass.localize(\n                    \"ui.panel.config.integrations.config_flow.documentation\"\n                  ),\n          }\n        ),\n      });\n      return;\n    }\n    const root = this.getRootNode();\n    showConfigFlowDialog(\n      root instanceof ShadowRoot ? (root.host as HTMLElement) : this,\n      {\n        startFlowHandler: domain,\n        showAdvanced: this.hass.userData?.showAdvanced,\n        manifest: await fetchIntegrationManifest(this.hass, domain),\n      }\n    );\n    fireEvent(this, \"close-dialog\");\n  }\n\n  private async _flowInProgressPicked(ev) {\n    const flow: DataEntryFlowProgress = ev.currentTarget.flow;\n    const root = this.getRootNode();\n    showConfigFlowDialog(\n      root instanceof ShadowRoot ? (root.host as HTMLElement) : this,\n      {\n        continueFlowId: flow.flow_id,\n        showAdvanced: this.hass.userData?.showAdvanced,\n        manifest: await fetchIntegrationManifest(this.hass, flow.handler),\n      }\n    );\n    fireEvent(this, \"close-dialog\");\n  }\n\n  private _standardPicked(ev) {\n    const domain = ev.currentTarget.domain;\n    const root = this.getRootNode();\n    fireEvent(this, \"close-dialog\");\n    protocolIntegrationPicked(\n      root instanceof ShadowRoot ? (root.host as HTMLElement) : this,\n      this.hass,\n      domain\n    );\n  }\n\n  static styles = [\n    haStyle,\n    css`\n      :host {\n        display: block;\n      }\n      h3 {\n        margin: 0 24px;\n        color: var(--primary-text-color);\n        font-size: 14px;\n      }\n      img {\n        width: 40px;\n        height: 40px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-domain-integrations\": HaDomainIntegrations;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list\";\nimport Fuse from \"fuse.js\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { protocolIntegrationPicked } from \"../../../common/integrations/protocolIntegrationPicked\";\nimport { navigate } from \"../../../common/navigate\";\nimport { caseInsensitiveStringCompare } from \"../../../common/string/compare\";\nimport { LocalizeFunc } from \"../../../common/translations/localize\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-icon-button-prev\";\nimport \"../../../components/search-input\";\nimport { fetchConfigFlowInProgress } from \"../../../data/config_flow\";\nimport { DataEntryFlowProgress } from \"../../../data/data_entry_flow\";\nimport {\n  domainToName,\n  fetchIntegrationManifest,\n} from \"../../../data/integration\";\nimport {\n  getIntegrationDescriptions,\n  Integration,\n  Integrations,\n} from \"../../../data/integrations\";\nimport {\n  getSupportedBrands,\n  SupportedBrandHandler,\n} from \"../../../data/supported_brands\";\nimport { showConfigFlowDialog } from \"../../../dialogs/config-flow/show-dialog-config-flow\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport { haStyleDialog, haStyleScrollbar } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport \"./ha-domain-integrations\";\nimport \"./ha-integration-list-item\";\nimport { AddIntegrationDialogParams } from \"./show-add-integration-dialog\";\n\nexport interface IntegrationListItem {\n  name: string;\n  domain: string;\n  config_flow?: boolean;\n  is_helper?: boolean;\n  integrations?: string[];\n  iot_standards?: string[];\n  supported_flows?: string[];\n  cloud?: boolean;\n  is_built_in?: boolean;\n  is_add?: boolean;\n}\n\n@customElement(\"dialog-add-integration\")\nclass AddIntegrationDialog extends LitElement {\n  public hass!: HomeAssistant;\n\n  @state() private _integrations?: Integrations;\n\n  @state() private _helpers?: Integrations;\n\n  @state() private _supportedBrands?: Record<string, SupportedBrandHandler>;\n\n  @state() private _initialFilter?: string;\n\n  @state() private _filter?: string;\n\n  @state() private _pickedBrand?: string;\n\n  @state() private _flowsInProgress?: DataEntryFlowProgress[];\n\n  @state() private _open = false;\n\n  @state() private _narrow = false;\n\n  private _width?: number;\n\n  private _height?: number;\n\n  public showDialog(params: AddIntegrationDialogParams): void {\n    this._open = true;\n    this._pickedBrand = params.brand;\n    this._initialFilter = params.initialFilter;\n    this._narrow = matchMedia(\n      \"all and (max-width: 450px), all and (max-height: 500px)\"\n    ).matches;\n  }\n\n  public closeDialog() {\n    this._open = false;\n    this._integrations = undefined;\n    this._helpers = undefined;\n    this._supportedBrands = undefined;\n    this._pickedBrand = undefined;\n    this._flowsInProgress = undefined;\n    this._filter = undefined;\n    this._width = undefined;\n    this._height = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  public willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (this._filter === undefined && this._initialFilter !== undefined) {\n      this._filter = this._initialFilter;\n    }\n    if (this._initialFilter !== undefined && this._filter === \"\") {\n      this._initialFilter = undefined;\n      this._filter = \"\";\n      this._width = undefined;\n      this._height = undefined;\n    } else if (\n      this.hasUpdated &&\n      changedProps.has(\"_filter\") &&\n      (!this._width || !this._height)\n    ) {\n      // Store the width and height so that when we search, box doesn't jump\n      const boundingRect =\n        this.shadowRoot!.querySelector(\"mwc-list\")?.getBoundingClientRect();\n      this._width = boundingRect?.width;\n      this._height = boundingRect?.height;\n    }\n  }\n\n  public updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (changedProps.has(\"_open\") && this._open) {\n      this._load();\n    }\n  }\n\n  private _filterIntegrations = memoizeOne(\n    (\n      i: Integrations,\n      h: Integrations,\n      sb: Record<string, SupportedBrandHandler>,\n      components: HomeAssistant[\"config\"][\"components\"],\n      localize: LocalizeFunc,\n      filter?: string\n    ): IntegrationListItem[] => {\n      const addDeviceRows: IntegrationListItem[] = [\"zha\", \"zwave_js\"]\n        .filter((domain) => components.includes(domain))\n        .map((domain) => ({\n          name: localize(`ui.panel.config.integrations.add_${domain}_device`),\n          domain,\n          config_flow: true,\n          is_built_in: true,\n          is_add: true,\n        }))\n        .sort((a, b) => caseInsensitiveStringCompare(a.name, b.name));\n\n      const integrations: IntegrationListItem[] = [];\n      const yamlIntegrations: IntegrationListItem[] = [];\n\n      Object.entries(i).forEach(([domain, integration]) => {\n        if (\n          integration.config_flow ||\n          integration.iot_standards ||\n          integration.integrations\n        ) {\n          integrations.push({\n            domain,\n            name: integration.name || domainToName(localize, domain),\n            config_flow: integration.config_flow,\n            iot_standards: integration.iot_standards,\n            integrations: integration.integrations\n              ? Object.entries(integration.integrations).map(\n                  ([dom, val]) => val.name || domainToName(localize, dom)\n                )\n              : undefined,\n            is_built_in: integration.is_built_in !== false,\n            cloud: integration.iot_class?.startsWith(\"cloud_\"),\n          });\n        } else if (filter) {\n          yamlIntegrations.push({\n            domain,\n            name: integration.name || domainToName(localize, domain),\n            config_flow: integration.config_flow,\n            is_built_in: integration.is_built_in !== false,\n            cloud: integration.iot_class?.startsWith(\"cloud_\"),\n          });\n        }\n      });\n\n      for (const [domain, domainBrands] of Object.entries(sb)) {\n        const integration = this._findIntegration(domain);\n        if (\n          !integration ||\n          (!integration.config_flow &&\n            !integration.iot_standards &&\n            !integration.integrations)\n        ) {\n          continue;\n        }\n        for (const [slug, name] of Object.entries(domainBrands)) {\n          integrations.push({\n            domain: slug,\n            name,\n            config_flow: integration.config_flow,\n            supported_flows: [domain],\n            is_built_in: true,\n            cloud: integration.iot_class?.startsWith(\"cloud_\"),\n          });\n        }\n      }\n\n      if (filter) {\n        const options: Fuse.IFuseOptions<IntegrationListItem> = {\n          keys: [\n            \"name\",\n            \"domain\",\n            \"supported_flows\",\n            \"integrations\",\n            \"iot_standards\",\n          ],\n          isCaseSensitive: false,\n          minMatchCharLength: 2,\n          threshold: 0.2,\n        };\n        const helpers = Object.entries(h)\n          .filter(\n            ([_domain, integration]) =>\n              integration.config_flow ||\n              integration.iot_standards ||\n              integration.integrations\n          )\n          .map(([domain, integration]) => ({\n            domain,\n            name: integration.name || domainToName(localize, domain),\n            config_flow: integration.config_flow,\n            is_helper: true,\n            is_built_in: integration.is_built_in !== false,\n            cloud: integration.iot_class?.startsWith(\"cloud_\"),\n          }));\n        return [\n          ...new Fuse(integrations, options)\n            .search(filter)\n            .map((result) => result.item),\n          ...new Fuse(yamlIntegrations, options)\n            .search(filter)\n            .map((result) => result.item),\n          ...new Fuse(helpers, options)\n            .search(filter)\n            .map((result) => result.item),\n        ];\n      }\n      return [\n        ...addDeviceRows,\n        ...integrations.sort((a, b) =>\n          caseInsensitiveStringCompare(a.name || \"\", b.name || \"\")\n        ),\n      ];\n    }\n  );\n\n  private _findIntegration(domain: string): Integration | undefined {\n    if (!this._integrations) {\n      return undefined;\n    }\n    if (domain in this._integrations) {\n      return this._integrations[domain];\n    }\n    for (const integration of Object.values(this._integrations)) {\n      if (integration.integrations && domain in integration.integrations) {\n        return integration.integrations[domain];\n      }\n    }\n    return undefined;\n  }\n\n  private _getIntegrations() {\n    return this._filterIntegrations(\n      this._integrations!,\n      this._helpers!,\n      this._supportedBrands!,\n      this.hass.config.components,\n      this.hass.localize,\n      this._filter\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this._open) {\n      return html``;\n    }\n    const integrations = this._integrations\n      ? this._getIntegrations()\n      : undefined;\n\n    return html`<ha-dialog\n      open\n      @closed=${this.closeDialog}\n      scrimClickAction\n      escapeKeyAction\n      hideActions\n      .heading=${this._pickedBrand\n        ? true\n        : createCloseHeading(\n            this.hass,\n            this.hass.localize(\"ui.panel.config.integrations.new\")\n          )}\n    >\n      ${this._pickedBrand\n        ? html`<div slot=\"heading\">\n              <ha-icon-button-prev\n                @click=${this._prevClicked}\n              ></ha-icon-button-prev>\n              <h2 class=\"mdc-dialog__title\">\n                ${this._calculateBrandHeading()}\n              </h2>\n            </div>\n            ${this._renderIntegration()}`\n        : this._renderAll(integrations)}\n    </ha-dialog>`;\n  }\n\n  private _calculateBrandHeading() {\n    const brand = this._integrations?.[this._pickedBrand!];\n    if (\n      brand?.iot_standards &&\n      !brand.integrations &&\n      !this._flowsInProgress?.length\n    ) {\n      return \"What type of device is it?\";\n    }\n    if (\n      !brand?.iot_standards &&\n      !brand?.integrations &&\n      this._flowsInProgress?.length\n    ) {\n      return \"Want to add these discovered devices?\";\n    }\n    return \"What do you want to add?\";\n  }\n\n  private _renderIntegration(): TemplateResult {\n    return html`<ha-domain-integrations\n      .hass=${this.hass}\n      .domain=${this._pickedBrand}\n      .integration=${this._integrations?.[this._pickedBrand!]}\n      .flowsInProgress=${this._flowsInProgress}\n      style=${styleMap({\n        minWidth: `${this._width}px`,\n        minHeight: `581px`,\n      })}\n      @close-dialog=${this.closeDialog}\n    ></ha-domain-integrations>`;\n  }\n\n  private _renderAll(integrations?: IntegrationListItem[]): TemplateResult {\n    return html`<search-input\n        .hass=${this.hass}\n        autofocus\n        dialogInitialFocus\n        .filter=${this._filter}\n        @value-changed=${this._filterChanged}\n        .label=${this.hass.localize(\n          \"ui.panel.config.integrations.search_brand\"\n        )}\n        @keypress=${this._maybeSubmit}\n      ></search-input>\n      ${integrations\n        ? html`<mwc-list>\n            <lit-virtualizer\n              scroller\n              class=\"ha-scrollbar\"\n              style=${styleMap({\n                width: `${this._width}px`,\n                height: this._narrow ? \"calc(100vh - 184px)\" : \"500px\",\n              })}\n              @click=${this._integrationPicked}\n              .items=${integrations}\n              .renderItem=${this._renderRow}\n            >\n            </lit-virtualizer>\n          </mwc-list>`\n        : html`<ha-circular-progress active></ha-circular-progress>`} `;\n  }\n\n  private _renderRow = (integration: IntegrationListItem) => {\n    if (!integration) {\n      return html``;\n    }\n    return html`\n      <ha-integration-list-item .hass=${this.hass} .integration=${integration}>\n      </ha-integration-list-item>\n    `;\n  };\n\n  private async _load() {\n    const [descriptions, supportedBrands] = await Promise.all([\n      getIntegrationDescriptions(this.hass),\n      getSupportedBrands(this.hass),\n    ]);\n    for (const integration in descriptions.custom.integration) {\n      if (\n        !Object.prototype.hasOwnProperty.call(\n          descriptions.custom.integration,\n          integration\n        )\n      ) {\n        continue;\n      }\n      descriptions.custom.integration[integration].is_built_in = false;\n    }\n    this._integrations = {\n      ...descriptions.core.integration,\n      ...descriptions.custom.integration,\n    };\n    for (const integration in descriptions.custom.helper) {\n      if (\n        !Object.prototype.hasOwnProperty.call(\n          descriptions.custom.helper,\n          integration\n        )\n      ) {\n        continue;\n      }\n      descriptions.custom.helper[integration].is_built_in = false;\n    }\n    this._helpers = {\n      ...descriptions.core.helper,\n      ...descriptions.custom.helper,\n    };\n    this._supportedBrands = supportedBrands;\n    this.hass.loadBackendTranslation(\n      \"title\",\n      descriptions.core.translated_name,\n      true\n    );\n  }\n\n  private async _filterChanged(e) {\n    this._filter = e.detail.value;\n  }\n\n  private _integrationPicked(ev) {\n    const listItem = ev.target.closest(\"ha-integration-list-item\");\n    if (!listItem) {\n      return;\n    }\n    this._handleIntegrationPicked(listItem.integration);\n  }\n\n  private async _handleIntegrationPicked(integration: IntegrationListItem) {\n    if (\"supported_flows\" in integration) {\n      const domain = integration.supported_flows![0];\n\n      showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.config.integrations.config_flow.supported_brand_flow\",\n          {\n            supported_brand: integration.name,\n            flow_domain_name: domainToName(this.hass.localize, domain),\n          }\n        ),\n        confirm: () => {\n          const supportIntegration = this._findIntegration(domain);\n          this.closeDialog();\n          if ([\"zha\", \"zwave_js\"].includes(domain)) {\n            protocolIntegrationPicked(this, this.hass, domain);\n            return;\n          }\n          if (supportIntegration) {\n            this._handleIntegrationPicked({\n              domain,\n              name:\n                supportIntegration.name ||\n                domainToName(this.hass.localize, domain),\n              config_flow: supportIntegration.config_flow,\n              iot_standards: supportIntegration.iot_standards,\n              integrations: supportIntegration.integrations\n                ? Object.entries(supportIntegration.integrations).map(\n                    ([dom, val]) =>\n                      val.name || domainToName(this.hass.localize, dom)\n                  )\n                : undefined,\n            });\n          } else {\n            showAlertDialog(this, {\n              text: \"Integration not found\",\n              warning: true,\n            });\n          }\n        },\n      });\n\n      return;\n    }\n\n    if (integration.is_add) {\n      protocolIntegrationPicked(this, this.hass, integration.domain);\n      this.closeDialog();\n      return;\n    }\n\n    if (integration.is_helper) {\n      this.closeDialog();\n      navigate(`/config/helpers/add?domain=${integration.domain}`);\n      return;\n    }\n\n    if (integration.integrations) {\n      const integrations =\n        this._integrations![integration.domain].integrations!;\n      this._fetchFlowsInProgress(Object.keys(integrations));\n      this._pickedBrand = integration.domain;\n      return;\n    }\n\n    if (\n      [\"zha\", \"zwave_js\"].includes(integration.domain) &&\n      isComponentLoaded(this.hass, integration.domain)\n    ) {\n      this._pickedBrand = integration.domain;\n      return;\n    }\n\n    if (integration.iot_standards) {\n      this._pickedBrand = integration.domain;\n      return;\n    }\n\n    if (integration.config_flow) {\n      this._createFlow(integration);\n      return;\n    }\n\n    const manifest = await fetchIntegrationManifest(\n      this.hass,\n      integration.domain\n    );\n    showAlertDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.integrations.config_flow.yaml_only_title\"\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.integrations.config_flow.yaml_only_text\",\n        {\n          link:\n            manifest?.is_built_in || manifest?.documentation\n              ? html`<a\n                  href=${manifest.is_built_in\n                    ? documentationUrl(\n                        this.hass,\n                        `/integrations/${manifest.domain}`\n                      )\n                    : manifest.documentation}\n                  target=\"_blank\"\n                  rel=\"noreferrer noopener\"\n                >\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_flow.documentation\"\n                  )}</a\n                >`\n              : this.hass.localize(\n                  \"ui.panel.config.integrations.config_flow.documentation\"\n                ),\n        }\n      ),\n    });\n  }\n\n  private async _createFlow(integration: IntegrationListItem) {\n    const flowsInProgress = await this._fetchFlowsInProgress([\n      integration.domain,\n    ]);\n\n    if (flowsInProgress?.length) {\n      this._pickedBrand = integration.domain;\n      return;\n    }\n\n    const manifest = await fetchIntegrationManifest(\n      this.hass,\n      integration.domain\n    );\n\n    this.closeDialog();\n\n    showConfigFlowDialog(this, {\n      startFlowHandler: integration.domain,\n      showAdvanced: this.hass.userData?.showAdvanced,\n      manifest,\n    });\n  }\n\n  private async _fetchFlowsInProgress(domains: string[]) {\n    const flowsInProgress = (\n      await fetchConfigFlowInProgress(this.hass.connection)\n    ).filter((flow) => domains.includes(flow.handler));\n\n    if (flowsInProgress.length) {\n      this._flowsInProgress = flowsInProgress;\n    }\n    return flowsInProgress;\n  }\n\n  private _maybeSubmit(ev: KeyboardEvent) {\n    if (ev.key !== \"Enter\") {\n      return;\n    }\n\n    const integrations = this._getIntegrations();\n\n    if (integrations.length > 0) {\n      this._handleIntegrationPicked(integrations[0]);\n    }\n  }\n\n  private _prevClicked() {\n    this._pickedBrand = undefined;\n    this._flowsInProgress = undefined;\n  }\n\n  static styles = [\n    haStyleScrollbar,\n    haStyleDialog,\n    css`\n      @media all and (min-width: 550px) {\n        ha-dialog {\n          --mdc-dialog-min-width: 500px;\n        }\n      }\n      ha-dialog {\n        --dialog-content-padding: 0;\n      }\n      search-input {\n        display: block;\n        margin: 16px 16px 0;\n      }\n      .divider {\n        border-bottom-color: var(--divider-color);\n      }\n      h2 {\n        padding-inline-end: 66px;\n        direction: var(--direction);\n      }\n      p {\n        text-align: center;\n        padding: 16px;\n        margin: 0;\n      }\n      p > a {\n        color: var(--primary-color);\n      }\n      ha-circular-progress {\n        width: 100%;\n        display: flex;\n        justify-content: center;\n        margin: 24px 0;\n      }\n      lit-virtualizer {\n        contain: size layout !important;\n      }\n      ha-integration-list-item {\n        width: 100%;\n      }\n      ha-icon-button-prev {\n        color: var(--secondary-text-color);\n        position: absolute;\n        left: 16px;\n        top: 14px;\n        inset-inline-end: initial;\n        inset-inline-start: 16px;\n        direction: var(--direction);\n      }\n      .mdc-dialog__title {\n        margin: 0;\n        margin-bottom: 8px;\n        margin-left: 48px;\n        padding: 24px 24px 0 24px;\n        color: var(--mdc-dialog-heading-ink-color, rgba(0, 0, 0, 0.87));\n        font-size: var(--mdc-typography-headline6-font-size, 1.25rem);\n        line-height: var(--mdc-typography-headline6-line-height, 2rem);\n        font-weight: var(--mdc-typography-headline6-font-weight, 500);\n        letter-spacing: var(\n          --mdc-typography-headline6-letter-spacing,\n          0.0125em\n        );\n        text-decoration: var(\n          --mdc-typography-headline6-text-decoration,\n          inherit\n        );\n        text-transform: var(--mdc-typography-headline6-text-transform, inherit);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-add-integration\": AddIntegrationDialog;\n  }\n}\n"],"names":[],"sourceRoot":""}