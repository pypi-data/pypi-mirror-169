"use strict";(self.webpackChunkhome_assistant_frontend=self.webpackChunkhome_assistant_frontend||[]).push([[66054],{92306:(e,t,r)=>{r.d(t,{v:()=>s});const s=(e,t)=>{const r={};for(const s of e){const e=t(s);e in r?r[e].push(s):r[e]=[s]}return r}},11950:(e,t,r)=>{r.d(t,{l:()=>s});const s=async(e,t)=>new Promise((r=>{const s=t(e,(e=>{s(),r(e)}))}))},81582:(e,t,r)=>{r.d(t,{LZ:()=>s,Q4:()=>n,DJ:()=>o,pB:()=>a,SO:()=>i,iJ:()=>c,Nn:()=>_,Ny:()=>l,T0:()=>y});const s=32143==r.j?["migration_error","setup_error","setup_retry"]:null,n=32143==r.j?["not_loaded","loaded","setup_error","setup_retry"]:null,o=(e,t,r)=>{const s={type:"config_entries/subscribe"};return r&&r.type&&(s.type_filter=r.type),e.connection.subscribeMessage((e=>t(e)),s)},a=(e,t)=>{const r={};return t&&(t.type&&(r.type_filter=t.type),t.domain&&(r.domain=t.domain)),e.callWS({type:"config_entries/get",...r})},i=(e,t,r)=>e.callWS({type:"config_entries/update",entry_id:t,...r}),c=(e,t)=>e.callApi("DELETE",`config/config_entries/entry/${t}`),_=(e,t)=>e.callApi("POST",`config/config_entries/entry/${t}/reload`),l=(e,t)=>e.callWS({type:"config_entries/disable",entry_id:t,disabled_by:"user"}),y=(e,t)=>e.callWS({type:"config_entries/disable",entry_id:t,disabled_by:null})},55424:(e,t,r)=>{r.d(t,{Bm:()=>b,o1:()=>w,iK:()=>v,rl:()=>S,P:()=>k,KU:()=>T,xZ:()=>Z,gy:()=>W,ZC:()=>P,_Z:()=>C,Jj:()=>j,yH:()=>D,UB:()=>z,jB:()=>I,gM:()=>L,yT:()=>M,_n:()=>B,vR:()=>H,vE:()=>K});var s=r(4535),n=r(59699),o=r(32182),a=r(79021),i=r(39244),c=r(27088),_=r(83008),l=r(70390),y=r(47538),u=r(97330),d=r(92306),g=r(11950),p=r(81582),f=r(74186),m=r(38014);const h=[],b=()=>({stat_energy_from:"",stat_cost:null,entity_energy_price:null,number_energy_price:null}),w=()=>({stat_energy_to:"",stat_compensation:null,entity_energy_price:null,number_energy_price:null}),v=()=>({type:"grid",flow_from:[],flow_to:[],cost_adjustment_day:0}),S=()=>({type:"solar",stat_energy_from:"",config_entry_solar_forecast:null}),k=()=>({type:"battery",stat_energy_from:"",stat_energy_to:""}),T=()=>({type:"gas",stat_energy_from:"",stat_cost:null,entity_energy_price:null,number_energy_price:null}),Z=e=>e.callWS({type:"energy/info"}),W=e=>e.callWS({type:"energy/validate"}),P=e=>e.callWS({type:"energy/get_prefs"}),C=async(e,t)=>{const r=e.callWS({type:"energy/save_prefs",...t});return O(e),r},E=async(e,t,r,s,n,o="hour")=>e.callWS({type:"energy/fossil_energy_consumption",start_time:t.toISOString(),end_time:null==n?void 0:n.toISOString(),energy_statistic_ids:r,co2_statistic_id:s,period:o}),j=e=>(0,d.v)(e.energy_sources,(e=>e.type)),D=(e,t)=>{const r=[];for(const s of e.energy_sources)if("solar"!==s.type)if("gas"!==s.type)if("battery"!==s.type){for(const e of s.flow_from){r.push(e.stat_energy_from),e.stat_cost&&r.push(e.stat_cost);const s=t.cost_sensors[e.stat_energy_from];s&&r.push(s)}for(const e of s.flow_to){r.push(e.stat_energy_to),e.stat_compensation&&r.push(e.stat_compensation);const s=t.cost_sensors[e.stat_energy_to];s&&r.push(s)}}else r.push(s.stat_energy_from),r.push(s.stat_energy_to);else{r.push(s.stat_energy_from),s.stat_cost&&r.push(s.stat_cost);const e=t.cost_sensors[s.stat_energy_from];e&&r.push(e)}else r.push(s.stat_energy_from);return r},O=e=>{h.forEach((t=>{const r=z(e,{key:t});r.clearPrefs(),r._active&&r.refresh()}))},z=(e,t={})=>{let r="_energy";if(t.key){if(!t.key.startsWith("energy_"))throw new Error("Key need to start with energy_");r=`_${t.key}`}if(e.connection[r])return e.connection[r];h.push(t.key);const d=(0,u._)(e.connection,r,(async()=>{if(d.prefs||(d.prefs=await P(e)),d._refreshTimeout&&clearTimeout(d._refreshTimeout),d._active&&(!d.end||d.end>new Date)){const e=new Date;e.getMinutes()>=20&&e.setHours(e.getHours()+1),e.setMinutes(20,0,0),d._refreshTimeout=window.setTimeout((()=>d.refresh()),e.getTime()-Date.now())}return(async(e,t,r,c,_)=>{const[l,y,u]=await Promise.all([(0,p.pB)(e,{domain:"co2signal"}),(0,g.l)(e.connection,f.LM),Z(e)]),d=l.length?l[0]:void 0;let h;if(d)for(const t of y){if(t.config_entry_id!==d.entry_id)continue;const r=e.states[t.entity_id];if(r&&"%"===r.attributes.unit_of_measurement){h=r.entity_id;break}}const b=[];for(const e of t.energy_sources)if("grid"===e.type)for(const t of e.flow_from)b.push(t.stat_energy_from);const w=D(t,u),v=(0,s.Z)(c||new Date,r),S=v>35?"month":v>2?"day":"hour",k=(0,n.Z)(r,-1),T={energy:"kWh",volume:"km"===(e.config.unit_system.length||"")?"m³":"ft³"},W=await(0,m.dL)(e,k,c,w,S,T);let P,C,j,O,z;if(_){C=v>27&&v<32?(0,o.Z)(r,-1):(0,a.Z)(r,-1*(v+1));const t=(0,n.Z)(C,-1);j=(0,i.Z)(r,-1),P=await(0,m.dL)(e,t,j,w,S,T)}void 0!==h&&(O=await E(e,r,b,h,c,v>35?"month":v>2?"day":"hour"),_&&(z=await E(e,C,b,h,j,v>35?"month":v>2?"day":"hour"))),Object.values(W).forEach((e=>{e.length&&new Date(e[0].start)>k&&e.unshift({...e[0],start:k.toISOString(),end:k.toISOString(),sum:0,state:0})}));const I=await(0,m.Py)(e,w),L={};return I.forEach((e=>{L[e.statistic_id]=e})),{start:r,end:c,startCompare:C,endCompare:j,info:u,prefs:t,stats:W,statsMetadata:L,statsCompare:P,co2SignalConfigEntry:d,co2SignalEntity:h,fossilEnergyConsumption:O,fossilEnergyConsumptionCompare:z}})(e,d.prefs,d.start,d.end,d.compare)})),b=d.subscribe;d.subscribe=e=>{const t=b(e);return d._active++,()=>{d._active--,d._active<1&&(clearTimeout(d._refreshTimeout),d._refreshTimeout=void 0),t()}},d._active=0,d.prefs=t.prefs;const w=new Date;d.start=w.getHours()>0?(0,c.Z)():(0,_.Z)(),d.end=w.getHours()>0?(0,l.Z)():(0,y.Z)();const v=()=>{d._updatePeriodTimeout=window.setTimeout((()=>{d.start=(0,c.Z)(),d.end=(0,l.Z)(),v()}),(0,n.Z)((0,l.Z)(),1).getTime()-Date.now())};return v(),d.clearPrefs=()=>{d.prefs=void 0},d.setPeriod=(e,t)=>{var r;d.start=e,d.end=t,d.start.getTime()!==(0,c.Z)().getTime()||(null===(r=d.end)||void 0===r?void 0:r.getTime())!==(0,l.Z)().getTime()||d._updatePeriodTimeout?d._updatePeriodTimeout&&(clearTimeout(d._updatePeriodTimeout),d._updatePeriodTimeout=void 0):v()},d.setCompare=e=>{d.compare=e},d},I=e=>e.callWS({type:"energy/solar_forecast"}),L=["m³"],M=["kWh"],B=[...L,...M],H=(e,t={},r)=>{for(const s of e.energy_sources){if("gas"!==s.type)continue;if(r&&r===s.stat_energy_from)continue;const e=t[s.stat_energy_from];if(e)return L.includes(e.statistics_unit_of_measurement)?"volume":"energy"}},K=(e,t={})=>{for(const r of e.energy_sources){if("gas"!==r.type)continue;const e=t[r.stat_energy_from];if(null!=e&&e.display_unit_of_measurement)return e.display_unit_of_measurement}}},38014:(e,t,r)=>{r.d(t,{uR:()=>n,Py:()=>o,dL:()=>a,h_:()=>i,Cj:()=>c,hN:()=>_,Kj:()=>l,q6:()=>y,Nw:()=>u,Z0:()=>p,j2:()=>f,Kd:()=>m});var s=r(91741);const n=(e,t)=>e.callWS({type:"recorder/list_statistic_ids",statistic_type:t}),o=(e,t)=>e.callWS({type:"recorder/get_statistics_metadata",statistic_ids:t}),a=(e,t,r,s,n="hour",o)=>e.callWS({type:"recorder/statistics_during_period",start_time:t.toISOString(),end_time:null==r?void 0:r.toISOString(),statistic_ids:s,period:n,units:o}),i=e=>e.callWS({type:"recorder/validate_statistics"}),c=(e,t,r)=>e.callWS({type:"recorder/update_statistics_metadata",statistic_id:t,unit_of_measurement:r}),_=(e,t)=>e.callWS({type:"recorder/clear_statistics",statistic_ids:t}),l=e=>{if(!e||e.length<2)return null;const t=e[e.length-1].sum;if(null===t)return null;const r=e[0].sum;return null===r?t:t-r},y=(e,t)=>{let r=null;for(const s of t){if(!(s in e))continue;const t=l(e[s]);null!==t&&(null===r?r=t:r+=t)}return r},u=(e,t)=>e.some((e=>null!==e[t])),d=["mean","min","max"],g=["sum"],p=(e,t)=>!(!d.includes(t)||!e.has_mean)||!(!g.includes(t)||!e.has_sum),f=(e,t,r,s,n)=>e.callWS({type:"recorder/adjust_sum_statistics",statistic_id:t,start_time:r,adjustment:s,display_unit:n}),m=(e,t,r)=>{const n=e.states[t];return n?(0,s.C)(n):(null==r?void 0:r.name)||t}},66054:(e,t,r)=>{r.r(t),r.d(t,{EnergyStrategy:()=>n});var s=r(55424);class n{static async generateView(e){const t=e.hass,n={cards:[]};let o;try{o=await(0,s.ZC)(t)}catch(e){return"not_found"===e.code?(async()=>(await Promise.all([r.e(878),r.e(55158)]).then(r.bind(r,55158)),{type:"panel",cards:[{type:"custom:energy-setup-wizard-card"}]}))():(n.cards.push({type:"markdown",content:`An error occurred while fetching your energy preferences: ${e.message}.`}),n)}n.type="sidebar";const a=o.energy_sources.find((e=>"grid"===e.type)),i=a&&a.flow_to.length,c=o.energy_sources.some((e=>"solar"===e.type)),_=o.energy_sources.some((e=>"gas"===e.type));return e.narrow&&n.cards.push({type:"energy-date-selection",collection_key:"energy_dashboard",view_layout:{position:"sidebar"}}),n.cards.push({type:"energy-compare",collection_key:"energy_dashboard"}),a&&n.cards.push({title:t.localize("ui.panel.energy.cards.energy_usage_graph_title"),type:"energy-usage-graph",collection_key:"energy_dashboard"}),c&&n.cards.push({title:t.localize("ui.panel.energy.cards.energy_solar_graph_title"),type:"energy-solar-graph",collection_key:"energy_dashboard"}),_&&n.cards.push({title:t.localize("ui.panel.energy.cards.energy_gas_graph_title"),type:"energy-gas-graph",collection_key:"energy_dashboard"}),a&&n.cards.push({title:t.localize("ui.panel.energy.cards.energy_distribution_title"),type:"energy-distribution",view_layout:{position:"sidebar"},collection_key:"energy_dashboard"}),(a||c)&&n.cards.push({title:t.localize("ui.panel.energy.cards.energy_sources_table_title"),type:"energy-sources-table",collection_key:"energy_dashboard"}),i&&n.cards.push({type:"energy-grid-neutrality-gauge",view_layout:{position:"sidebar"},collection_key:"energy_dashboard"}),c&&i&&n.cards.push({type:"energy-solar-consumed-gauge",view_layout:{position:"sidebar"},collection_key:"energy_dashboard"}),a&&n.cards.push({type:"energy-carbon-consumed-gauge",view_layout:{position:"sidebar"},collection_key:"energy_dashboard"}),o.device_consumption.length&&n.cards.push({title:t.localize("ui.panel.energy.cards.energy_devices_graph_title"),type:"energy-devices-graph",collection_key:"energy_dashboard"}),n}}}}]);