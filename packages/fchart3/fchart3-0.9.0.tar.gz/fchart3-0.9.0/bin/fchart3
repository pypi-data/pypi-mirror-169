#!/usr/bin/python

#    fchart draws beautiful deepsky charts in vector formats
#    Copyright (C) 2005-2020 fchart authors
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import argparse
import textwrap

from time import time

import os
import sys
import numpy as np

import fchart3

from fchart3.astrocalc import hms2rad, dms2rad, rad2hms, rad2dms
from fchart3.skymap_engine import SkymapEngine, EN, NL, ES
from fchart3.used_catalogs import UsedCatalogs
from fchart3.configuration import EngineConfiguration
from fchart3.graphics_cairo import CairoDrawing

#################################################################


def print_version():
    print('fchart3 version 0.9.0 (c) fchart3 authors 2005-2022')
    print("""
fchart3 comes with ABSOLUTELY NO WARRANTY. It is distributed under the
GNU General Public License (GPL) version 2. For details see the LICENSE
file distributed with the software. This is free software, and you are
welcome to redistribute it under certain conditions as specified in the
LICENSE file.
""")


class RuntimeSettings:
    def __init__(self):
        self.extra_positions_list = []
        self.fieldcentre = (-1, -1)
        self.parse_commandline()

    def parse_commandline(self):
        argumentparser = argparse.ArgumentParser(description='fchart',
              formatter_class=argparse.RawTextHelpFormatter,
              epilog=textwrap.dedent('''\
                    Sourcenames:
                       Valid sourcenames are for example:
                       - NGC891, NgC891, n891 or 891 for NGC objects
                       - IC1396, i1396, iC1396, I1396 for IC objects
                       - m110, M3 for Messier objects
                       - \"9:35:00.8,-34:15:33,SomeCaption\" for other positions

                       There is one special sourcename, which is \"allmessier\". When this name
                       is encountered, fchart dumps maps of all messier objects to the output
                       directory.
                    ''')
              )

        argumentparser.add_argument('-o', '--output-dir', dest='output_dir', nargs='?', action='store', default='./',
                                    help='Specify the output directory (default: .)')

        argumentparser.add_argument('-f', '--output-file', dest='output_file', nargs='?', action='store',
                                    help='Specify output file name. (default: name of dso object). Image format is defined by extension.' +\
                                         'Supported format/extensions are pdf, png and svg.')

        argumentparser.add_argument('--extra-data-dir', dest='extra_data_dir', nargs='?', action='store',
                                    help='Path to extra data files (Stellarium star catalogues)')

        argumentparser.add_argument('-limdso', dest='limiting_magnitude_deepsky', nargs='?', action='store', default=12.0, type=float,
                                    help='Deepsky limiting magnitude (default: 12.0)')
        argumentparser.add_argument('-limstar', dest='limiting_magnitude_stars', nargs='?', action='store', default=12.0, type=float,
                                    help='Stellar limiting magnitude (default: 12.0)')

        argumentparser.add_argument('-width', dest='width', nargs='?', action='store', default=180.0, type=float,
                                    help='Width of the drawing area in mm.')
        argumentparser.add_argument('-fieldsize', dest='fieldsize', nargs='?', action='store', default=7.0, type=float,
                                    help='Diameter of the field of view in degrees (default: 7.0)')

        argumentparser.add_argument('-fmessier', '--force-messier', dest='force_messier', action='store_true',
                                    help='Select all Messier objects, regardless of the limiting magnitude for deepsky objects')
        argumentparser.add_argument('-fasterism', '--force-asterisms', dest='force_asterisms', action='store_true',
                                    help='Force plotting of  asterisms in map. By default, only \"Messier\" asterisms are plotted.' + \
                                          'All others are ignored. The default setting helps cleaning up especially Virgo cluster maps.')
        argumentparser.add_argument('-funknown', '--force-unknown', dest='force_unknown', action='store_true',
                                    help='By default, objects in external galaxies are plotted only if their magnitude is known and lower than ' +\
                                         'the limiting magnitude of deepsky objects. If this option is given, also objects in external galaxies ' +\
                                         'of which the magnitude is not known are plotted. This option will clutter some galaxies like M 101 and ' +\
                                         'NGC 4559.')

        argumentparser.add_argument('-lang', '--language', dest='language', nargs='?', action='store', default='en',
                                    help='Specify language on the maps, either \'en\' or \'nl\' or \'es\' (default: en)')

        argumentparser.add_argument('-sc', '--show-catalogs', dest='show_catalogs', nargs='?', action='store',
                                    help='Comma separated list of additional catalogs to be show on the map. (e.g. LBN).')

        argumentparser.add_argument('-x', '--add-cross', dest='cross_marks', nargs='?', action='append',
                                    help='Add a cross in the map at a specified position. The format of the argument of this option is: ' +\
                                         '\"rah:ram:ras,+/-decd:decm:decs,label,labelposition\" For example: -x\"20:35:25.4,+60:07:17.7,SN,t\" for ' +\
                                         'the supernova sn2004et in NGC 6946. The label position can be \'t\' for top, \'b\' for bottom, \'l\' for ' +\
                                         'left, or \'r\' for right. The label and label position may be omitted.')

        argumentparser.add_argument('-capt', '--caption', dest='caption', nargs='?', action='store', default='',
                                    help='Force a specific caption for the maps. All maps will get the same caption.')

        argumentparser.add_argument('--hide-star-labels', dest='show_star_labels', action='store_false',
                                    help='Hide star labels.')

        argumentparser.add_argument('--hide-flamsteed', dest='show_flamsteed', action='store_false',
                                    help='Hide Flamsteed designation.')

        argumentparser.add_argument('--hide-mag-scale-legend', dest='show_mag_scale_legend', action='store_false',
                                    help='Hide magnitude scale legend.')

        argumentparser.add_argument('--hide-map-scale-legend', dest='show_map_scale_legend', action='store_false',
                                    help='Hide map scale legend.')

        argumentparser.add_argument('--hide-map-orientation-legend', dest='show_orientation_legend', action='store_false',
                                    help='Hide orientation legend.')

        argumentparser.add_argument('--show-dso-legend', dest='show_dso_legend', action='store_true',
                                    help='Show deepsky object legend.')

        argumentparser.add_argument('--show-equatorial-grid', dest='show_equatorial_grid', action='store_true',
                                    help='Show equatorial grid.')

        argumentparser.add_argument('--show-milky-way', dest='show_milky_way', action='store_true',
                                    help='Show milky way.')

        argumentparser.add_argument('--show-enhanced-milky-way', dest='show_enhanced_milky_way', action='store_true',
                                    help='Show enhanced milky way.')

        argumentparser.add_argument('--show-nebula-outlines', dest='show_nebula_outlines', action='store_true',
                                    help='Show nebula outlines.')

        argumentparser.add_argument('--show-coords-legend', dest='show_coords_legend', action='store_true',
                                    help='Show coordinations legend.')

        argumentparser.add_argument('--hide-field-border', dest='show_field_border', action='store_false',
                                    help='Hide field border.')

        argumentparser.add_argument('--FOV-telrad', dest='fov_telrad', action='store_true',
                                    help='Show telrad circles at FOV.')

        # Transformation
        argumentparser.add_argument('-mx', '--mirror-x', dest='mirror_x', action='store_true',
                                    help='Mirror in x axis.')
        argumentparser.add_argument('-my', '--mirror-y', dest='mirror_y', action='store_true',
                                    help='Mirror in y axis.')

        argumentparser.add_argument('--star-colors', dest='star_colors', action='store_true',
                                    help='Colorify stars according spectral type.')
        argumentparser.add_argument('--color-background', dest='background_color', action='store', default='#F0F0F0',
                                    help='Background color. (default white)')
        argumentparser.add_argument('--color-draw', dest='draw_color', action='store', default='#000000',
                                    help='Drawing color for stars. (default black)')
        argumentparser.add_argument('--color-label', dest='label_color', action='store', default='#202020',
                                    help='Label color. (default black)')
        argumentparser.add_argument('--color-constellation-lines', dest='constellation_lines_color', action='store', default='#80a0c0',
                                    help='Constellation border color.')
        argumentparser.add_argument('--color-constellation-border', dest='constellation_border_color', action='store', default='#b0a020',
                                    help='Constellation lines color.')
        argumentparser.add_argument('--color-deepsky', dest='dso_color', action='store', default='#505050',
                                    help='Unclassified deepsky color.')
        argumentparser.add_argument('--color-nebula', dest='nebula_color', action='store', default='#005000',
                                    help='Nebula color.')
        argumentparser.add_argument('--color-galaxy', dest='galaxy_color', action='store', default='#500000',
                                    help='Galaxy color.')
        argumentparser.add_argument('--color-star-cluster', dest='star_cluster_color', action='store', default='#505000',
                                    help='Star cluster color.')
        argumentparser.add_argument('--color-galaxy-cluster', dest='galaxy_cluster_color', action='store', default='#505050',
                                    help='Galaxy cluster color.')
        argumentparser.add_argument('--color-milky-way', dest='milky_way_color', action='store', default='#d8d8d8',
                                    help='Milky way color.')

        argumentparser.add_argument('--color-grid', dest='grid_color', action='store', default='#405060',
                                    help='Star cluster color.')
        argumentparser.add_argument('--linewidth-constellation', dest='constellation_linewidth', nargs='?', action='store', default=0.5, type=float,
                                    help='Constellation line width (default: 0.5)')
        argumentparser.add_argument('--linewidth-constellation-border', dest='constellation_border_linewidth', nargs='?', action='store', default=0.5, type=float,
                                    help='Constellation border line width (default: 0.5)')
        argumentparser.add_argument('--linewidth-nebula', dest='nebula_linewidth', nargs='?', action='store', default=0.3, type=float,
                                    help='Line width of equatorial grid (default: 0.3)')
        argumentparser.add_argument('--linewidth-open-cluster', dest='open_cluster_linewidth', nargs='?', action='store', default=0.3, type=float,
                                    help='Line width of open cluster (default: 0.3)')
        argumentparser.add_argument('--linewidth-galaxy-cluster', dest='galaxy_cluster_linewidth', nargs='?', action='store', default=0.2, type=float,
                                    help='Line width of galaxy cluster (default: 0.2)')
        argumentparser.add_argument('--linewidth-deepsky', dest='dso_linewidth', nargs='?', action='store', default=0.2, type=float,
                                    help='Line width of open cluster (default: 0.2)')
        argumentparser.add_argument('--linewidth-milky-way', dest='milky_way_linewidth', nargs='?', action='store', default=0.2, type=float,
                                    help='Line width of Milky Way (default: 0.2)')
        argumentparser.add_argument('--linewidth-legend', dest='legend_linewidth', nargs='?', action='store', default=0.2, type=float,
                                    help='Line width of open cluster (default: 0.3)')
        argumentparser.add_argument('--linewidth-grid', dest='grid_linewidth', nargs='?', action='store', default=0.1, type=float,
                                    help='Line width of equatorial grid (default: 0.1)')

        argumentparser.add_argument('--no-margin', dest='no_margin', action='store_true', default=False,
                                    help='No margin.')

        argumentparser.add_argument('--font', dest='font', action='store', default='Arial',
                                    help='Font (Arial)')

        argumentparser.add_argument('--font-size', dest='font_size', type=float, default=3.0,
                                    help='Font size')

        argumentparser.add_argument('--legend_font_scale', dest='legend_font_scale', type=float, default=1.75,
                                    help='Scale of font used in legend related to chart font size.')

        argumentparser.add_argument('-v', '--version', action='store_true', help='display version information and exit.')
        argumentparser.add_argument('sourcelist', nargs='*')

        self.parser = argumentparser.parse_args()

        if len(self.parser.sourcelist) == 0:
            argumentparser.print_help()
            sys.exit(1)

        if self.parser.language.upper() == 'NL':
            self.language = NL
        elif self.parser.language.upper() == 'EN':
            self.language = EN
        elif self.parser.language.upper() == 'ES':
            self.language = ES
        else:
            print('Unsupported language {}'.format(self.parser.language))
            sys.exit(-1)

        if self.parser.version:
            print_version()
            sys.exit(1)

        if self.parser.cross_marks:
            for mark in self.parser.cross_marks:
                data = mark.split(',')
                if len(data) >= 2:
                    ra_str, dec_str = data[0:2]
                    label_str = ''
                    label_pos = 'r'
                    ra_str = ra_str.lstrip().rstrip()
                    dec_str = dec_str.lstrip().rstrip()
                    if len(data) >= 3:
                        label_str = data[2].lstrip().rstrip()

                    if len(data) >= 4:
                        label_pos = data[3].rstrip().lstrip()

                    rasplit = ra_str.split(':')
                    decsplit = dec_str.split(':')

                    rah, ram, ras = 0.0, 0.0, 0.0
                    rah= float(rasplit[0])
                    if len(rasplit) >= 2:
                        ram = float(rasplit[1])
                    if len(rasplit) >= 3:
                        ras = float(rasplit[2])

                    decd, decm, decs, sign = 0.0, 0.0, 0.0, 1
                    decd= abs(float(decsplit[0]))
                    if decsplit[0][0] == '-':
                        sign = -1
                    if len(decsplit) >= 2:
                        decm = float(decsplit[1])
                    if len(decsplit) >= 3:
                        decs = float(decsplit[2])
                    rax, decx = hms2rad(rah, ram, ras), dms2rad(decd, decm, decs, sign)
                    self.extra_positions_list.append([rax,decx,label_str,label_pos])
                else:
                    print('option -x needs three part argument, separated by comma\'s: -x "ra,dec,label"')
                    sys.exit(-1)


#############################################################
#                                                           #
#                      MAIN  PROGRAM                        #
#                                                           #
#############################################################

def _convert_color(color):
    if color.startswith('#'):
        color = color[1:]
    try:
        r, g, b = [int(color[i:i+2], 16) / 255.0 for i in range(0, len(color), 2)]
    except ValueError:
        print('Invalid color format {}'.format(color))
        sys.exit()

    return r, g, b


def _create_engine_configuration():
    config = EngineConfiguration()

    config.legend_only = False
    config.show_star_labels = True
    config.show_flamsteed = True
    config.show_mag_scale_legend = False
    config.show_map_scale_legend = False
    config.show_orientation_legend = False
    config.show_dso_legend = False
    config.show_coords_legend = False
    config.show_field_border = False
    config.show_equatorial_grid = False
    config.show_constellation_shapes = True
    config.show_constellation_borders = True
    config.show_deepsky = True
    config.show_milky_way = False
    config.show_enhanced_milky_way = False
    config.show_nebula_outlines = False

    config.show_star_labels = settings.parser.show_star_labels
    config.show_flamsteed = settings.parser.show_flamsteed
    config.show_mag_scale_legend = settings.parser.show_mag_scale_legend
    config.show_map_scale_legend = settings.parser.show_map_scale_legend
    config.show_orientation_legend = settings.parser.show_orientation_legend
    config.show_dso_legend = settings.parser.show_dso_legend
    config.show_coords_legend = settings.parser.show_coords_legend
    config.show_field_border = settings.parser.show_field_border
    config.show_equatorial_grid = settings.parser.show_equatorial_grid
    config.show_milky_way = settings.parser.show_milky_way
    config.show_enhanced_milky_way = settings.parser.show_enhanced_milky_way
    config.show_nebula_outlines = settings.parser.show_nebula_outlines
    config.fov_telrad = settings.parser.fov_telrad
    config.mirror_x = settings.parser.mirror_x
    config.mirror_y = settings.parser.mirror_y
    config.star_colors = settings.parser.star_colors
    config.background_color = _convert_color(settings.parser.background_color)
    config.draw_color = _convert_color(settings.parser.draw_color)
    config.label_color = _convert_color(settings.parser.label_color)
    config.constellation_lines_color = _convert_color(settings.parser.constellation_lines_color)
    config.constellation_border_color = _convert_color(settings.parser.constellation_border_color)
    config.dso_color = _convert_color(settings.parser.dso_color)
    config.nebula_color = _convert_color(settings.parser.nebula_color)
    config.galaxy_color = _convert_color(settings.parser.galaxy_color)
    config.star_cluster_color = _convert_color(settings.parser.star_cluster_color)
    config.galaxy_cluster_color = _convert_color(settings.parser.galaxy_cluster_color)
    config.milky_way_color = _convert_color(settings.parser.milky_way_color)
    config.grid_color = _convert_color(settings.parser.grid_color)
    config.constellation_linewidth = settings.parser.constellation_linewidth
    config.constellation_border_linewidth = settings.parser.constellation_border_linewidth
    config.nebula_linewidth = settings.parser.nebula_linewidth
    config.open_cluster_linewidth = settings.parser.open_cluster_linewidth
    config.galaxy_cluster_linewidth = settings.parser.galaxy_cluster_linewidth
    config.dso_linewidth = settings.parser.dso_linewidth
    config.milky_way_linewidth = settings.parser.milky_way_linewidth
    config.legend_linewidth = settings.parser.legend_linewidth
    config.grid_linewidth = settings.parser.grid_linewidth
    config.no_margin = settings.parser.no_margin
    config.font = settings.parser.font
    config.font_size = settings.parser.font_size
    config.legend_font_scale = settings.parser.legend_font_scale

    if config.show_enhanced_milky_way:
        mw_scale_fac = 3.0

        bg_r, bg_g, bg_b = config.background_color[0], config.background_color[1], config.background_color[2]

        config.enhanced_milky_way_fade = (bg_r, (config.milky_way_color[0] - bg_r) * mw_scale_fac,
                                          bg_g, (config.milky_way_color[1] - bg_g) * mw_scale_fac,
                                          bg_b, (config.milky_way_color[2] - bg_b) * mw_scale_fac)

        config.milky_way_color = (bg_r + (config.milky_way_color[0]-bg_r),
                                  bg_g + (config.milky_way_color[1]-bg_g),
                                  bg_b + (config.milky_way_color[2]-bg_b))

    return config


if __name__ == '__main__':

    tm = time()

    data_dir = os.path.join(fchart3.get_catalogs_dir())

    # Create default settings and parse commandline
    settings = RuntimeSettings()

    print_version()

    # Create output space if necessary
    if not os.path.exists(settings.parser.output_dir):
        print('Creating directory '+settings.parser.output_dir)
        os.mkdir(settings.parser.output_dir)

    show_catalogs = settings.parser.show_catalogs.split(',') if settings.parser.show_catalogs else None

    used_catalogs = UsedCatalogs(data_dir,
                                 extra_data_dir=settings.parser.extra_data_dir,
                                 limiting_magnitude_deepsky=settings.parser.limiting_magnitude_deepsky,
                                 force_messier=settings.parser.force_messier,
                                 force_asterisms=settings.parser.force_asterisms,
                                 force_unknown=settings.parser.force_unknown,
                                 show_catalogs=show_catalogs,
                                 )

    print("Chart generated in : " + str(time()-tm) + "ms")
    # Final report before mapmaking
    print(str(len(used_catalogs.reduced_deeplist))+'/'+str(len(used_catalogs.deeplist))+' deepsky objects after magnitude/messier selection.')

    print('Making maps with: ')
    print('   Deep sky lm    : ' + str(settings.parser.limiting_magnitude_deepsky))
    print('   Stellar lm     : ' + str(settings.parser.limiting_magnitude_stars))
    print('   Fieldsize      : ' + str(settings.parser.fieldsize) + ' degrees')
    print('   Paperwidth     : ' + str(settings.parser.width) + ' mm')
    print('   Output dir     : ' + settings.parser.output_dir)
    print('   Force Messier  : ' + str(settings.parser.force_messier))
    print('   Force asterisms: ' + str(settings.parser.force_asterisms))
    print('   Force pg       : ' + str(settings.parser.force_unknown))
    print('   Extra points   : ' + str(len(settings.extra_positions_list)))
    print('   Show dso legend: ' + str(settings.parser.show_dso_legend))
    if settings.parser.extra_data_dir:
        print('   Extra data directory: '+ str(settings.parser.extra_data_dir))

    for object in settings.extra_positions_list:
        rax,decx,label,labelpos = object
        print(label,':', rad2hms(rax), rad2dms(decx))

    # For all sources...
    for source in settings.parser.sourcelist:
        filename = ''
        # Parse sourcename
        if source.upper().rstrip().lstrip() == 'ALLMESSIER':
            print('alles')
            for object in used_catalogs.messierlist:
                print('')
                print('M '+str(object.messier))
                ra  = object.ra
                dec = object.dec
                artist = None
                filename = settings.parser.output_dir + os.sep + 'm' + str(object.messier).rjust(3).replace(' ','0')
                filename += '.pdf'
                artist = CairoDrawing(filename, settings.parser.width, settings.parser.width, format='pdf')
                engine = SkymapEngine(artist, settings.language, lm_stars = settings.parser.limiting_magnitude_stars)
                engine.set_configuration(_create_engine_configuration())
                engine.set_field(ra, dec, settings.parser.fieldsize*np.pi/180.0/2.0)
                engine.set_caption('M '+str(object.messier))
                engine.set_showing_dso(object)
                engine.set_active_constellation(object.constellation)
                engine.make_map(used_catalogs, settings.extra_positions_list)
        else:
            showing_dso = None
            if ':' in source:
                data = source.split(',')
                if len(data) >= 3:
                    ra_str, dec_str = data[0:2]
                    caption_str = ''
                    label_pos = 'r'
                    ra_str = ra_str.lstrip().rstrip()
                    dec_str = dec_str.lstrip().rstrip()
                    if len(data) >= 3:
                        label_str = data[2].lstrip().rstrip()

                    if len(data) >= 4:
                        label_pos = data[3].rstrip().lstrip()

                    rasplit = ra_str.split(':')
                    decsplit = dec_str.split(':')

                    rah, ram, ras = 0.0, 0.0, 0.0
                    rah= float(rasplit[0])
                    if len(rasplit) >= 2:
                        ram = float(rasplit[1])
                    if len(rasplit) >= 3:
                        ras = float(rasplit[2])

                    decd, decm, decs, sign = 0.0, 0.0, 0.0, 1
                    decd = abs(float(decsplit[0]))
                    if decsplit[0][0] == '-':
                        sign = -1
                    if len(decsplit) >= 2:
                        decm = float(decsplit[1])
                    if len(decsplit) >= 3:
                        decs = float(decsplit[2])
                    ra, dec = hms2rad(rah, ram, ras), dms2rad(decd, decm, decs, sign)
                    cat = ''
                    name = ','.join(data[2:])
                    filename = settings.parser.output_dir + os.sep + name.replace(' ','-').replace('/', '-').replace(',', '')
                else:
                    print('Position specification needs three part argument, separated by comma\'s: "ra,dec,caption"')
                    sys.exit(-1)

            else:# : in source
                showing_dso, cat, name = used_catalogs.lookup_dso(source)
                if showing_dso:
                    ra = showing_dso.ra
                    dec = showing_dso.dec
                else:
                    ra = 1
                    dec = 0

            print('')
            print(cat, name)

            if ra >= 0.0:
                artist = None
                if settings.parser.output_file:
                    filename = settings.parser.output_file
                else:
                    if filename == '':
                        filename = settings.parser.output_dir + os.sep + source
                    filename += '.pdf'
                if filename.endswith('.png'):
                    output_format = 'png'
                elif filename.endswith('.svg'):
                    output_format = 'svg'
                else:
                    output_format = 'pdf'
                artist = CairoDrawing(filename,
                                      settings.parser.width,
                                      settings.parser.width,
                                      output_format)
                engine = SkymapEngine(artist, settings.language,
                                      lm_stars=settings.parser.limiting_magnitude_stars,
                                      lm_deepsky=settings.parser.limiting_magnitude_deepsky)
                engine.set_configuration(_create_engine_configuration())
                engine.set_field(ra, dec, settings.parser.fieldsize*np.pi/180.0/2.0)
                caption = cat + ' ' + name

                if settings.parser.caption != False:
                    caption = settings.parser.caption
                if caption != '':
                    engine.set_caption(caption)

                showing_dsos = None
                if showing_dso:
                    if showing_dso.master_object:
                        showing_dso = showing_dso.master_object
                    showing_dsos = [showing_dso]
                    engine.set_active_constellation(showing_dso.constellation)

                print("Started in : " + str(time()-tm) + "ms")
                engine.make_map(used_catalogs, showing_dsos=showing_dsos, extra_positions=settings.extra_positions_list)
            else:
                print('object not found, try appending an A or a B')

    print("Chart generated in : " + str(time()-tm) + "ms")
