//
// Kestrel Grammar
//

start: statement*

//
// If no VARIABLE is given, default to _ in post-parsing
//

statement: assignment
         | command_no_result
         
assignment: VARIABLE "=" command_with_result
          | command_with_result

// "?" at the beginning will inline command
?command_with_result: get
                    | find
                    | join
                    | sort
                    | group
                    | load
                    | new
                    | merge
                    | assign

?command_no_result: disp
                  | info
                  | apply
                  | save

assign: expression

merge: VARIABLE ("+" VARIABLE)+

disp: "disp"i expression

info: "info"i VARIABLE

get: "get"i ENTITY_TYPE ("from"i DATASRC)? "where"i STIXPATTERNBODY timespan?

find: "find"i ENTITY_TYPE RELATION (REVERSED)? VARIABLE (starttime endtime)?

apply: "apply"i ANALYTICS "on"i variables ("with"i anaparams)?

join: "join"i VARIABLE "," VARIABLE (BY STIXPATH "," STIXPATH)?

sort: "sort"i VARIABLE BY STIXPATH (ASC|DESC)?

group: "group"i VARIABLE BY grp_spec ("with"i agg_list)?

load: "load"i DUMPPATH ("as"i ENTITY_TYPE)?

save: "save"i VARIABLE "to"i DUMPPATH

new: "new"i (ENTITY_TYPE)? VARDATA

timespan: starttime endtime
        | relative_timespan

relative_timespan: "last"i NUMBER timeunit

?timeunit: (DAY|HOUR|MINUTE|SECOND)
DAY: "days"i | "d"i
HOUR: "hours"i | "h"i
MINUTE: "minutes"i | "m"i
SECOND: "seconds"i | "s"i


transform: TRANSFORM "(" VARIABLE ")"
         | VARIABLE

expression: transform where_clause? attr_clause? sort_clause? limit_clause? offset_clause?

where_clause: "where"i condition
attr_clause: "attr"i STIXPATHS
sort_clause: "sort"i BY STIXPATH (ASC|DESC)?
limit_clause: "limit"i INT
offset_clause: "offset"i INT

?condition: disjunction

?disjunction: conjunction
            | disjunction "OR"i conjunction -> disj

?conjunction: comparison
            | conjunction "AND"i comparison -> conj

?comparison: column OP value -> comp
           | column NULL_OP "null"i -> null_comp
           | "(" disjunction ")"

column: STIXPATH

?value: SQSTRING -> squoted_str
      | NUMBER   -> num_literal
      | /NULL/   -> nulls

OP: /([<>!=]?=|[<>]|IN|LIKE|MATCHES)/

NULL_OP: /IS (NOT)?/i

anaparams: (localargs (", " localargs)* | URI)

localargs: CNAME "=" valuelist
         | CNAME "=" QSTRING
         | CNAME "=" NUMBER -> number

valuelist: PATH ("," PATH)*

starttime: "START" "t'" ISOTIMESTAMP "'"

endtime: "STOP" "t'" ISOTIMESTAMP "'"

variables: VARIABLE ("," VARIABLE)*

grp_spec: grp_expr ("," grp_expr)*

grp_expr: STIXPATH
        | bin_func

bin_func: "BIN"i "(" STIXPATH "," NUMBER timeunit? ")"
// No other scalar funcs are supported yet

agg_list: agg ("," agg)*

agg: funcname "(" STIXPATH ")" ("AS"i alias)?

?alias: CNAME

TRANSFORM: (TIMESTAMPED)
TIMESTAMPED: "timestamped"i

VARIABLE: CNAME
ENTITY_TYPE: LETTER ("_"|LETTER|DIGIT|"-")*
ANALYTICS: (LETTER|DIGIT|/[-_.:\/]/)+
STIXPATH: (LETTER|DIGIT|/[-_.:']/)+
STIXPATHS: STIXPATH (/\s*,\s*/ STIXPATH)*
PATH: (LETTER|DIGIT|/[-_.:\/]/)+
DATASRC: (PATH ("," PATH)* |ESCAPED_STRING)
DUMPPATH: PATH
ASC: "asc"i
DESC: "desc"i
REVERSED: "by"i
BY: "by"i
COMMENT: /#.*/
URI: PATH

?funcname: (MIN|MAX|SUM|AVG|COUNT|NUNIQUE)
MIN: "min"i
MAX: "max"i
SUM: "sum"i
AVG: "avg"i
COUNT: "count"i
NUNIQUE: "nunique"i

STIXPATTERNBODY: "[" /.+/ "]" | "(" /.+/ ")"

ISOTIMESTAMP: /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d(\.\d+)?Z/

// manually add `WS*` since `%ignore WS` doesn't apply to spaces inside terminals
// https://github.com/lark-parser/lark/issues/99
QSTRING: WS* ESCAPED_STRING WS*
JSON_VALUE: WS* (ESCAPED_STRING|NUMBER) WS*
VARDATA: "[" (QSTRING ("," QSTRING)* | JSON_DICT ("," JSON_DICT)*) "]"
JSON_DICT: WS* "{" (QSTRING ":" JSON_VALUE) ("," QSTRING ":" JSON_VALUE)* "}" WS*
SQSTRING: /'[^']*'/

RELATION: WORD

%import common (CNAME, LETTER, DIGIT, WS, INT, WORD, ESCAPED_STRING, NUMBER)

%ignore WS
%ignore COMMENT
