# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import qwilprobe.generated.qwilprobe_pb2 as qwilprobe__pb2


class QwilprobeStub(object):
    """*
    An interface for a microservice that serves probe data to qwilfish.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetProbeInfo = channel.unary_unary(
                '/qwilprobe.Qwilprobe/GetProbeInfo',
                request_serializer=qwilprobe__pb2.ProbeInfoRequest.SerializeToString,
                response_deserializer=qwilprobe__pb2.ProbeInfoResponse.FromString,
                )
        self.GetProbeIsReady = channel.unary_unary(
                '/qwilprobe.Qwilprobe/GetProbeIsReady',
                request_serializer=qwilprobe__pb2.ProbeIsReadyRequest.SerializeToString,
                response_deserializer=qwilprobe__pb2.ProbeIsReadyResponse.FromString,
                )
        self.GetProbeData = channel.unary_unary(
                '/qwilprobe.Qwilprobe/GetProbeData',
                request_serializer=qwilprobe__pb2.ProbeDataRequest.SerializeToString,
                response_deserializer=qwilprobe__pb2.ProbeDataResponse.FromString,
                )
        self.Terminate = channel.unary_unary(
                '/qwilprobe.Qwilprobe/Terminate',
                request_serializer=qwilprobe__pb2.ProbeTerminateRequest.SerializeToString,
                response_deserializer=qwilprobe__pb2.ProbeTerminateResponse.FromString,
                )


class QwilprobeServicer(object):
    """*
    An interface for a microservice that serves probe data to qwilfish.
    """

    def GetProbeInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProbeIsReady(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProbeData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Terminate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QwilprobeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetProbeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProbeInfo,
                    request_deserializer=qwilprobe__pb2.ProbeInfoRequest.FromString,
                    response_serializer=qwilprobe__pb2.ProbeInfoResponse.SerializeToString,
            ),
            'GetProbeIsReady': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProbeIsReady,
                    request_deserializer=qwilprobe__pb2.ProbeIsReadyRequest.FromString,
                    response_serializer=qwilprobe__pb2.ProbeIsReadyResponse.SerializeToString,
            ),
            'GetProbeData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProbeData,
                    request_deserializer=qwilprobe__pb2.ProbeDataRequest.FromString,
                    response_serializer=qwilprobe__pb2.ProbeDataResponse.SerializeToString,
            ),
            'Terminate': grpc.unary_unary_rpc_method_handler(
                    servicer.Terminate,
                    request_deserializer=qwilprobe__pb2.ProbeTerminateRequest.FromString,
                    response_serializer=qwilprobe__pb2.ProbeTerminateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qwilprobe.Qwilprobe', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Qwilprobe(object):
    """*
    An interface for a microservice that serves probe data to qwilfish.
    """

    @staticmethod
    def GetProbeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qwilprobe.Qwilprobe/GetProbeInfo',
            qwilprobe__pb2.ProbeInfoRequest.SerializeToString,
            qwilprobe__pb2.ProbeInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProbeIsReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qwilprobe.Qwilprobe/GetProbeIsReady',
            qwilprobe__pb2.ProbeIsReadyRequest.SerializeToString,
            qwilprobe__pb2.ProbeIsReadyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProbeData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qwilprobe.Qwilprobe/GetProbeData',
            qwilprobe__pb2.ProbeDataRequest.SerializeToString,
            qwilprobe__pb2.ProbeDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Terminate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qwilprobe.Qwilprobe/Terminate',
            qwilprobe__pb2.ProbeTerminateRequest.SerializeToString,
            qwilprobe__pb2.ProbeTerminateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
