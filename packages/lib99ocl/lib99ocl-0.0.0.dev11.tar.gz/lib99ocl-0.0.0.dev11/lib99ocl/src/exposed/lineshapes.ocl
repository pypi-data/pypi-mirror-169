#include "lib99ocl/core.h"
#include "lib99ocl/lineshapes.h"
#include "lib99ocl/special.h"

KERNEL
void py_ipatia(GLOBAL_MEM ftype *out, GLOBAL_MEM const ftype *in,
               const ftype mu, const ftype sigma, const ftype lambda,
               const ftype zeta, const ftype beta, const ftype aL,
               const ftype nL, const ftype aR, const ftype nR) {
  const int idx = get_global_id(0);
  out[idx] = ipatia(in[idx], mu, sigma, lambda, zeta, beta, aL, nL, aR, nR);
}

KERNEL void kernel_exponential(GLOBAL_MEM ftype *out, GLOBAL_MEM const ftype *x,
                               const ftype c, const ftype xL, const ftype xU) {
  unsigned const int idx = get_global_id(0);
  const ftype num = exp(c * x[idx]);
  const ftype den =
      (fabs(c) > MACHEP) ? (exp(c * xU) - exp(c * xL)) / c : xU - xL;
  // if ( get_global_id(0) == 0) {
  //   printf("%f, %f\n", num, den);
  //   }
  out[idx] = num / den;
}

KERNEL
void py_hyperbolic_distribution(GLOBAL_MEM ftype *out,
                                GLOBAL_MEM const ftype *in, const ftype mu,
                                const ftype lambda, const ftype alpha,
                                const ftype beta, const ftype delta) {
  const int idx = get_global_id(0);
  out[idx] = hyperbolic_distribution(in[idx] - mu, lambda, alpha, beta, delta);
}

KERNEL
void py_amoroso(GLOBAL_MEM ftype *out, GLOBAL_MEM const ftype *in,
                const ftype a, const ftype theta, const ftype alpha,
                const ftype beta) {
  SIZE_T idx = get_global_id(0);
  out[idx] = amoroso(in[idx], a, theta, alpha, beta);
}

KERNEL
void kernel_gaussian(GLOBAL_MEM ftype *out, GLOBAL_MEM const ftype *in,
                     const ftype mu, const ftype sigma, const ftype xL,
                     const ftype xU) {
  SIZE_T idx = get_global_id(0);
  const ftype gpdf = gaussian(in[idx], mu, sigma);
  const ftype gint = gaussian_integral(xL, xU, mu, sigma);
  out[idx] = gpdf / gint;
}

KERNEL
void kernel_double_gaussian(GLOBAL_MEM ftype *out, GLOBAL_MEM const ftype *in,
                            const ftype mu, const ftype sigma1,
                            const ftype sigma2, const ftype frac,
                            const ftype xL, const ftype xU) {
  SIZE_T idx = get_global_id(0);
  const ftype gpdf1 = gaussian(in[idx], mu, sigma1);
  const ftype gpdf2 = gaussian(in[idx], mu, sigma2);
  const ftype gint1 = gaussian_integral(xL, xU, mu, sigma1);
  const ftype gint2 = gaussian_integral(xL, xU, mu, sigma2);
  out[idx] = frac * (gpdf1 / gint1) + (1 - frac) * (gpdf2 / gint2);
}

KERNEL
void kernel_kink_gaussian(GLOBAL_MEM ftype *out, GLOBAL_MEM const ftype *in,
                          const ftype mu, const ftype sigma, const ftype dmu,
                          const ftype dsigma, const ftype yae, const ftype res,
                          const ftype xL, const ftype xU) {
  SIZE_T idx = get_global_id(0);
  const ftype num = double_gaussian(in[idx], mu, sigma, dmu, dsigma, yae, res);
  const ftype den =
      double_gaussian_integral(xL, xU, mu, sigma, dmu, dsigma, yae, res);
  out[idx] = num / den;
}

KERNEL
void py_crystal_ball(GLOBAL_MEM ftype *out, GLOBAL_MEM const ftype *in,
                     const ftype c, const ftype s, const ftype a,
                     const ftype n) {
  SIZE_T idx = get_global_id(0);
  out[idx] = crystal_ball(in[idx], c, s, a, n);
}

KERNEL void kernel_crystal_ball(GLOBAL_MEM ftype *out,
                                GLOBAL_MEM const ftype *x, const ftype mu,
                                GLOBAL_MEM const ftype *sigma, const ftype aL,
                                const ftype nL, const ftype xL,
                                const ftype xU) {
  const unsigned int idx = get_global_id(0);
  const ftype num = crystal_ball(x[idx], mu, sigma[idx], aL, nL);
  const ftype den = crystal_ball_integral(xL, xU, mu, sigma[idx], aL, nL);
  out[idx] = num / den;
}

KERNEL void
kernel_double_crystal_ball(GLOBAL_MEM ftype *out, GLOBAL_MEM const ftype *x,
                           const ftype mu, GLOBAL_MEM const ftype *sigma,
                           const ftype aL, const ftype nL, const ftype aR,
                           const ftype nR, const ftype xL, const ftype xU) {
  const unsigned int idx = get_global_id(0);
  const ftype num = double_crystal_ball(x[idx], mu, sigma[idx], aL, nL, aR, nR);
  const ftype den =
      double_crystal_ball_integral(xL, xU, mu, sigma[idx], aL, nL, aR, nR);
  out[idx] = num / den;
}

KERNEL void kernel_chebyshev(GLOBAL_MEM ftype *ans, const GLOBAL_MEM ftype *x,
                             const GLOBAL_MEM ftype *t, const int deg,
                             const ftype xL, const ftype xH) {
  const unsigned int idx = get_global_id(0);
  const ftype num = chebyshev(x[idx], t, deg, xL, xH);
  const ftype denH = chebyshevIntegral(xH - 1e-14, t, deg, xL, xH);
  const ftype denL = chebyshevIntegral(xL + 1e-14, t, deg, xL, xH);
  const ftype den = denH - denL;
  ans[idx] = num / den;
}

KERNEL
void py_poly(GLOBAL_MEM ftype *out, GLOBAL_MEM const ftype *in, const int n,
             GLOBAL_MEM const ftype *p) {

  SIZE_T idx = get_global_id(0);
  ftype x = in[idx];

  if (n == 0) {
    out[idx] = 1.;
    return;
  }

  ftype o = x * p[n - 1];
  for (int i = 1; i < n; ++i)
    o = x * (o + p[n - i - 1]);

  out[idx] = o + 1.;
}

KERNEL
void py_power_law(GLOBAL_MEM ftype *out, GLOBAL_MEM const ftype *in,
                  const ftype c, const ftype n) {
  SIZE_T idx = get_global_id(0);
  out[idx] = 1. / pow(fabs(in[idx] - c), n);
}

KERNEL
void py_argus(GLOBAL_MEM ftype *out, GLOBAL_MEM const ftype *in, const ftype m0,
              const ftype c, const ftype p) {
  SIZE_T idx = get_global_id(0);
  out[idx] = argus(in[idx], m0, c, p);
}

KERNEL
void kernel_argus(GLOBAL_MEM ftype *out, GLOBAL_MEM const ftype *in,
                  const ftype m0, const ftype c, const ftype p, const ftype xL,
                  const ftype xU) {
  SIZE_T idx = get_global_id(0);
  const ftype num = argus(in[idx], m0, c, p);
  const ftype den = argus_integral(xL, xU, m0, c, p);
  out[idx] = num / den;
}

KERNEL
void kernel_landau(GLOBAL_MEM ftype *out, GLOBAL_MEM const ftype *in,
                   const ftype mu, const ftype sigma, const ftype xU) {
  SIZE_T idx = get_global_id(0);
  const ftype num = argus(in[idx], mu, sigma);
  const ftype den = 1; // argus_integral(xL, xU, mu, sigma);
  out[idx] = num / den;
}

KERNEL
void py_shoulder(GLOBAL_MEM ftype *out, GLOBAL_MEM const ftype *in,
                 const ftype m0, const ftype c, const ftype p) {
  SIZE_T idx = get_global_id(0);
  out[idx] = shoulder(in[idx], m0, c, p);
}

KERNEL
void py_physbkg(GLOBAL_MEM ftype *out, GLOBAL_MEM const ftype *in,
                const ftype m0, const ftype c, const ftype s) {
  SIZE_T idx = get_global_id(0);
  out[idx] = physbkg(in[idx], m0, c, s);
}

KERNEL
void py_johnson_su(GLOBAL_MEM ftype *out, GLOBAL_MEM const ftype *in,
                   const ftype mu, const ftype sigma, const ftype gamma,
                   const ftype delta) {
  SIZE_T idx = get_global_id(0);
  out[idx] = johnson_su(in[idx], mu, sigma, gamma, delta);
}

// vim: ft=cpp
