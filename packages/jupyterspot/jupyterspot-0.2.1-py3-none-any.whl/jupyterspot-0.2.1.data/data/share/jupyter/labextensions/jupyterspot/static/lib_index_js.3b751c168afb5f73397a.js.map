{"version":3,"file":"lib_index_js.3b751c168afb5f73397a.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAA+D;AACP;AACL;AACE;AACG;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAgB;AACxB;AACA;AACA;AACA;AACA,oBAAoB,uEAAoB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,sEAAgB;AACpB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,8EAA8E,OAAO;AACrF,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://jupyterspot/./lib/index.js"],"sourcesContent":["import { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { ToolbarButton } from '@jupyterlab/apputils';\nimport { DisposableDelegate } from '@lumino/disposable';\n// const backendURL = 'http://192.168.1.100:5000';\n// const frontendURL = 'http://192.168.1.100:5420';\nconst backendURL = 'https://api.jupyterspot.com';\nconst frontendURL = 'https://jupyterspot.com';\nlet apiKey = \"\";\n/**\n * Adds a notebook to JupyterSpot.\n */\nasync function addNotebook(panel, apiKey) {\n    // get the open dialog and set it's content to `msg`\n    function setMsg(msg) {\n        const dialogs = document.getElementsByClassName(\"jp-Dialog\");\n        if (dialogs.length > 0) {\n            const dialog = dialogs[0];\n            const msgDiv = dialog.getElementsByClassName(\"jp-Dialog-body\")[0];\n            msgDiv.innerHTML = msg;\n        }\n        else {\n            console.log(\"No open dialog found\");\n        }\n    }\n    if (!apiKey) {\n        showErrorMessage(\"Your JupyterSpot API key has not been set.\", \"Get your API key by going to https://jupyterspot.com/account, then add it to \" +\n            \"JupyterLab by going to Settings -> Advanced Settings Editor -> JupyterSpot \" +\n            \"and updating the API_KEY setting.\");\n        return;\n    }\n    // get JSON notebook representation from the panel\n    if (!panel.content.model) {\n        showErrorMessage(\"Notebook has no content, can't add it to JupyterSpot.\", \"\");\n        return;\n    }\n    const nb_json = JSON.stringify(panel.content.model.toJSON(), null);\n    // TODO: handle Windows paths\n    const nb_path = PageConfig.getOption('serverRoot') + '/' + panel.context.localPath;\n    const requestUrl = backendURL + '/api/v1/convert-nb-from-json-ext';\n    console.info('requestUrl:', requestUrl, \"apiKey:\", apiKey);\n    const fd = new FormData();\n    fd.append('nb_json', nb_json);\n    fd.append('api_key', apiKey);\n    fd.append('path', nb_path);\n    showErrorMessage(\"Adding notebook to JupyterSpot...\", \"\");\n    await fetch(requestUrl, {\n        method: 'post',\n        body: fd,\n    })\n        .then((res) => res.json())\n        .then((res) => {\n        console.log('JupyterSpot result:', res);\n        if (res.success) {\n            const url = frontendURL + '/notebook?id=' + res.id;\n            window.open(url);\n            setMsg(\"Added notebook to JupyterSpot successfully.  \" +\n                \"If a new tab didn't open, give your browser permission to open popups from JupyterLab. \" +\n                \"The URL for your notebook whiteboard is: <a href='\" + url + \"' target='_blank'>\" + url + \"</a>\");\n            console.info('JupyterSpot notebook url: ', url);\n        }\n        else {\n            setMsg('Error adding notebook to JupyterSpot: ' + res.msg);\n        }\n        return res;\n    })\n        .catch((error) => {\n        console.log('error:', error);\n        setMsg('Error adding the notebook to JupyterSpot: ' + error.toString());\n        return error;\n    });\n}\n/**\n * A notebook widget extension that adds the open notebook to JupyterSpot.\n */\nexport class ButtonExtension {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const button = new ToolbarButton({\n            className: 'upload-button',\n            label: 'Open in JupyterSpot',\n            tooltip: 'Open in JupyterSpot',\n            pressedTooltip: 'Adding notebook to JupyterSpot',\n            disabledTooltip: 'Adding notebook to JupyterSpot...',\n            enabled: true,\n            pressed: false,\n            onClick: () => addNotebook(panel, apiKey),\n        });\n        panel.toolbar.insertItem(10, 'openInJupyterSpot', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\n/**\n * Initialization data for the jupyterspot extension.\n */\nconst plugin = {\n    id: 'jupyterspot:plugin',\n    autoStart: true,\n    requires: [ISettingRegistry],\n    activate: (app, settings) => {\n        console.log('JupyterLab extension jupyterspot is activated!');\n        // add the button\n        app.docRegistry.addWidgetExtension('Notebook', new ButtonExtension());\n        /**\n         * Load the settings for this extension\n         *\n         * @param setting Extension settings\n         */\n        function loadSetting(setting) {\n            // Read the settings and convert to the correct type\n            apiKey = setting.get('API_KEY').composite;\n            if (apiKey) {\n                console.log(\"jupyterspot apiKey is set\");\n            }\n            else {\n                console.log(\"jupyterspot apiKey is NOT set\");\n            }\n        }\n        // Wait for the application to be restored and\n        // for the settings for this plugin to be loaded\n        Promise.all([app.restored, settings.load(plugin.id)])\n            .then(([, setting]) => {\n            // Read the settings\n            loadSetting(setting);\n            // Listen for your plugin setting changes using Signal\n            setting.changed.connect(loadSetting);\n        })\n            .catch((reason) => {\n            console.error(`Something went wrong when reading the settings.\\n${reason}`);\n        });\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}