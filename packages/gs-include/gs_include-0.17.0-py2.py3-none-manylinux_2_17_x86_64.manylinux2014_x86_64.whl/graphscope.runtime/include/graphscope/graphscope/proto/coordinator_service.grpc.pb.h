// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: graphscope/proto/coordinator_service.proto
// Original file comments:
// Copyright 2020 Alibaba Group Holding Limited. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#ifndef GRPC_graphscope_2fproto_2fcoordinator_5fservice_2eproto__INCLUDED
#define GRPC_graphscope_2fproto_2fcoordinator_5fservice_2eproto__INCLUDED

#include "graphscope/proto/coordinator_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace gs {
namespace rpc {

class CoordinatorService final {
 public:
  static constexpr char const* service_full_name() {
    return "gs.rpc.CoordinatorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Connect a session.
    virtual ::grpc::Status ConnectSession(::grpc::ClientContext* context, const ::gs::rpc::ConnectSessionRequest& request, ::gs::rpc::ConnectSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::ConnectSessionResponse>> AsyncConnectSession(::grpc::ClientContext* context, const ::gs::rpc::ConnectSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::ConnectSessionResponse>>(AsyncConnectSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::ConnectSessionResponse>> PrepareAsyncConnectSession(::grpc::ClientContext* context, const ::gs::rpc::ConnectSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::ConnectSessionResponse>>(PrepareAsyncConnectSessionRaw(context, request, cq));
    }
    // Heart Beat between client and coordinator
    virtual ::grpc::Status HeartBeat(::grpc::ClientContext* context, const ::gs::rpc::HeartBeatRequest& request, ::gs::rpc::HeartBeatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::HeartBeatResponse>> AsyncHeartBeat(::grpc::ClientContext* context, const ::gs::rpc::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::HeartBeatResponse>>(AsyncHeartBeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::HeartBeatResponse>> PrepareAsyncHeartBeat(::grpc::ClientContext* context, const ::gs::rpc::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::HeartBeatResponse>>(PrepareAsyncHeartBeatRaw(context, request, cq));
    }
    // Drives the graph computation.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>> RunStep(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>>(RunStepRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>> AsyncRunStep(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>>(AsyncRunStepRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>> PrepareAsyncRunStep(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>>(PrepareAsyncRunStepRaw(context, cq));
    }
    // Fetch analytical engine logs.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gs::rpc::FetchLogsResponse>> FetchLogs(::grpc::ClientContext* context, const ::gs::rpc::FetchLogsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gs::rpc::FetchLogsResponse>>(FetchLogsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gs::rpc::FetchLogsResponse>> AsyncFetchLogs(::grpc::ClientContext* context, const ::gs::rpc::FetchLogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gs::rpc::FetchLogsResponse>>(AsyncFetchLogsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gs::rpc::FetchLogsResponse>> PrepareAsyncFetchLogs(::grpc::ClientContext* context, const ::gs::rpc::FetchLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gs::rpc::FetchLogsResponse>>(PrepareAsyncFetchLogsRaw(context, request, cq));
    }
    // Closes a session.
    virtual ::grpc::Status CloseSession(::grpc::ClientContext* context, const ::gs::rpc::CloseSessionRequest& request, ::gs::rpc::CloseSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::CloseSessionResponse>> AsyncCloseSession(::grpc::ClientContext* context, const ::gs::rpc::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::CloseSessionResponse>>(AsyncCloseSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::CloseSessionResponse>> PrepareAsyncCloseSession(::grpc::ClientContext* context, const ::gs::rpc::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::CloseSessionResponse>>(PrepareAsyncCloseSessionRaw(context, request, cq));
    }
    // Distribute the specified libary to servers
    virtual ::grpc::Status AddLib(::grpc::ClientContext* context, const ::gs::rpc::AddLibRequest& request, ::gs::rpc::AddLibResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::AddLibResponse>> AsyncAddLib(::grpc::ClientContext* context, const ::gs::rpc::AddLibRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::AddLibResponse>>(AsyncAddLibRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::AddLibResponse>> PrepareAsyncAddLib(::grpc::ClientContext* context, const ::gs::rpc::AddLibRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::AddLibResponse>>(PrepareAsyncAddLibRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Connect a session.
      virtual void ConnectSession(::grpc::ClientContext* context, const ::gs::rpc::ConnectSessionRequest* request, ::gs::rpc::ConnectSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ConnectSession(::grpc::ClientContext* context, const ::gs::rpc::ConnectSessionRequest* request, ::gs::rpc::ConnectSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ConnectSession(::grpc::ClientContext* context, const ::gs::rpc::ConnectSessionRequest* request, ::gs::rpc::ConnectSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Heart Beat between client and coordinator
      virtual void HeartBeat(::grpc::ClientContext* context, const ::gs::rpc::HeartBeatRequest* request, ::gs::rpc::HeartBeatResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HeartBeat(::grpc::ClientContext* context, const ::gs::rpc::HeartBeatRequest* request, ::gs::rpc::HeartBeatResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HeartBeat(::grpc::ClientContext* context, const ::gs::rpc::HeartBeatRequest* request, ::gs::rpc::HeartBeatResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Drives the graph computation.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RunStep(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::gs::rpc::RunStepRequest,::gs::rpc::RunStepResponse>* reactor) = 0;
      #else
      virtual void RunStep(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::gs::rpc::RunStepRequest,::gs::rpc::RunStepResponse>* reactor) = 0;
      #endif
      // Fetch analytical engine logs.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FetchLogs(::grpc::ClientContext* context, ::gs::rpc::FetchLogsRequest* request, ::grpc::ClientReadReactor< ::gs::rpc::FetchLogsResponse>* reactor) = 0;
      #else
      virtual void FetchLogs(::grpc::ClientContext* context, ::gs::rpc::FetchLogsRequest* request, ::grpc::experimental::ClientReadReactor< ::gs::rpc::FetchLogsResponse>* reactor) = 0;
      #endif
      // Closes a session.
      virtual void CloseSession(::grpc::ClientContext* context, const ::gs::rpc::CloseSessionRequest* request, ::gs::rpc::CloseSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseSession(::grpc::ClientContext* context, const ::gs::rpc::CloseSessionRequest* request, ::gs::rpc::CloseSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseSession(::grpc::ClientContext* context, const ::gs::rpc::CloseSessionRequest* request, ::gs::rpc::CloseSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Distribute the specified libary to servers
      virtual void AddLib(::grpc::ClientContext* context, const ::gs::rpc::AddLibRequest* request, ::gs::rpc::AddLibResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddLib(::grpc::ClientContext* context, const ::gs::rpc::AddLibRequest* request, ::gs::rpc::AddLibResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddLib(::grpc::ClientContext* context, const ::gs::rpc::AddLibRequest* request, ::gs::rpc::AddLibResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::ConnectSessionResponse>* AsyncConnectSessionRaw(::grpc::ClientContext* context, const ::gs::rpc::ConnectSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::ConnectSessionResponse>* PrepareAsyncConnectSessionRaw(::grpc::ClientContext* context, const ::gs::rpc::ConnectSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::HeartBeatResponse>* AsyncHeartBeatRaw(::grpc::ClientContext* context, const ::gs::rpc::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::HeartBeatResponse>* PrepareAsyncHeartBeatRaw(::grpc::ClientContext* context, const ::gs::rpc::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>* RunStepRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>* AsyncRunStepRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>* PrepareAsyncRunStepRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::gs::rpc::FetchLogsResponse>* FetchLogsRaw(::grpc::ClientContext* context, const ::gs::rpc::FetchLogsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gs::rpc::FetchLogsResponse>* AsyncFetchLogsRaw(::grpc::ClientContext* context, const ::gs::rpc::FetchLogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gs::rpc::FetchLogsResponse>* PrepareAsyncFetchLogsRaw(::grpc::ClientContext* context, const ::gs::rpc::FetchLogsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::CloseSessionResponse>* AsyncCloseSessionRaw(::grpc::ClientContext* context, const ::gs::rpc::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::CloseSessionResponse>* PrepareAsyncCloseSessionRaw(::grpc::ClientContext* context, const ::gs::rpc::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::AddLibResponse>* AsyncAddLibRaw(::grpc::ClientContext* context, const ::gs::rpc::AddLibRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gs::rpc::AddLibResponse>* PrepareAsyncAddLibRaw(::grpc::ClientContext* context, const ::gs::rpc::AddLibRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ConnectSession(::grpc::ClientContext* context, const ::gs::rpc::ConnectSessionRequest& request, ::gs::rpc::ConnectSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gs::rpc::ConnectSessionResponse>> AsyncConnectSession(::grpc::ClientContext* context, const ::gs::rpc::ConnectSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gs::rpc::ConnectSessionResponse>>(AsyncConnectSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gs::rpc::ConnectSessionResponse>> PrepareAsyncConnectSession(::grpc::ClientContext* context, const ::gs::rpc::ConnectSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gs::rpc::ConnectSessionResponse>>(PrepareAsyncConnectSessionRaw(context, request, cq));
    }
    ::grpc::Status HeartBeat(::grpc::ClientContext* context, const ::gs::rpc::HeartBeatRequest& request, ::gs::rpc::HeartBeatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gs::rpc::HeartBeatResponse>> AsyncHeartBeat(::grpc::ClientContext* context, const ::gs::rpc::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gs::rpc::HeartBeatResponse>>(AsyncHeartBeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gs::rpc::HeartBeatResponse>> PrepareAsyncHeartBeat(::grpc::ClientContext* context, const ::gs::rpc::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gs::rpc::HeartBeatResponse>>(PrepareAsyncHeartBeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>> RunStep(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>>(RunStepRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>> AsyncRunStep(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>>(AsyncRunStepRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>> PrepareAsyncRunStep(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>>(PrepareAsyncRunStepRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gs::rpc::FetchLogsResponse>> FetchLogs(::grpc::ClientContext* context, const ::gs::rpc::FetchLogsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gs::rpc::FetchLogsResponse>>(FetchLogsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gs::rpc::FetchLogsResponse>> AsyncFetchLogs(::grpc::ClientContext* context, const ::gs::rpc::FetchLogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gs::rpc::FetchLogsResponse>>(AsyncFetchLogsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gs::rpc::FetchLogsResponse>> PrepareAsyncFetchLogs(::grpc::ClientContext* context, const ::gs::rpc::FetchLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gs::rpc::FetchLogsResponse>>(PrepareAsyncFetchLogsRaw(context, request, cq));
    }
    ::grpc::Status CloseSession(::grpc::ClientContext* context, const ::gs::rpc::CloseSessionRequest& request, ::gs::rpc::CloseSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gs::rpc::CloseSessionResponse>> AsyncCloseSession(::grpc::ClientContext* context, const ::gs::rpc::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gs::rpc::CloseSessionResponse>>(AsyncCloseSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gs::rpc::CloseSessionResponse>> PrepareAsyncCloseSession(::grpc::ClientContext* context, const ::gs::rpc::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gs::rpc::CloseSessionResponse>>(PrepareAsyncCloseSessionRaw(context, request, cq));
    }
    ::grpc::Status AddLib(::grpc::ClientContext* context, const ::gs::rpc::AddLibRequest& request, ::gs::rpc::AddLibResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gs::rpc::AddLibResponse>> AsyncAddLib(::grpc::ClientContext* context, const ::gs::rpc::AddLibRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gs::rpc::AddLibResponse>>(AsyncAddLibRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gs::rpc::AddLibResponse>> PrepareAsyncAddLib(::grpc::ClientContext* context, const ::gs::rpc::AddLibRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gs::rpc::AddLibResponse>>(PrepareAsyncAddLibRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ConnectSession(::grpc::ClientContext* context, const ::gs::rpc::ConnectSessionRequest* request, ::gs::rpc::ConnectSessionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ConnectSession(::grpc::ClientContext* context, const ::gs::rpc::ConnectSessionRequest* request, ::gs::rpc::ConnectSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ConnectSession(::grpc::ClientContext* context, const ::gs::rpc::ConnectSessionRequest* request, ::gs::rpc::ConnectSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void HeartBeat(::grpc::ClientContext* context, const ::gs::rpc::HeartBeatRequest* request, ::gs::rpc::HeartBeatResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HeartBeat(::grpc::ClientContext* context, const ::gs::rpc::HeartBeatRequest* request, ::gs::rpc::HeartBeatResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HeartBeat(::grpc::ClientContext* context, const ::gs::rpc::HeartBeatRequest* request, ::gs::rpc::HeartBeatResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RunStep(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::gs::rpc::RunStepRequest,::gs::rpc::RunStepResponse>* reactor) override;
      #else
      void RunStep(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::gs::rpc::RunStepRequest,::gs::rpc::RunStepResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FetchLogs(::grpc::ClientContext* context, ::gs::rpc::FetchLogsRequest* request, ::grpc::ClientReadReactor< ::gs::rpc::FetchLogsResponse>* reactor) override;
      #else
      void FetchLogs(::grpc::ClientContext* context, ::gs::rpc::FetchLogsRequest* request, ::grpc::experimental::ClientReadReactor< ::gs::rpc::FetchLogsResponse>* reactor) override;
      #endif
      void CloseSession(::grpc::ClientContext* context, const ::gs::rpc::CloseSessionRequest* request, ::gs::rpc::CloseSessionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseSession(::grpc::ClientContext* context, const ::gs::rpc::CloseSessionRequest* request, ::gs::rpc::CloseSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseSession(::grpc::ClientContext* context, const ::gs::rpc::CloseSessionRequest* request, ::gs::rpc::CloseSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddLib(::grpc::ClientContext* context, const ::gs::rpc::AddLibRequest* request, ::gs::rpc::AddLibResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddLib(::grpc::ClientContext* context, const ::gs::rpc::AddLibRequest* request, ::gs::rpc::AddLibResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddLib(::grpc::ClientContext* context, const ::gs::rpc::AddLibRequest* request, ::gs::rpc::AddLibResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gs::rpc::ConnectSessionResponse>* AsyncConnectSessionRaw(::grpc::ClientContext* context, const ::gs::rpc::ConnectSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gs::rpc::ConnectSessionResponse>* PrepareAsyncConnectSessionRaw(::grpc::ClientContext* context, const ::gs::rpc::ConnectSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gs::rpc::HeartBeatResponse>* AsyncHeartBeatRaw(::grpc::ClientContext* context, const ::gs::rpc::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gs::rpc::HeartBeatResponse>* PrepareAsyncHeartBeatRaw(::grpc::ClientContext* context, const ::gs::rpc::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>* RunStepRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>* AsyncRunStepRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>* PrepareAsyncRunStepRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::gs::rpc::FetchLogsResponse>* FetchLogsRaw(::grpc::ClientContext* context, const ::gs::rpc::FetchLogsRequest& request) override;
    ::grpc::ClientAsyncReader< ::gs::rpc::FetchLogsResponse>* AsyncFetchLogsRaw(::grpc::ClientContext* context, const ::gs::rpc::FetchLogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::gs::rpc::FetchLogsResponse>* PrepareAsyncFetchLogsRaw(::grpc::ClientContext* context, const ::gs::rpc::FetchLogsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gs::rpc::CloseSessionResponse>* AsyncCloseSessionRaw(::grpc::ClientContext* context, const ::gs::rpc::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gs::rpc::CloseSessionResponse>* PrepareAsyncCloseSessionRaw(::grpc::ClientContext* context, const ::gs::rpc::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gs::rpc::AddLibResponse>* AsyncAddLibRaw(::grpc::ClientContext* context, const ::gs::rpc::AddLibRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gs::rpc::AddLibResponse>* PrepareAsyncAddLibRaw(::grpc::ClientContext* context, const ::gs::rpc::AddLibRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ConnectSession_;
    const ::grpc::internal::RpcMethod rpcmethod_HeartBeat_;
    const ::grpc::internal::RpcMethod rpcmethod_RunStep_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchLogs_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseSession_;
    const ::grpc::internal::RpcMethod rpcmethod_AddLib_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Connect a session.
    virtual ::grpc::Status ConnectSession(::grpc::ServerContext* context, const ::gs::rpc::ConnectSessionRequest* request, ::gs::rpc::ConnectSessionResponse* response);
    // Heart Beat between client and coordinator
    virtual ::grpc::Status HeartBeat(::grpc::ServerContext* context, const ::gs::rpc::HeartBeatRequest* request, ::gs::rpc::HeartBeatResponse* response);
    // Drives the graph computation.
    virtual ::grpc::Status RunStep(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::gs::rpc::RunStepResponse, ::gs::rpc::RunStepRequest>* stream);
    // Fetch analytical engine logs.
    virtual ::grpc::Status FetchLogs(::grpc::ServerContext* context, const ::gs::rpc::FetchLogsRequest* request, ::grpc::ServerWriter< ::gs::rpc::FetchLogsResponse>* writer);
    // Closes a session.
    virtual ::grpc::Status CloseSession(::grpc::ServerContext* context, const ::gs::rpc::CloseSessionRequest* request, ::gs::rpc::CloseSessionResponse* response);
    // Distribute the specified libary to servers
    virtual ::grpc::Status AddLib(::grpc::ServerContext* context, const ::gs::rpc::AddLibRequest* request, ::gs::rpc::AddLibResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ConnectSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConnectSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ConnectSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectSession(::grpc::ServerContext* /*context*/, const ::gs::rpc::ConnectSessionRequest* /*request*/, ::gs::rpc::ConnectSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectSession(::grpc::ServerContext* context, ::gs::rpc::ConnectSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::gs::rpc::ConnectSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HeartBeat() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_HeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeartBeat(::grpc::ServerContext* /*context*/, const ::gs::rpc::HeartBeatRequest* /*request*/, ::gs::rpc::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartBeat(::grpc::ServerContext* context, ::gs::rpc::HeartBeatRequest* request, ::grpc::ServerAsyncResponseWriter< ::gs::rpc::HeartBeatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RunStep() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RunStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunStep(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::gs::rpc::RunStepResponse, ::gs::rpc::RunStepRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunStep(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::gs::rpc::RunStepResponse, ::gs::rpc::RunStepRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchLogs() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FetchLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchLogs(::grpc::ServerContext* /*context*/, const ::gs::rpc::FetchLogsRequest* /*request*/, ::grpc::ServerWriter< ::gs::rpc::FetchLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchLogs(::grpc::ServerContext* context, ::gs::rpc::FetchLogsRequest* request, ::grpc::ServerAsyncWriter< ::gs::rpc::FetchLogsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseSession() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::gs::rpc::CloseSessionRequest* /*request*/, ::gs::rpc::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseSession(::grpc::ServerContext* context, ::gs::rpc::CloseSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::gs::rpc::CloseSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddLib() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AddLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLib(::grpc::ServerContext* /*context*/, const ::gs::rpc::AddLibRequest* /*request*/, ::gs::rpc::AddLibResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddLib(::grpc::ServerContext* context, ::gs::rpc::AddLibRequest* request, ::grpc::ServerAsyncResponseWriter< ::gs::rpc::AddLibResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ConnectSession<WithAsyncMethod_HeartBeat<WithAsyncMethod_RunStep<WithAsyncMethod_FetchLogs<WithAsyncMethod_CloseSession<WithAsyncMethod_AddLib<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ConnectSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ConnectSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gs::rpc::ConnectSessionRequest, ::gs::rpc::ConnectSessionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gs::rpc::ConnectSessionRequest* request, ::gs::rpc::ConnectSessionResponse* response) { return this->ConnectSession(context, request, response); }));}
    void SetMessageAllocatorFor_ConnectSession(
        ::grpc::experimental::MessageAllocator< ::gs::rpc::ConnectSessionRequest, ::gs::rpc::ConnectSessionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gs::rpc::ConnectSessionRequest, ::gs::rpc::ConnectSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ConnectSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectSession(::grpc::ServerContext* /*context*/, const ::gs::rpc::ConnectSessionRequest* /*request*/, ::gs::rpc::ConnectSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ConnectSession(
      ::grpc::CallbackServerContext* /*context*/, const ::gs::rpc::ConnectSessionRequest* /*request*/, ::gs::rpc::ConnectSessionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ConnectSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gs::rpc::ConnectSessionRequest* /*request*/, ::gs::rpc::ConnectSessionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_HeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_HeartBeat() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gs::rpc::HeartBeatRequest, ::gs::rpc::HeartBeatResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gs::rpc::HeartBeatRequest* request, ::gs::rpc::HeartBeatResponse* response) { return this->HeartBeat(context, request, response); }));}
    void SetMessageAllocatorFor_HeartBeat(
        ::grpc::experimental::MessageAllocator< ::gs::rpc::HeartBeatRequest, ::gs::rpc::HeartBeatResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gs::rpc::HeartBeatRequest, ::gs::rpc::HeartBeatResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_HeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeartBeat(::grpc::ServerContext* /*context*/, const ::gs::rpc::HeartBeatRequest* /*request*/, ::gs::rpc::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HeartBeat(
      ::grpc::CallbackServerContext* /*context*/, const ::gs::rpc::HeartBeatRequest* /*request*/, ::gs::rpc::HeartBeatResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HeartBeat(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gs::rpc::HeartBeatRequest* /*request*/, ::gs::rpc::HeartBeatResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RunStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RunStep() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->RunStep(context); }));
    }
    ~ExperimentalWithCallbackMethod_RunStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunStep(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::gs::rpc::RunStepResponse, ::gs::rpc::RunStepRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>* RunStep(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::gs::rpc::RunStepRequest, ::gs::rpc::RunStepResponse>* RunStep(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FetchLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FetchLogs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::gs::rpc::FetchLogsRequest, ::gs::rpc::FetchLogsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gs::rpc::FetchLogsRequest* request) { return this->FetchLogs(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_FetchLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchLogs(::grpc::ServerContext* /*context*/, const ::gs::rpc::FetchLogsRequest* /*request*/, ::grpc::ServerWriter< ::gs::rpc::FetchLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::gs::rpc::FetchLogsResponse>* FetchLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::gs::rpc::FetchLogsRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::gs::rpc::FetchLogsResponse>* FetchLogs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gs::rpc::FetchLogsRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CloseSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::gs::rpc::CloseSessionRequest, ::gs::rpc::CloseSessionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gs::rpc::CloseSessionRequest* request, ::gs::rpc::CloseSessionResponse* response) { return this->CloseSession(context, request, response); }));}
    void SetMessageAllocatorFor_CloseSession(
        ::grpc::experimental::MessageAllocator< ::gs::rpc::CloseSessionRequest, ::gs::rpc::CloseSessionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gs::rpc::CloseSessionRequest, ::gs::rpc::CloseSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::gs::rpc::CloseSessionRequest* /*request*/, ::gs::rpc::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseSession(
      ::grpc::CallbackServerContext* /*context*/, const ::gs::rpc::CloseSessionRequest* /*request*/, ::gs::rpc::CloseSessionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gs::rpc::CloseSessionRequest* /*request*/, ::gs::rpc::CloseSessionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddLib() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::gs::rpc::AddLibRequest, ::gs::rpc::AddLibResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gs::rpc::AddLibRequest* request, ::gs::rpc::AddLibResponse* response) { return this->AddLib(context, request, response); }));}
    void SetMessageAllocatorFor_AddLib(
        ::grpc::experimental::MessageAllocator< ::gs::rpc::AddLibRequest, ::gs::rpc::AddLibResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gs::rpc::AddLibRequest, ::gs::rpc::AddLibResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLib(::grpc::ServerContext* /*context*/, const ::gs::rpc::AddLibRequest* /*request*/, ::gs::rpc::AddLibResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddLib(
      ::grpc::CallbackServerContext* /*context*/, const ::gs::rpc::AddLibRequest* /*request*/, ::gs::rpc::AddLibResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddLib(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gs::rpc::AddLibRequest* /*request*/, ::gs::rpc::AddLibResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ConnectSession<ExperimentalWithCallbackMethod_HeartBeat<ExperimentalWithCallbackMethod_RunStep<ExperimentalWithCallbackMethod_FetchLogs<ExperimentalWithCallbackMethod_CloseSession<ExperimentalWithCallbackMethod_AddLib<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ConnectSession<ExperimentalWithCallbackMethod_HeartBeat<ExperimentalWithCallbackMethod_RunStep<ExperimentalWithCallbackMethod_FetchLogs<ExperimentalWithCallbackMethod_CloseSession<ExperimentalWithCallbackMethod_AddLib<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ConnectSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConnectSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ConnectSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectSession(::grpc::ServerContext* /*context*/, const ::gs::rpc::ConnectSessionRequest* /*request*/, ::gs::rpc::ConnectSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HeartBeat() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_HeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeartBeat(::grpc::ServerContext* /*context*/, const ::gs::rpc::HeartBeatRequest* /*request*/, ::gs::rpc::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RunStep() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RunStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunStep(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::gs::rpc::RunStepResponse, ::gs::rpc::RunStepRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchLogs() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FetchLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchLogs(::grpc::ServerContext* /*context*/, const ::gs::rpc::FetchLogsRequest* /*request*/, ::grpc::ServerWriter< ::gs::rpc::FetchLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseSession() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::gs::rpc::CloseSessionRequest* /*request*/, ::gs::rpc::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddLib() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AddLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLib(::grpc::ServerContext* /*context*/, const ::gs::rpc::AddLibRequest* /*request*/, ::gs::rpc::AddLibResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConnectSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConnectSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ConnectSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectSession(::grpc::ServerContext* /*context*/, const ::gs::rpc::ConnectSessionRequest* /*request*/, ::gs::rpc::ConnectSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HeartBeat() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_HeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeartBeat(::grpc::ServerContext* /*context*/, const ::gs::rpc::HeartBeatRequest* /*request*/, ::gs::rpc::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartBeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RunStep() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RunStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunStep(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::gs::rpc::RunStepResponse, ::gs::rpc::RunStepRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunStep(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchLogs() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FetchLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchLogs(::grpc::ServerContext* /*context*/, const ::gs::rpc::FetchLogsRequest* /*request*/, ::grpc::ServerWriter< ::gs::rpc::FetchLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchLogs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseSession() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::gs::rpc::CloseSessionRequest* /*request*/, ::gs::rpc::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddLib() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_AddLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLib(::grpc::ServerContext* /*context*/, const ::gs::rpc::AddLibRequest* /*request*/, ::gs::rpc::AddLibResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddLib(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ConnectSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ConnectSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConnectSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ConnectSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectSession(::grpc::ServerContext* /*context*/, const ::gs::rpc::ConnectSessionRequest* /*request*/, ::gs::rpc::ConnectSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ConnectSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ConnectSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_HeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_HeartBeat() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HeartBeat(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_HeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeartBeat(::grpc::ServerContext* /*context*/, const ::gs::rpc::HeartBeatRequest* /*request*/, ::gs::rpc::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HeartBeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HeartBeat(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RunStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RunStep() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->RunStep(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_RunStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunStep(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::gs::rpc::RunStepResponse, ::gs::rpc::RunStepRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* RunStep(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* RunStep(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FetchLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FetchLogs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->FetchLogs(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_FetchLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchLogs(::grpc::ServerContext* /*context*/, const ::gs::rpc::FetchLogsRequest* /*request*/, ::grpc::ServerWriter< ::gs::rpc::FetchLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FetchLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* FetchLogs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CloseSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::gs::rpc::CloseSessionRequest* /*request*/, ::gs::rpc::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddLib() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddLib(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLib(::grpc::ServerContext* /*context*/, const ::gs::rpc::AddLibRequest* /*request*/, ::gs::rpc::AddLibResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddLib(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddLib(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConnectSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConnectSession() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gs::rpc::ConnectSessionRequest, ::gs::rpc::ConnectSessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gs::rpc::ConnectSessionRequest, ::gs::rpc::ConnectSessionResponse>* streamer) {
                       return this->StreamedConnectSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConnectSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConnectSession(::grpc::ServerContext* /*context*/, const ::gs::rpc::ConnectSessionRequest* /*request*/, ::gs::rpc::ConnectSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConnectSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gs::rpc::ConnectSessionRequest,::gs::rpc::ConnectSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HeartBeat() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gs::rpc::HeartBeatRequest, ::gs::rpc::HeartBeatResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gs::rpc::HeartBeatRequest, ::gs::rpc::HeartBeatResponse>* streamer) {
                       return this->StreamedHeartBeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HeartBeat(::grpc::ServerContext* /*context*/, const ::gs::rpc::HeartBeatRequest* /*request*/, ::gs::rpc::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHeartBeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gs::rpc::HeartBeatRequest,::gs::rpc::HeartBeatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseSession() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gs::rpc::CloseSessionRequest, ::gs::rpc::CloseSessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gs::rpc::CloseSessionRequest, ::gs::rpc::CloseSessionResponse>* streamer) {
                       return this->StreamedCloseSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::gs::rpc::CloseSessionRequest* /*request*/, ::gs::rpc::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gs::rpc::CloseSessionRequest,::gs::rpc::CloseSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddLib() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gs::rpc::AddLibRequest, ::gs::rpc::AddLibResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gs::rpc::AddLibRequest, ::gs::rpc::AddLibResponse>* streamer) {
                       return this->StreamedAddLib(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddLib(::grpc::ServerContext* /*context*/, const ::gs::rpc::AddLibRequest* /*request*/, ::gs::rpc::AddLibResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddLib(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gs::rpc::AddLibRequest,::gs::rpc::AddLibResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ConnectSession<WithStreamedUnaryMethod_HeartBeat<WithStreamedUnaryMethod_CloseSession<WithStreamedUnaryMethod_AddLib<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FetchLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FetchLogs() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::gs::rpc::FetchLogsRequest, ::gs::rpc::FetchLogsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::gs::rpc::FetchLogsRequest, ::gs::rpc::FetchLogsResponse>* streamer) {
                       return this->StreamedFetchLogs(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FetchLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchLogs(::grpc::ServerContext* /*context*/, const ::gs::rpc::FetchLogsRequest* /*request*/, ::grpc::ServerWriter< ::gs::rpc::FetchLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFetchLogs(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::gs::rpc::FetchLogsRequest,::gs::rpc::FetchLogsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FetchLogs<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_ConnectSession<WithStreamedUnaryMethod_HeartBeat<WithSplitStreamingMethod_FetchLogs<WithStreamedUnaryMethod_CloseSession<WithStreamedUnaryMethod_AddLib<Service > > > > > StreamedService;
};

}  // namespace rpc
}  // namespace gs


#endif  // GRPC_graphscope_2fproto_2fcoordinator_5fservice_2eproto__INCLUDED
