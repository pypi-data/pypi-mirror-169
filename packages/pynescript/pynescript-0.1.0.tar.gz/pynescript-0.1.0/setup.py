# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['pynescript',
 'pynescript.ast',
 'pynescript.ast.parser',
 'pynescript.ast.parser.grammars',
 'pynescript.ast.parser.tokens',
 'pynescript.types',
 'pynescript.utils']

package_data = \
{'': ['*']}

install_requires = \
['click>=8.0.1', 'pyparsing>=3.0.9', 'requests>=2.28.1', 'tqdm>=4.64.1']

entry_points = \
{'console_scripts': ['pynescript = pynescript.__main__:cli']}

setup_kwargs = {
    'name': 'pynescript',
    'version': '0.1.0',
    'description': 'Pynescript',
    'long_description': '# Pynescript\n\n[![PyPI](https://img.shields.io/pypi/v/pynescript.svg)][pypi_]\n[![Status](https://img.shields.io/pypi/status/pynescript.svg)][status]\n[![Python Version](https://img.shields.io/pypi/pyversions/pynescript)][python version]\n[![License](https://img.shields.io/pypi/l/pynescript)][license]\n\n[![Read the documentation at https://pynescript.readthedocs.io/](https://img.shields.io/readthedocs/pynescript/latest.svg?label=Read%20the%20Docs)][read the docs]\n[![Tests](https://github.com/elbakramer/pynescript/workflows/Tests/badge.svg)][tests]\n[![Codecov](https://codecov.io/gh/elbakramer/pynescript/branch/main/graph/badge.svg)][codecov]\n\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)][pre-commit]\n[![Black](https://img.shields.io/badge/code%20style-black-000000.svg)][black]\n\n[pypi_]: https://pypi.org/project/pynescript/\n[status]: https://pypi.org/project/pynescript/\n[python version]: https://pypi.org/project/pynescript\n[read the docs]: https://pynescript.readthedocs.io/\n[tests]: https://github.com/elbakramer/pynescript/actions?workflow=Tests\n[codecov]: https://app.codecov.io/gh/elbakramer/pynescript\n[pre-commit]: https://github.com/pre-commit/pre-commit\n[black]: https://github.com/psf/black\n\n## Features\n\nHandle [Pinescript] using [Python]\n\n-   Parse Pinescript code into AST\n-   Dump parsed AST\n-   Unparse parsed AST back to Pinescript code\n\nGiven an example pinescript with name of `rsi_strategy.pine`:\n\n```pinescript\n//@version=5\nstrategy("RSI Strategy", overlay=true)\nlength = input( 14 )\noverSold = input( 30 )\noverBought = input( 70 )\nprice = close\nvrsi = ta.rsi(price, length)\nco = ta.crossover(vrsi, overSold)\ncu = ta.crossunder(vrsi, overBought)\nif (not na(vrsi))\n\tif (co)\n\t\tstrategy.entry("RsiLE", strategy.long, comment="RsiLE")\n\tif (cu)\n\t\tstrategy.entry("RsiSE", strategy.short, comment="RsiSE")\n//plot(strategy.equity, title="equity", color=color.red, linewidth=2, style=plot.style_areabr)\n```\n\nParsing script into AST and dumping it:\n\n```console\n$ pynescript parse-and-dump rsi_strategy.pine\n```\n\nGives like:\n\n```python\nScript(\n  body=[\n    Expr(\n      value=Call(\n        func=Name(\n          id=\'strategy\',\n        ),\n        arguments=[\n          Argument(\n            value=Constant(\n              value=\'RSI Strategy\',\n            ),\n            name=None,\n          ),\n          Argument(\n            value=Constant(\n              value=True,\n            ),\n            name=\'overlay\',\n          ),\n        ],\n        type_argument=None,\n      ),\n    ),\n    Assign(\n      target=\'length\',\n      value=Call(\n        func=Name(\n          id=\'input\',\n        ),\n        arguments=[\n          Argument(\n            value=Constant(\n              value=14,\n            ),\n            name=None,\n          ),\n        ],\n        type_argument=None,\n      ),\n      declaration_mode=None,\n      type_specifier=None,\n    ),\n    ...\n```\n\n<details>\n    <summary>Full AST dump that is quote long...</summary>\n\n```python\nScript(\n  body=[\n    Expr(\n      value=Call(\n        func=Name(\n          id=\'strategy\',\n        ),\n        arguments=[\n          Argument(\n            value=Constant(\n              value=\'RSI Strategy\',\n            ),\n            name=None,\n          ),\n          Argument(\n            value=Constant(\n              value=True,\n            ),\n            name=\'overlay\',\n          ),\n        ],\n        type_argument=None,\n      ),\n    ),\n    Assign(\n      target=\'length\',\n      value=Call(\n        func=Name(\n          id=\'input\',\n        ),\n        arguments=[\n          Argument(\n            value=Constant(\n              value=14,\n            ),\n            name=None,\n          ),\n        ],\n        type_argument=None,\n      ),\n      declaration_mode=None,\n      type_specifier=None,\n    ),\n    Assign(\n      target=\'overSold\',\n      value=Call(\n        func=Name(\n          id=\'input\',\n        ),\n        arguments=[\n          Argument(\n            value=Constant(\n              value=30,\n            ),\n            name=None,\n          ),\n        ],\n        type_argument=None,\n      ),\n      declaration_mode=None,\n      type_specifier=None,\n    ),\n    Assign(\n      target=\'overBought\',\n      value=Call(\n        func=Name(\n          id=\'input\',\n        ),\n        arguments=[\n          Argument(\n            value=Constant(\n              value=70,\n            ),\n            name=None,\n          ),\n        ],\n        type_argument=None,\n      ),\n      declaration_mode=None,\n      type_specifier=None,\n    ),\n    Assign(\n      target=\'price\',\n      value=Name(\n        id=\'close\',\n      ),\n      declaration_mode=None,\n      type_specifier=None,\n    ),\n    Assign(\n      target=\'vrsi\',\n      value=Call(\n        func=Attribute(\n          value=Name(\n            id=\'ta\',\n          ),\n          attribute=\'rsi\',\n        ),\n        arguments=[\n          Argument(\n            value=Name(\n              id=\'price\',\n            ),\n            name=None,\n          ),\n          Argument(\n            value=Name(\n              id=\'length\',\n            ),\n            name=None,\n          ),\n        ],\n        type_argument=None,\n      ),\n      declaration_mode=None,\n      type_specifier=None,\n    ),\n    Assign(\n      target=\'co\',\n      value=Call(\n        func=Attribute(\n          value=Name(\n            id=\'ta\',\n          ),\n          attribute=\'crossover\',\n        ),\n        arguments=[\n          Argument(\n            value=Name(\n              id=\'vrsi\',\n            ),\n            name=None,\n          ),\n          Argument(\n            value=Name(\n              id=\'overSold\',\n            ),\n            name=None,\n          ),\n        ],\n        type_argument=None,\n      ),\n      declaration_mode=None,\n      type_specifier=None,\n    ),\n    Assign(\n      target=\'cu\',\n      value=Call(\n        func=Attribute(\n          value=Name(\n            id=\'ta\',\n          ),\n          attribute=\'crossunder\',\n        ),\n        arguments=[\n          Argument(\n            value=Name(\n              id=\'vrsi\',\n            ),\n            name=None,\n          ),\n          Argument(\n            value=Name(\n              id=\'overBought\',\n            ),\n            name=None,\n          ),\n        ],\n        type_argument=None,\n      ),\n      declaration_mode=None,\n      type_specifier=None,\n    ),\n    Expr(\n      value=If(\n        condition=Unary(\n          operator=Not(),\n          operand=Call(\n            func=Name(\n              id=\'na\',\n            ),\n            arguments=[\n              Argument(\n                value=Name(\n                  id=\'vrsi\',\n                ),\n                name=None,\n              ),\n            ],\n            type_argument=None,\n          ),\n        ),\n        body=[\n          Expr(\n            value=If(\n              condition=Name(\n                id=\'co\',\n              ),\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(\n                        id=\'strategy\',\n                      ),\n                      attribute=\'entry\',\n                    ),\n                    arguments=[\n                      Argument(\n                        value=Constant(\n                          value=\'RsiLE\',\n                        ),\n                        name=None,\n                      ),\n                      Argument(\n                        value=Attribute(\n                          value=Name(\n                            id=\'strategy\',\n                          ),\n                          attribute=\'long\',\n                        ),\n                        name=None,\n                      ),\n                      Argument(\n                        value=Constant(\n                          value=\'RsiLE\',\n                        ),\n                        name=\'comment\',\n                      ),\n                    ],\n                    type_argument=None,\n                  ),\n                ),\n              ],\n              orelse=None,\n            ),\n          ),\n          Expr(\n            value=If(\n              condition=Name(\n                id=\'cu\',\n              ),\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(\n                        id=\'strategy\',\n                      ),\n                      attribute=\'entry\',\n                    ),\n                    arguments=[\n                      Argument(\n                        value=Constant(\n                          value=\'RsiSE\',\n                        ),\n                        name=None,\n                      ),\n                      Argument(\n                        value=Attribute(\n                          value=Name(\n                            id=\'strategy\',\n                          ),\n                          attribute=\'short\',\n                        ),\n                        name=None,\n                      ),\n                      Argument(\n                        value=Constant(\n                          value=\'RsiSE\',\n                        ),\n                        name=\'comment\',\n                      ),\n                    ],\n                    type_argument=None,\n                  ),\n                ),\n              ],\n              orelse=None,\n            ),\n          ),\n        ],\n        orelse=None,\n      ),\n    ),\n  ],\n  version=5,\n)\n```\n\n</details>\n\nParsing into AST and unparsing it back:\n\n```console\n$ pynescript parse-and-unparse rsi_strategy.pine\n```\n\nGives (with some difference in syntax including spacing):\n\n```pinescript\n//@version=5\nstrategy("RSI Strategy", overlay=true)\nlength = input(14)\noverSold = input(30)\noverBought = input(70)\nprice = close\nvrsi = ta.rsi(price, length)\nco = ta.crossover(vrsi, overSold)\ncu = ta.crossunder(vrsi, overBought)\nif not na(vrsi)\n    if co\n        strategy.entry("RsiLE", strategy.long, comment="RsiLE")\n    if cu\n        strategy.entry("RsiSE", strategy.short, comment="RsiSE")\n```\n\n## Future Plans\n\n-   [Tradingview]-less standalone local back-testing and live-trading using [NautilusTrader]\n\n## Requirements\n\n-   Python 3.8 or higher\n\n## Installation\n\nYou can install _Pynescript_ via [pip] from [PyPI]:\n\n```console\n$ pip install pynescript\n```\n\n## Usage\n\nPlease see the [Usage][usage] for details.\n\nAlso check out [example_usage.py][example usage] script for examples.\n\n## Contributing\n\nContributions are very welcome.\nTo learn more, see the [Contributor Guide].\n\n## License\n\nDistributed under the terms of the [LGPL 3.0 license][license],\n_Pynescript_ is free and open source software.\n\n## Issues\n\nIf you encounter any problems,\nplease [file an issue] along with a detailed description.\n\n## Credits\n\nThis project was generated from [@cjolowicz]\'s [Hypermodern Python Cookiecutter] template.\n\n[@cjolowicz]: https://github.com/cjolowicz\n[pypi]: https://pypi.org/\n[hypermodern python cookiecutter]: https://github.com/cjolowicz/cookiecutter-hypermodern-python\n[file an issue]: https://github.com/elbakramer/pynescript/issues\n[pip]: https://pip.pypa.io/\n[pinescript]: https://www.tradingview.com/pine-script-docs/en/v5/Introduction.html\n[python]: https://www.python.org/\n[tradingview]: https://tradingview.com/\n[nautilustrader]: https://github.com/nautechsystems/nautilus_trader\n[example usage]: https://github.com/elbakramer/pynescript/blob/main/example_usage.py\n\n<!-- github-only -->\n\n[license]: https://github.com/elbakramer/pynescript/blob/main/LICENSE\n[contributor guide]: https://github.com/elbakramer/pynescript/blob/main/CONTRIBUTING.md\n[usage]: https://pynescript.readthedocs.io/en/latest/usage.html\n',
    'author': 'Yunseong Hwang',
    'author_email': 'kika1492@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/elbakramer/pynescript',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
