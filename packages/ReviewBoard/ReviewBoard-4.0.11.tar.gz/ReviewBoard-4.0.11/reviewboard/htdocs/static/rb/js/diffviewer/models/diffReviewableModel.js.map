{"version":3,"file":"diffReviewableModel.js","names":["RB","DiffReviewable","AbstractReviewable","extend","defaults","_","baseFileDiffID","file","fileDiffID","interdiffRevision","interFileDiffID","revision","prototype","commentBlockModel","DiffCommentBlock","defaultCommentBlockFields","loadSerializedCommentBlock","serializedCommentBlock","createCommentBlock","reviewRequest","get","review","beginLineNum","linenum","endLineNum","num_lines","serializedComments","comments","getRenderedDiff","callbacks","context","options","_fetchFragment","url","_buildRenderedDiffURL","index","showDeleted","noActivityIndicator","getRenderedDiffFragment","console","assert","chunkIndex","undefined","linesOfContext","apiCall","type","dataType","bindCallbacks","reviewURL","revisionPart","fileDiffPart","queryParts","push","TEMPLATE_SERIAL","queryStr","join"],"sources":["diffReviewableModel.es6.js"],"sourcesContent":["/**\n * Provides state and utility functions for loading and reviewing diffs.\n *\n * Model Attributes:\n *     baseFileDiffID (number):\n *         The ID of the base FileDiff.\n *\n *     fileDiffID (number):\n *         The ID of the FileDiff.\n *\n *     file (RB.DiffFile):\n *         Information on the file associated with this diff.\n *\n *     interdiffRevision (number):\n *         The revision on the end of an interdiff range.\n *\n *     interFileDiffID (number):\n *         The ID of the FileDiff on the end of an interdiff range.\n *\n *     revision (number):\n *         The revision of the FileDiff.\n *\n * See Also:\n *     :js:class:`RB.AbstractReviewable`:\n *         For the attributes defined by the base model.\n */\nRB.DiffReviewable = RB.AbstractReviewable.extend({\n    defaults: _.defaults({\n        baseFileDiffID: null,\n        file: null,\n        fileDiffID: null,\n        interdiffRevision: null,\n        interFileDiffID: null,\n        revision: null,\n    }, RB.AbstractReviewable.prototype.defaults),\n\n    commentBlockModel: RB.DiffCommentBlock,\n\n    defaultCommentBlockFields: [\n        'baseFileDiffID',\n        'fileDiffID',\n        'interFileDiffID',\n    ],\n\n    /**\n     * Load a serialized comment and add comment blocks for it.\n     *\n     * Args:\n     *     serializedCommentBlock (object):\n     *         The serialized data for the new comment block(s).\n     */\n    loadSerializedCommentBlock(serializedCommentBlock) {\n        this.createCommentBlock({\n            reviewRequest: this.get('reviewRequest'),\n            review: this.get('review'),\n            fileDiffID: this.get('fileDiffID'),\n            interFileDiffID: this.get('interFileDiffID'),\n            beginLineNum: serializedCommentBlock.linenum,\n            endLineNum: serializedCommentBlock.linenum +\n                        serializedCommentBlock.num_lines - 1,\n            serializedComments: serializedCommentBlock.comments || [],\n        });\n    },\n\n    /**\n     * Return the rendered diff for a file.\n     *\n     * The rendered file will be fetched from the server and eventually\n     * returned as the argument to the success callback.\n     *\n     * Args:\n     *     callbacks (object):\n     *         The functions used to fetch the corresponding diff fragments.\n     *\n     *     context (object):\n     *         The context passed to each callback function.\n     *\n     *     options (object, optional):\n     *         The option arguments that control the behavior of this function.\n     *\n     * Option Args:\n     *     showDeleted (boolean):\n     *         Determines whether or not we want to requeue the corresponding\n     *         diff in order to show its deleted content.\n     */\n    getRenderedDiff(callbacks, context, options={}) {\n        this._fetchFragment({\n            url: this._buildRenderedDiffURL({\n                index: this.get('file').get('index'),\n                showDeleted: options.showDeleted,\n            }),\n            noActivityIndicator: true,\n        }, callbacks, context);\n    },\n\n    /**\n     * Return a rendered fragment of a diff.\n     *\n     * The fragment will be fetched from the server and eventually returned\n     * as the argument to the success callback.\n     *\n     * Args:\n     *     options (object):\n     *         The option arguments that control the behavior of this function.\n     *\n     *     callbacks (object):\n     *         The functions used to fetch the corresponding diff fragments.\n     *\n     *     context (object):\n     *         The context passed to each callback function.\n     *\n     * Option Args:\n     *     chunkIndex (string):\n     *         The chunk index to load.\n     */\n    getRenderedDiffFragment(options, callbacks, context) {\n        console.assert(options.chunkIndex !== undefined,\n                       'chunkIndex must be provided');\n\n        this._fetchFragment({\n            url: this._buildRenderedDiffURL({\n                chunkIndex: options.chunkIndex,\n                index: this.get('file').get('index'),\n                linesOfContext: options.linesOfContext,\n            }),\n        }, callbacks, context);\n    },\n\n    /**\n     * Fetch the diff fragment from the server.\n     *\n     * This is used internally by getRenderedDiff and getRenderedDiffFragment\n     * to do all the actual fetching and calling of callbacks.\n     *\n     * Args:\n     *     options (object):\n     *         The option arguments that control the behavior of this function.\n     *\n     *     callbacks (object):\n     *         The functions used to fetch the corresponding diff fragments.\n     *\n     *     context (object):\n     *         The context passed to each callback function.\n     */\n    _fetchFragment(options, callbacks, context) {\n        RB.apiCall(_.defaults(\n            {\n                type: 'GET',\n                dataType: 'html'\n            },\n            options,\n            _.bindCallbacks(callbacks, context)\n        ));\n    },\n\n    /**\n     * Return a URL that forms the base of a diff fragment fetch.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the URL.\n     *\n     * Option Args:\n     *     chunkIndex (number, optional):\n     *         The chunk index to load.\n     *\n     *     index (number, optional):\n     *         The file index to load.\n     *\n     *     linesOfContext (number, optional):\n     *         The number of lines of context to load.\n     *\n     *     showDeleted (boolean, optional):\n     *         Whether to show deleted content.\n     *\n     * Returns:\n     *     string:\n     *     The URL for fetching diff fragments.\n     */\n    _buildRenderedDiffURL(options={}) {\n        const reviewURL = this.get('reviewRequest').get('reviewURL');\n        const interdiffRevision = this.get('interdiffRevision');\n        const fileDiffID = this.get('fileDiffID');\n        const interFileDiffID = this.get('interFileDiffID');\n        const baseFileDiffID = this.get('baseFileDiffID');\n        const revision = this.get('revision');\n\n        const revisionPart = (interdiffRevision\n                              ? `${revision}-${interdiffRevision}`\n                              : revision);\n\n        const fileDiffPart = (interFileDiffID\n                              ? `${fileDiffID}-${interFileDiffID}`\n                              : fileDiffID);\n\n        let url = `${reviewURL}diff/${revisionPart}/fragment/${fileDiffPart}/`;\n\n        if (options.chunkIndex !== undefined) {\n            url += `chunk/${options.chunkIndex}/`;\n        }\n\n        /* Build the query string. */\n        const queryParts = [];\n\n        if (baseFileDiffID) {\n            queryParts.push(`base-filediff-id=${baseFileDiffID}`);\n        }\n\n        if (options.index !== undefined) {\n            queryParts.push(`index=${options.index}`);\n        }\n\n        if (options.linesOfContext !== undefined) {\n            queryParts.push(`lines-of-context=${options.linesOfContext}`);\n        }\n\n        if (options.showDeleted) {\n            queryParts.push(`show-deleted=1`);\n        }\n\n        queryParts.push(`_=${TEMPLATE_SERIAL}`);\n\n        const queryStr = queryParts.join('&');\n\n        return `${url}?${queryStr}`;\n    },\n});\n"],"mappings":"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"}