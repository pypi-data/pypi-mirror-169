{"version":3,"file":"postCommitView.js","names":["RB","PostCommitView","Backbone","View","extend","className","loadErrorTemplate","_","template","events","initialize","options","model","repository","get","branches","_$scrollContainer","$scrollContainer","_$error","_branchesView","BranchesView","collection","on","branch","set","listenTo","_onBranchChanged","loaded","_loadBranches","render","_rendered","$","addClass","append","text","el","appendTo","$el","_commitsView","_clearLoadError","fetch","success","show","error","xhr","hide","_showLoadError","_loadCommits","_commitsCollection","checkFetchNext","remove","reloadID","errorLoadingText","temporaryFailureText","tryAgainText","errorLines","errorText","split","stopListening","getCommits","id","start","_onCreateReviewRequest","CommitsView","commit","_createPending","setPending","reviewRequest","ReviewRequest","localSitePrefix","createFromCommit","commitID","window","location","alert"],"sources":["postCommitView.es6.js"],"sourcesContent":["/**\n * A view orchestrating post-commit review request creation.\n *\n * This brings together the BranchesView and CommitsView to provide a UI for\n * letting people browse through the committed revisions in the repository. When\n * the user clicks on one of the commits, it will create a new review request\n * using that commit's ID.\n */\nRB.PostCommitView = Backbone.View.extend({\n    className: 'post-commit',\n\n    loadErrorTemplate: _.template(dedent`\n        <div class=\"error\">\n         <p><%- errorLoadingText %></p>\n         <p class=\"error-text\">\n          <% _.each(errorLines, function(line) { %><%- line %><br /><% }); %>\n         </p>\n         <p>\n          <%- temporaryFailureText %>\n          <a href=\"#\" id=\"reload_<%- reloadID %>\"><%- tryAgainText %></a>\n         </p>\n        </div>\n    `),\n\n    events: {\n        'click #reload_branches': '_loadBranches',\n        'click #reload_commits': '_loadCommits',\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     $scrollContainer (jQuery):\n     *         The parent container handling all content scrolling.\n     */\n    initialize(options) {\n        const model = this.model;\n        const repository = model.get('repository');\n        const branches = repository.branches;\n\n        this._$scrollContainer = options.$scrollContainer;\n        this._$error = null;\n\n        // Set up the branch selector and bind it to the \"branch\" attribute\n        this._branchesView = new RB.BranchesView({\n            collection: branches,\n        });\n        this._branchesView.on('selected',\n                              branch => model.set('branch', branch));\n\n        this.listenTo(model, 'change:branch', this._onBranchChanged);\n\n        if (!branches.loaded) {\n            this._loadBranches();\n        }\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.PostCommitView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._rendered = true;\n\n        $('<div/>')\n            .addClass('branches section-header')\n            .append($('<span/>')\n                .text(gettext('Create from an existing commit on:')))\n            .append(this._branchesView.render().el)\n            .appendTo(this.$el);\n\n        if (this._commitsView) {\n            this.$el.append(this._commitsView.render().el);\n        }\n\n        return this;\n    },\n\n    /**\n     * Load the list of branches from the repository.\n     *\n     * If there's an error loading the branches, the branches selector and\n     * commits list will be hidden, and an error will be displayed along\n     * with the message from the server. The user will have the ability to\n     * try again.\n     */\n    _loadBranches() {\n        this._clearLoadError();\n\n        const branches = this.model.get('repository').branches;\n\n        branches.fetch({\n            success: () => {\n                branches.loaded = true;\n\n                this._branchesView.$el.show();\n\n                if (this._commitsView) {\n                    this._commitsView.$el.show();\n                }\n            },\n            error: (collection, xhr) => {\n                this._branchesView.$el.hide();\n\n                if (this._commitsView) {\n                    this._commitsView.$el.hide();\n                }\n\n                this._showLoadError('branches', xhr);\n            },\n        });\n    },\n\n    /**\n     * Load the list of commits from the repository.\n     *\n     * If there's an error loading the commits, the commits list will be\n     * hidden, and an error will be displayed along with the message from\n     * the server. The user will have the ability to try again.\n     */\n    _loadCommits() {\n        this._clearLoadError();\n\n        this._commitsCollection.fetch({\n            success: () => {\n                this._commitsView.$el.show();\n                this._commitsView.checkFetchNext();\n            },\n            error: (collection, xhr) => {\n                this._commitsView.$el.hide();\n                this._showLoadError('commits', xhr);\n            },\n        });\n    },\n\n    /**\n     * Clear any displayed error message.\n     */\n    _clearLoadError() {\n        if (this._$error) {\n            this._$error.remove();\n            this._$error = null;\n        }\n    },\n\n    /**\n     * Show an error message indicating a load failure.\n     *\n     * The message from the server will be displayed along with some\n     * helpful text and a link for trying the request again.\n     *\n     * Args:\n     *     reloadID (string):\n     *         An ID to use for the reload link element.\n     *\n     *     xhr (jqXHR):\n     *         The HTTP Request object.\n     */\n    _showLoadError(reloadID, xhr) {\n        this._clearLoadError();\n\n        this._$error = $(this.loadErrorTemplate({\n                errorLoadingText: gettext('There was an error loading information from this repository:'),\n                temporaryFailureText: gettext('This may be a temporary failure.'),\n                tryAgainText: gettext('Try again'),\n                errorLines: xhr.errorText.split('\\n'),\n                reloadID: reloadID,\n            }))\n            .appendTo(this.$el);\n    },\n\n    /**\n     * Callback for when the user chooses a different branch.\n     *\n     * Fetches a new list of commits starting from the tip of the selected\n     * branch.\n     *\n     * Args:\n     *     model (RB.PostCommitModel):\n     *         The data model.\n     *\n     *     branch (RB.RepositoryBranch):\n     *         The selected branch.\n     */\n    _onBranchChanged(model, branch) {\n        if (this._commitsView) {\n            this.stopListening(this._commitsCollection);\n            this._commitsView.remove();\n        }\n\n        this._commitsCollection =\n            this.model.get('repository').getCommits({\n                branch: branch.id,\n                start: branch.get('commit'),\n            });\n        this.listenTo(this._commitsCollection, 'create',\n                      this._onCreateReviewRequest);\n\n        this._commitsView = new RB.CommitsView({\n            collection: this._commitsCollection,\n            $scrollContainer: this._$scrollContainer,\n        });\n        this.listenTo(this._commitsView, 'loadError', xhr => {\n            this._showLoadError('commits', xhr);\n        });\n\n        if (this._rendered) {\n            this.$el.append(this._commitsView.render().el);\n        }\n\n        this._loadCommits();\n    },\n\n    /**\n     * Callback for when a commit is selected.\n     *\n     * Creates a new review request with the given commit ID and redirects the\n     * browser to it.\n     *\n     * Args:\n     *     commit (RB.RepositoryCommit):\n     *         The selected commit.\n     */\n    _onCreateReviewRequest(commit) {\n        if (this._createPending) {\n            // Do nothing\n            return;\n        }\n\n        this._createPending = true;\n        this._commitsView.setPending(commit);\n\n        const repository = this.model.get('repository');\n        const reviewRequest = new RB.ReviewRequest({\n            repository: repository.id,\n            localSitePrefix: repository.get('localSitePrefix')\n        });\n\n        reviewRequest.createFromCommit({\n            commitID: commit.id,\n            success: () => {\n                window.location = reviewRequest.get('reviewURL');\n            },\n            error: (model, xhr) => {\n                this._commitsView.setPending(null);\n                this._createPending = false;\n                alert(xhr.errorText);\n            },\n        });\n    },\n});\n"],"mappings":"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"}