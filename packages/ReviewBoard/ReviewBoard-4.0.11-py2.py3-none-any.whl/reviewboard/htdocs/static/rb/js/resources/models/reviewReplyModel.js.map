{"version":3,"file":"reviewReplyModel.js","names":["RB","ReviewReply","BaseResource","extend","defaults","_","forceTextType","includeTextTypes","rawTextFields","review","bodyTop","bodyTopRichText","bodyBottom","bodyBottomRichText","timestamp","prototype","rspNamespace","listKey","extraQueryArgs","attrToJsonMap","serializedAttrs","deserializedAttrs","serializers","JSONSerializers","onlyIfValue","textType","value","undefined","COMMENT_LINK_NAMES","parseResourceData","rsp","raw_text_fields","data","call","body_top_text_type","body_bottom_text_type","publish","options","context","trigger","ready","set","save","trivial","success","isFunction","error","model","xhr","errorText","discardIfEmpty","bindCallbacks","isNew","get","_checkCommentsLink","linkNameIndex","linkName","url","href","apiCall","type","length","destroy","DraftResourceModelMixin"],"sources":["reviewReplyModel.es6.js"],"sourcesContent":["/**\n * A review reply.\n *\n * Encapsulates replies to a top-level review.\n *\n * Model Attributes:\n *     forceTextType (string):\n *         The text type to request for text in all responses.\n *\n *     includeTextTypes (string):\n *         A comma-separated list of text types to include in responses.\n *\n *     rawTextFields (object):\n *         The contents of the raw text fields, if forceTextType is used and\n *         the caller fetches or posts with includeTextTypes=raw. The keys in\n *         this object are the field names, and the values are the raw versions\n *         of those attributes.\n *\n *     review (RB.Review):\n *         The review that this reply is replying to.\n *\n *     public (boolean):\n *         Whether this reply has been published.\n *\n *     bodyTop (string):\n *         The reply to the original review's ``bodyTop``.\n *\n *     bodyTopRichText (boolean):\n *         Whether the ``bodyTop`` field should be rendered as Markdown.\n *\n *     bodyBottom (string):\n *         The reply to the original review's ``bodyBottom``.\n *\n *     bodyBottomRichText (boolean):\n *         Whether the ``bodyBottom`` field should be rendered as Markdown.\n *\n *     timestamp (string):\n *         The timestamp of this reply.\n */\nRB.ReviewReply = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            forceTextType: null,\n            includeTextTypes: null,\n            rawTextFields: {},\n            review: null,\n            'public': false,\n            bodyTop: null,\n            bodyTopRichText: false,\n            bodyBottom: null,\n            bodyBottomRichText: false,\n            timestamp: null\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'reply',\n    listKey: 'replies',\n\n    extraQueryArgs: {\n        'force-text-type': 'html',\n        'include-text-types': 'raw'\n    },\n\n    attrToJsonMap: {\n        bodyBottom: 'body_bottom',\n        bodyBottomRichText: 'body_bottom_text_type',\n        bodyTop: 'body_top',\n        bodyTopRichText: 'body_top_text_type',\n        forceTextType: 'force_text_type',\n        includeTextTypes: 'include_text_types'\n    },\n\n    serializedAttrs: [\n        'forceTextType',\n        'includeTextTypes',\n        'bodyTop',\n        'bodyTopRichText',\n        'bodyBottom',\n        'bodyBottomRichText',\n        'public'\n    ],\n\n    deserializedAttrs: [\n        'bodyTop',\n        'bodyBottom',\n        'public',\n        'timestamp'\n    ],\n\n    serializers: {\n        forceTextType: RB.JSONSerializers.onlyIfValue,\n        includeTextTypes: RB.JSONSerializers.onlyIfValue,\n        bodyTopRichText: RB.JSONSerializers.textType,\n        bodyBottomRichText: RB.JSONSerializers.textType,\n        'public': value => value ? true : undefined\n    },\n\n    COMMENT_LINK_NAMES: [\n        'diff_comments',\n        'file_attachment_comments',\n        'general_comments',\n        'screenshot_comments'\n    ],\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     The attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const rawTextFields = rsp.raw_text_fields || rsp;\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.bodyTopRichText =\n            (rawTextFields.body_top_text_type === 'markdown');\n        data.bodyBottomRichText =\n            (rawTextFields.body_bottom_text_type === 'markdown');\n        data.rawTextFields = rsp.raw_text_fields || {};\n\n        return data;\n    },\n\n    /**\n     * Publish the reply.\n     *\n     * Before publishing, the \"publishing\" event will be triggered.\n     * After successfully publishing, \"published\" will be triggered.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    publish(options={}, context=undefined) {\n        this.trigger('publishing');\n\n        this.ready({\n            ready: () => {\n                this.set('public', true);\n                this.save({\n                    data: {\n                        'public': 1,\n                        trivial: options.trivial ? 1 : 0\n                    },\n                    success: () => {\n                        this.trigger('published');\n\n                        if (_.isFunction(options.success)) {\n                            options.success.call(context);\n                        }\n                    },\n                    error: (model, xhr) => {\n                        model.trigger('publishError', xhr.errorText);\n\n                        if (_.isFunction(options.error)) {\n                            options.error.call(context, model, xhr);\n                        }\n                    }\n                });\n            }\n        });\n    },\n\n    /**\n     * Discard the reply if it's empty.\n     *\n     * If the reply doesn't have any remaining comments on the server, then\n     * this will discard the reply.\n     *\n     * When we've finished checking, options.success will be called. It\n     * will be passed true if discarded, or false otherwise.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    discardIfEmpty(options={}, context=undefined) {\n        options = _.bindCallbacks(options, context);\n\n        this.ready({\n            ready: () => {\n                if (this.isNew() ||\n                    this.get('bodyTop') ||\n                    this.get('bodyBottom')) {\n                    if (_.isFunction(options.success)) {\n                        options.success(false);\n                    }\n\n                    return;\n                }\n\n                this._checkCommentsLink(0, options, context);\n            },\n\n            error: options.error\n        });\n    },\n\n    /**\n     * Check if there are comments, given the comment type.\n     *\n     * This is part of the discardIfEmpty logic.\n     *\n     * If there are comments, we'll give up and call options.success(false).\n     *\n     * If there are no comments, we'll move on to the next comment type. If\n     * we're done, the reply is discarded, and options.success(true) is called.\n     *\n     * Args:\n     *     linkNamesIndex (number):\n     *         An index into the ``COMMENT_LINK_NAMES`` Array.\n     *\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    _checkCommentsLink(linkNameIndex, options, context) {\n        const linkName = this.COMMENT_LINK_NAMES[linkNameIndex];\n        const url = this.get('links')[linkName].href;\n\n        RB.apiCall({\n            type: 'GET',\n            url: url,\n            success: rsp => {\n                if (rsp[linkName].length > 0) {\n                    if (_.isFunction(options.success)) {\n                        options.success(false);\n                    }\n                } else if (linkNameIndex < this.COMMENT_LINK_NAMES.length - 1) {\n                    this._checkCommentsLink(linkNameIndex + 1, options,\n                                            context);\n                } else {\n                    this.destroy(\n                    _.defaults({\n                        success: () => {\n                            if (_.isFunction(options.success)) {\n                                options.success(true);\n                            }\n                        }\n                    }, options),\n                    context);\n                }\n            },\n            error: options.error\n        });\n    }\n});\n_.extend(RB.ReviewReply.prototype, RB.DraftResourceModelMixin);\n"],"mappings":"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"}