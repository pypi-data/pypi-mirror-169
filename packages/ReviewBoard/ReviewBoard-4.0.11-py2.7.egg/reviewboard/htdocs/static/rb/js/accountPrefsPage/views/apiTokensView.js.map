{"version":3,"file":"apiTokensView.js","names":["POLICY_READ_WRITE","POLICY_READ_ONLY","POLICY_CUSTOM","POLICY_LABELS","APITokenItem","RB","Config","ResourceListItem","extend","defaults","_","policyType","localSiteName","showRemove","prototype","syncAttrs","initialize","_super","apply","arguments","on","_onPolicyTypeChanged","policy","get","_guessPolicyType","_policyMenuAction","id","label","children","_makePolicyAction","dispatchOnClick","actions","unshift","set","createResource","attrs","APIToken","userName","UserSession","instance","localSitePrefix","collection","saveNote","note","_saveAttribute","savePolicy","options","attr","value","resource","ready","save","isEqual","defaultPolicies","readOnly","readWrite","type","name","propName","radioValue","trigger","newPolicy","console","assert","APITokenItemCollection","Backbone","Collection","model","models","PolicyEditorView","View","template","join","prevPolicyType","_codeMirror","_$policy","_$saveButtons","render","isEmpty","custom","$el","html","instructions","interpolate","MANUAL_URL","$","val","JSON","stringify","modalBox","title","buttons","click","bind","cancel","find","CodeMirror","fromTextArea","mode","lineNumbers","lineWrapping","matchBrackets","lint","onUpdateLinting","_onUpdateLinting","gutters","focus","remove","closeOnSave","policyStr","getValue","strip","parse","success","error","xhr","errorPayload","err","code","fields","alert","msg","e","SyntaxError","annotationsNotSorted","prop","length","APITokenItemView","Djblets","ListItemView","EMPTY_NOTE_PLACEHOLDER","actionHandlers","_$note","listenTo","_updateNote","call","inlineEditor","editIconClass","beginEdit","complete","toggleClass","text","_onCustomPolicyClicked","view","previous","_onRemoveClicked","destroy","SiteAPITokensView","className","generateTokenTemplate","events","apiTokens","apiTokensList","List","_listView","ListView","ItemView","animateItems","prependTo","_$generateTokenItem","generateText","appendTo","getBody","_onGenerateClicked","apiToken","add","detach","APITokensView","_$listsContainer","_apiTokenViews","info","Object","entries","tokens","push"],"sources":["apiTokensView.es6.js"],"sourcesContent":["(function() {\n\n\nconst POLICY_READ_WRITE = 'rw';\nconst POLICY_READ_ONLY = 'ro';\nconst POLICY_CUSTOM = 'custom';\nconst POLICY_LABELS = {\n    [POLICY_READ_WRITE]: gettext('Full access'),\n    [POLICY_READ_ONLY]: gettext('Read-only'),\n    [POLICY_CUSTOM]: gettext('Custom')\n};\n\n\n/**\n * Represents an API token in the list.\n *\n * This provides actions for editing the policy type for the token and\n * removing the token.\n */\nconst APITokenItem = RB.Config.ResourceListItem.extend({\n    defaults: _.defaults({\n        policyType: POLICY_READ_WRITE,\n        localSiteName: null,\n        showRemove: true\n    }, RB.Config.ResourceListItem.prototype.defaults),\n\n    syncAttrs: ['id', 'note', 'policy', 'tokenValue'],\n\n    /**\n     * Initialize the item.\n     *\n     * This computes the type of policy used, for display, and builds the\n     * policy actions menu.\n     */\n    initialize() {\n        _super(this).initialize.apply(this, arguments);\n\n        this.on('change:policyType', this._onPolicyTypeChanged, this);\n\n        const policy = this.get('policy') || {};\n        const policyType = this._guessPolicyType(policy);\n\n        this._policyMenuAction = {\n            id: 'policy',\n            label: POLICY_LABELS[policyType],\n            children: [\n                this._makePolicyAction(POLICY_READ_WRITE),\n                this._makePolicyAction(POLICY_READ_ONLY),\n                this._makePolicyAction(POLICY_CUSTOM, {\n                    id: 'policy-custom',\n                    dispatchOnClick: true\n                })\n            ]\n        };\n        this.actions.unshift(this._policyMenuAction);\n\n        this.set('policyType', policyType);\n    },\n\n    /**\n     * Create an APIToken resource for the given attributes.\n     *\n     * Args:\n     *     attrs (object):\n     *         Additional attributes for the APIToken.\n     */\n    createResource(attrs) {\n        return new RB.APIToken(_.defaults({\n            userName: RB.UserSession.instance.get('username'),\n            localSitePrefix: this.collection.localSitePrefix\n        }, attrs));\n    },\n\n    /**\n     * Set the provided note on the token and save it.\n     *\n     * Args:\n     *     note (string):\n     *         The new note for the token.\n     */\n    saveNote(note) {\n        this._saveAttribute('note', note);\n    },\n\n    /**\n     * Set the provided policy on the token and save it.\n     *\n     * Args:\n     *     policy (object):\n     *         The new policy for the token.\n     *\n     *     options (object):\n     *         Additional options for the save operation.\n     */\n    savePolicy(policy, options) {\n        this._saveAttribute('policy', policy, options);\n    },\n\n    /**\n     * Set an attribute on the token and save it.\n     *\n     * This is a helper function that will set an attribute on the token\n     * and save it, but only after the token is ready.\n     *\n     * Args:\n     *     attr (string):\n     *         The name of the attribute to set.\n     *\n     *     value (object or string):\n     *         The new value for the attribute.\n     *\n     *     options (object):\n     *         Additional options for the save operation.\n     */\n    _saveAttribute(attr, value, options) {\n        this.resource.ready({\n            ready: () => {\n                this.resource.set(attr, value);\n                this.resource.save(options);\n            }\n        });\n    },\n\n    /**\n     * Guess the policy type for a given policy definition.\n     *\n     * This compares the policy against the built-in versions that\n     * RB.APIToken provides. If one of them matches, the appropriate\n     * policy type will be returned. Otherwise, this assumes it's a\n     * custom policy.\n     *\n     * Args:\n     *     policy (object):\n     *         A policy object.\n     *\n     * Returns:\n     *     string:\n     *     The policy type enumeration corresponding to the policy.\n     */\n    _guessPolicyType(policy) {\n        if (_.isEqual(policy, RB.APIToken.defaultPolicies.readOnly)) {\n            return POLICY_READ_ONLY;\n        } else if (_.isEqual(policy, RB.APIToken.defaultPolicies.readWrite)) {\n            return POLICY_READ_WRITE;\n        } else {\n            return POLICY_CUSTOM;\n        }\n    },\n\n    /**\n     * Create and return an action for the policy menu.\n     *\n     * This takes a policy type and any options to include with the\n     * action definition. It will then return a suitable action,\n     * for display in the policy menu.\n     *\n     * Args:\n     *     policyType (string):\n     *         The policy type to create.\n     *\n     *     options (object):\n     *         Additional options to include in the new action definition.\n     */\n    _makePolicyAction(policyType, options) {\n        return _.defaults({\n            label: POLICY_LABELS[policyType],\n            type: 'radio',\n            name: 'policy-type',\n            propName: 'policyType',\n            radioValue: policyType\n        }, options);\n    },\n\n    /**\n     * Handler for when the policy type changes.\n     *\n     * This will set the policy menu's label to that of the selected\n     * policy and rebuild the menu.\n     *\n     * Then, if not using a custom policy, the built-in policy definition\n     * matching the selected policy will be saved to the server.\n     */\n    _onPolicyTypeChanged() {\n        const policyType = this.get('policyType');\n\n        this._policyMenuAction.label = POLICY_LABELS[policyType];\n        this.trigger('actionsChanged');\n\n        let newPolicy = null;\n\n        if (policyType === POLICY_READ_ONLY) {\n            newPolicy = RB.APIToken.defaultPolicies.readOnly;\n        } else if (policyType === POLICY_READ_WRITE) {\n            newPolicy = RB.APIToken.defaultPolicies.readWrite;\n        } else {\n            return;\n        }\n\n        console.assert(newPolicy !== null);\n\n        if (!_.isEqual(newPolicy, this.get('policy'))) {\n            this.savePolicy(newPolicy);\n        }\n    }\n});\n\n\n/**\n * A collection of APITokenItems.\n *\n * This works like a standard Backbone.Collection, but can also have\n * a LocalSite URL prefix attached to it, for use in API calls in\n * APITokenItem.\n */\nconst APITokenItemCollection = Backbone.Collection.extend({\n    model: APITokenItem,\n\n    /**\n     * Initialize the collection.\n     *\n     * Args:\n     *     models (Array of object):\n     *         Initial models for the collection.\n     *\n     *     options (object):\n     *         Additional options for the collection.\n     *\n     * Option Args:\n     *     localSitePrefix (string):\n     *         The URL prefix for the current local site, if any.\n     */\n    initialize(models, options) {\n        this.localSitePrefix = options.localSitePrefix;\n    }\n});\n\n\n/**\n * Provides an editor for constructing or modifying a custom policy definition.\n *\n * This renders as a modalBox with a CodeMirror editor inside of it. The\n * editor is set to allow easy editing of a JSON payload, complete with\n * lintian checking. Only valid policy payloads can be saved to the server.\n */\nconst PolicyEditorView = Backbone.View.extend({\n    id: 'custom_policy_editor',\n\n    template: _.template([\n        '<p><%= instructions %></p>',\n        '<textarea/>'\n    ].join('')),\n\n    /**\n     * Initialize the editor.\n     *\n     * Args:\n     *     options (object):\n     *         Additional options for view construction.\n     *\n     * Option Args:\n     *     prevPolicyType (string):\n     *         The previous policy type, to use when restoring the value after\n     *         the edit has been cancelled.\n     */\n    initialize(options) {\n        this.prevPolicyType = options.prevPolicyType;\n\n        this._codeMirror = null;\n        this._$policy = null;\n        this._$saveButtons = null;\n    },\n\n    /**\n     * Render the editor.\n     *\n     * The CodeMirror editor will be set up and configured, and then the\n     * view will be placed inside a modalBox.\n     *\n     * Returns:\n     *     PolicyEditorView:\n     *     This object, for chaining.\n     */\n    render() {\n        let policy = this.model.get('policy');\n\n        if (_.isEmpty(policy)) {\n            policy = RB.APIToken.defaultPolicies.custom;\n        }\n\n        this.$el.html(this.template({\n            instructions: interpolate(\n                gettext('You can limit access to the API through a custom policy. See the <a href=\"%s\" target=\"_blank\">documentation</a> on how to write policies.'),\n                [MANUAL_URL + 'webapi/2.0/api-token-policy/'])\n        }));\n\n\n        this._$policy = this.$('textarea')\n            .val(JSON.stringify(policy, null, '  '));\n\n        this.$el.modalBox({\n            title: gettext('Custom Token Access Policy'),\n            buttons: [\n                $('<input type=\"button\"/>')\n                    .val(gettext('Cancel'))\n                    .click(_.bind(this.cancel, this)),\n                $('<input type=\"button\" class=\"save-button\"/>')\n                    .val(gettext('Save and continue editing'))\n                    .click(() => {\n                        this.save();\n                        return false;\n                    }),\n                $('<input type=\"button\" class=\"btn primary save-button\"/>')\n                    .val(gettext('Save'))\n                    .click(() => {\n                        this.save(true);\n                        return false;\n                    })\n            ]\n        });\n\n        this._$saveButtons = this.$el.modalBox('buttons').find('.save-button');\n\n        this._codeMirror = CodeMirror.fromTextArea(this._$policy[0], {\n            mode: 'application/json',\n            lineNumbers: true,\n            lineWrapping: true,\n            matchBrackets: true,\n            lint: {\n                onUpdateLinting: _.bind(this._onUpdateLinting, this)\n            },\n            gutters: ['CodeMirror-lint-markers']\n        });\n        this._codeMirror.focus();\n    },\n\n    /**\n     * Remove the policy editor from the page.\n     */\n    remove() {\n        this.$el.modalBox('destroy');\n    },\n\n    /**\n     * Cancel the editor.\n     *\n     * The previously-selected policy type will be set on the model.\n     */\n    cancel() {\n        this.model.set('policyType', this.prevPolicyType);\n    },\n\n    /**\n     * Save the editor.\n     *\n     * The policy will be saved to the server for immediate use.\n     *\n     * Args:\n     *     closeOnSave (boolean):\n     *         Whether the editor should close after saving.\n     *\n     * Returns:\n     *     boolean:\n     *     false, for use as a jQuery event handler.\n     */\n    save(closeOnSave) {\n        const policyStr = this._codeMirror.getValue().strip();\n\n        try {\n            const policy = JSON.parse(policyStr);\n\n            this.model.savePolicy(policy, {\n                success: () => {\n                    this.model.set('policyType', POLICY_CUSTOM);\n\n                    if (closeOnSave) {\n                        this.remove();\n                    }\n                },\n                error: (model, xhr) => {\n                    if (xhr.errorPayload.err.code === 105 &&\n                        xhr.errorPayload.fields.policy) {\n                        alert(xhr.errorPayload.fields.policy);\n                    } else {\n                        alert(xhr.errorPayload.err.msg);\n                    }\n                }\n            });\n        } catch (e) {\n            if (e instanceof SyntaxError) {\n                alert(interpolate(\n                    gettext('There is a syntax error in your policy: %s'),\n                    [e]));\n            } else {\n                throw e;\n            }\n        }\n\n        return false;\n    },\n\n    /**\n     * Handler for when lintian checking has run.\n     *\n     * This will disable the save buttons if there are any lintian errors.\n     *\n     * Args:\n     *     annotationsNotSorted (Array):\n     *         An array of the linter annotations.\n     */\n    _onUpdateLinting(annotationsNotSorted) {\n        this._$saveButtons.prop('disabled', annotationsNotSorted.length > 0);\n    }\n});\n\n\n/**\n * Renders an APITokenItem to the page, and handles actions.\n *\n * This will display the information on the given token. Specifically,\n * the token value, the note, and the actions.\n *\n * This also handles deleting the token when the Remove action is clicked,\n * and displaying the policy editor when choosing a custom policy.\n */\nconst APITokenItemView = Djblets.Config.ListItemView.extend({\n    EMPTY_NOTE_PLACEHOLDER: gettext('Click to describe this token'),\n\n    template: _.template([\n        '<div class=\"config-api-token-value\"><%- tokenValue %></div>',\n        '<span class=\"config-api-token-note\"></span>'\n    ].join('')),\n\n    actionHandlers: {\n        'delete': '_onRemoveClicked',\n        'policy-custom': '_onCustomPolicyClicked'\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        _super(this).initialize.apply(this, arguments);\n\n        this._$note = null;\n\n        this.listenTo(this.model.resource, 'change:note', this._updateNote);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     APITokenItemView:\n     *     This object, for chaining.\n     */\n    render() {\n        _super(this).render.call(this);\n\n        this._$note = this.$('.config-api-token-note')\n            .inlineEditor({\n                editIconClass: 'rb-icon rb-icon-edit'\n            })\n            .on({\n                beginEdit: () => this._$note.inlineEditor(\n                    'setValue', this.model.get('note')),\n                complete: (e, value) => this.model.saveNote(value)\n            });\n\n        this._updateNote();\n\n        return this;\n    },\n\n    /**\n     * Update the displayed note.\n     *\n     * If no note is set, then a placeholder will be shown, informing the\n     * user that they can edit the note. Otherwise, their note contents\n     * will be shown.\n     */\n    _updateNote() {\n        const note = this.model.resource.get('note');\n        this._$note\n            .toggleClass('empty', !note)\n            .text(note ? note : this.EMPTY_NOTE_PLACEHOLDER);\n    },\n\n    /**\n     * Handler for when the \"Custom\" policy action is clicked.\n     *\n     * This displays the policy editor, allowing the user to edit a\n     * custom policy for the token.\n     *\n     * The previously selected policy type is passed along to the editor,\n     * so that the editor can revert to it if the user cancels.\n     *\n     * Returns:\n     *     boolean:\n     *     false, for use as a jQuery event handler.\n     */\n    _onCustomPolicyClicked() {\n        const view = new PolicyEditorView({\n            model: this.model,\n            prevPolicyType: this.model.previous('policyType')\n        });\n        view.render();\n\n        return false;\n    },\n\n    /**\n     * Handler for when the Remove action is clicked.\n     *\n     * This will prompt for confirmation before removing the token from\n     * the server.\n     */\n    _onRemoveClicked() {\n        $('<p/>')\n            .html(gettext('This will prevent clients using this token when authenticating.'))\n            .modalBox({\n                title: gettext('Are you sure you want to remove this token?'),\n                buttons: [\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Cancel')),\n                    $('<input type=\"button\" class=\"danger\" />')\n                        .val(gettext('Remove'))\n                        .click(() => this.model.resource.destroy())\n                ]\n            });\n    }\n});\n\n\n/**\n * Renders and manages a list of global or per-LocalSite API tokens.\n *\n * This will display all provided API tokens in a list, optionally labeled\n * by Local Site name. These can be removed or edited, or new tokens generated\n * through a \"Generate a new API token\" link.\n */\nconst SiteAPITokensView = Backbone.View.extend({\n    className: 'config-site-api-tokens',\n\n    template: _.template(dedent`\n        <% if (name) { %>\n         <div class=\"djblets-l-config-forms-container\">\n          <h3><%- name %></h3>\n         </div>\n        <% } %>\n        <div class=\"api-tokens\">\n        </div>\n    `),\n\n    generateTokenTemplate: _.template(dedent`\n        <li class=\"generate-api-token djblets-c-config-forms-list__item\">\n         <a href=\"#\"><%- generateText %></a>\n        </li>\n    `),\n\n    events: {\n        'click .generate-api-token': '_onGenerateClicked'\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * This will construct the collection of tokens and construct\n     * a list for the ListView.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     localSiteName (string):\n     *         The name of the local site, if any.\n     *\n     *     localSitePrefix (string):\n     *         The URL prefix of the local site, if any.\n     */\n    initialize(options) {\n        this.localSiteName = options.localSiteName;\n        this.localSitePrefix = options.localSitePrefix;\n\n        this.collection = new APITokenItemCollection(options.apiTokens, {\n            localSitePrefix: this.localSitePrefix\n        });\n\n        this.apiTokensList = new Djblets.Config.List({}, {\n            collection: this.collection\n        });\n\n        this._listView = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will render the list of API token items, along with a link\n     * for generating new tokens.\n     *\n     * Returns:\n     *     SiteAPITokensView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._listView = new Djblets.Config.ListView({\n            ItemView: APITokenItemView,\n            animateItems: true,\n            model: this.apiTokensList\n        });\n\n        this.$el.html(this.template({\n            name: this.localSiteName,\n        }));\n\n        this._listView.render().$el.prependTo(this.$('.api-tokens'));\n\n        this._$generateTokenItem =\n            $(this.generateTokenTemplate({\n                generateText: _`Generate a new API token`,\n            }))\n            .appendTo(this._listView.getBody());\n\n        return this;\n    },\n\n    /**\n     * Handler for when the \"Generate a new API token\" link is clicked.\n     *\n     * This creates a new API token on the server and displays it in the list.\n     *\n     * Returns:\n     *     boolean:\n     *     false, for use as a jQuery event handler.\n     */\n    _onGenerateClicked() {\n        const apiToken = new RB.APIToken({\n            localSitePrefix: this.localSitePrefix,\n            userName: RB.UserSession.instance.get('username')\n        });\n\n        apiToken.save({\n            success: () => {\n                this.collection.add({\n                    resource: apiToken\n                });\n\n                this._$generateTokenItem\n                    .detach()\n                    .appendTo(this._listView.getBody());\n            }\n        });\n\n        return false;\n    }\n});\n\n\n/**\n * Renders and manages a page of API tokens.\n *\n * This will take the provided tokens and group them into SiteAPITokensView\n * instances, one per Local Site and one for the global tokens.\n */\nRB.APITokensView = Backbone.View.extend({\n    template: _.template(dedent`\n        <div class=\"api-tokens-list djblets-l-config-forms-container\n                    -is-recessed -is-top-flush\">\n        </div>\n    `),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     apiTokens (Array of object):\n     *         Initial contents of the tokens list.\n     */\n    initialize(options) {\n        this.apiTokens = options.apiTokens;\n\n        this._$listsContainer = null;\n        this._apiTokenViews = [];\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will set up the elements and the list of SiteAPITokensViews.\n     *\n     * Returns:\n     *     RB.APITokensView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.html(this.template());\n\n        this._$listsContainer = this.$('.api-tokens-list');\n\n        for (let [localSiteName, info] of Object.entries(this.apiTokens)) {\n            const view = new SiteAPITokensView({\n                localSiteName: localSiteName,\n                localSitePrefix: info.localSitePrefix,\n                apiTokens: info.tokens\n            });\n\n            view.$el.appendTo(this._$listsContainer);\n            view.render();\n\n            this._apiTokenViews.push(view);\n        }\n\n        return this;\n    }\n});\n\n\n})();\n"],"mappings":"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"}