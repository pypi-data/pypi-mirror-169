{"version":3,"file":"inlineEditorView.js","names":["RB","InlineEditorView","Backbone","View","extend","defaultOptions","animationSpeedMS","deferEventSetup","editIconPath","editIconClass","enabled","extraHeight","focusOnOpen","formatResult","value","htmlEncode","formClass","getFieldValue","editor","$field","val","hasRawValue","isFieldDirty","initialValue","getValue","normValue","options","normalizeText","length","matchHeight","multiline","notifyUnchangedCompletion","promptOnCancel","rawValue","setFieldValue","showButtons","showEditIcon","showRequiredFlag","startOpen","initialize","_","defaults","_initialValue","_editing","_dirty","_dirtyCalcTimeout","render","$el","data","_$form","$","addClass","css","hide","insertBefore","createField","prependTo","_isTextArea","tagName","$buttons","appendTo","click","submit","bind","cancel","_$editIcon","editText","attr","e","preventDefault","stopPropagation","startEdit","append","requiredText","id","insertAfter","setupEvents","preventAnimation","enable","disable","autoSizeTextArea","keydown","keyCode","charCode","which","ctrlKey","keypress","keyup","_scheduleUpdateDirtyState","on","useEditIconOnly","isDragging","mousedown","one","mouseup","unbind","window","resize","_fitWidthToParent","text","htmlDecode","trigger","showEditor","fadeOut","show","elHeight","outerHeight","newHeight","height","animate","queue","focus","select","dequeue","hideEditor","blur","fadeIn","_updateDirtyState","save","dirty","isDirty","html","confirm","clearTimeout","setValue","editing","stripTags","replace","strip","setTimeout","newDirtyState","$formParent","parent","parentTextAlign","isLeftAligned","boxSizing","extentTypes","buttonsWidth","buttonsDisplay","outerWidth","width","innerWidth","offset","left","getExtents","RichTextInlineEditorView","textEditor","setText","getText","prototype","origRichText","TextEditorView","textEditorOptions","once","$span","$checkbox","uniqueId","change","defer","bindRichTextCheckbox","$markdownRef","MANUAL_URL","setVisible","richText","bindRichTextVisibility","listenTo","_showEditor","_hideEditor","setRichText"],"sources":["inlineEditorView.es6.js"],"sourcesContent":["/**\n * A view for inline editors.\n *\n * This provides the framework for items which are \"editable\". These provide a\n * way to switch between a normal view and an edit view, which is usually a\n * text box (either single- or multiple-line).\n */\nRB.InlineEditorView = Backbone.View.extend({\n    /**\n     * Defaults for the view options.\n     */\n    defaultOptions: {\n        animationSpeedMS: 200,\n        deferEventSetup: false,\n        editIconPath: null,\n        editIconClass: null,\n        enabled: true,\n        extraHeight: 100,\n        focusOnOpen: true,\n        formatResult: value => value.htmlEncode(),\n        formClass: '',\n        getFieldValue: editor => editor.$field.val(),\n        hasRawValue: false,\n        isFieldDirty: (editor, initialValue) => {\n            const value = editor.getValue() || '';\n            const normValue = (editor.options.hasRawValue\n                               ? value\n                               : value.htmlEncode()) || '';\n            initialValue = editor.normalizeText(initialValue);\n\n            return (normValue.length !== initialValue.length ||\n                    normValue !== initialValue);\n        },\n        matchHeight: true,\n        multiline: false,\n        notifyUnchangedCompletion: false,\n        promptOnCancel: true,\n        rawValue: null,\n        setFieldValue: (editor, value) => editor.$field.val(value),\n        showButtons: true,\n        showEditIcon: true,\n        showRequiredFlag: false,\n        startOpen: false,\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     animationSpeedMS (number, optional):\n     *         The duration of animated transitions, in milliseconds.\n     *\n     *     deferEventSetup (boolean, optional):\n     *         Whether to defer event setup after rendering. This should be\n     *         used when a consumer wants to prioritize event handling (such as\n     *         handling the \"enter\" key for autocomplete).\n     *\n     *     editIconClass (string, optional):\n     *         The class name to use for the edit icon, when the icon is\n     *         created via CSS rules. This is only used if ``editIconPath`` is\n     *         unspecified.\n     *\n     *     editIconPath (string, optional):\n     *         The path for an image for the edit icon.\n     *\n     *     enabled (boolean):\n     *         Whether editing is enabled.\n     *\n     *     extraHeight (number, optional):\n     *         Extra height to add when displaying the editor, in pixels.\n     *\n     *     focusOnOpen (boolean, optional):\n     *         Whether to focus the field when opening the editor.\n     *\n     *     formatResult (function, optional):\n     *         A function to format the resulting value after editing back\n     *         into the element.\n     *\n     *     formClass (string, optional):\n     *         The class to add to the form's DOM element.\n     *\n     *     getFieldValue (function, optional):\n     *         A function to retrieve the field value.\n     *\n     *     hasRawValue (boolean, optional):\n     *         Whether the field has a \"raw value\", which is data for the field\n     *         separate from the actual contents of the element.\n     *\n     *     isFieldDirty (function, optional):\n     *         A function to calculate whether the editor value is dirty.\n     *\n     *     matchHeight (boolean, optional):\n     *         Whether to attempt to match the height of the editor and the\n     *         element it's replacing.\n     *\n     *     multiline (boolean, optional):\n     *         Whether the text input should be multi-line or single-line.\n     *\n     *     notifyUnchangedCompletion (boolean, optional):\n     *         Whether the editor should trigger a ``complete`` event even if\n     *         the value was unchanged. If this is ``false``, the editor will\n     *         trigger a ``cancel`` event instead.\n     *\n     *     promptOnCancel (boolean, optional):\n     *         Whether to prompt the user before cancelling if the editor is\n     *         dirty.\n     *\n     *     rawValue (*, optional):\n     *         When ``hasRawValue`` is ``true``, this provides the data for the\n     *         raw value of the item being edited.\n     *\n     *     setFieldValue (function, optional):\n     *         A function to set the field value.\n     *\n     *     showButtons (boolean, optional):\n     *         Whether to show OK/Cancel buttons.\n     *\n     *     showEditIcon (boolean, optional):\n     *         Whether to show the edit icon.\n     *\n     *     showRequiredFlag (boolean, optional):\n     *         Whether to show the required flag on the edit icon.\n     *\n     *     startOpen (boolean, optional):\n     *         Whether the editor should be open when first created.\n     *\n     *     stripTags (boolean, optional):\n     *         Whether to strip out HTML tags when normalizing input.\n     *\n     *     useEditIconOnly (boolean, optional):\n     *         Whether the editor can be opened only by clicking on the edit\n     *         icon. If false, clicking on the field value will also trigger an\n     *         edit.\n     */\n    initialize(options) {\n        this.options = _.defaults(options, this.defaultOptions);\n        this._initialValue = null;\n        this._editing = false;\n        this._dirty = false;\n        this._dirtyCalcTimeout = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.InlineEditorView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.data('inline-editor', this);\n\n        this._$form = $('<form>')\n            .addClass(`inline-editor-form ${this.options.formClass}`)\n            .css('display', 'inline')\n            .hide()\n            .insertBefore(this.$el);\n\n        this.$field = this.createField()\n            .prependTo(this._$form);\n        this._isTextArea = (this.$field[0].tagName === 'TEXTAREA');\n\n        this.$buttons = $();\n\n        if (this.options.showButtons) {\n            this.$buttons = $(this.options.multiline ? '<div>' : '<span>')\n                .hide()\n                .addClass('buttons')\n                .appendTo(this._$form);\n\n            $('<input type=\"button\" class=\"save\">')\n                .val(gettext('OK'))\n                .appendTo(this.$buttons)\n                .click(this.submit.bind(this));\n\n            $('<input type=\"button\" class=\"cancel\">')\n                .val(gettext('Cancel'))\n                .appendTo(this.$buttons)\n                .click(this.cancel.bind(this));\n        }\n\n        this._$editIcon = $();\n\n        if (this.options.showEditIcon) {\n            const editText = gettext('Edit this field');\n            this._$editIcon = $('<a class=\"editicon\" href=\"#\" role=\"button\">')\n                .attr({\n                    'title': editText,\n                    'aria-label': editText,\n                })\n                .click(e => {\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    this.startEdit();\n                });\n\n            if (this.options.editIconPath) {\n                this._$editIcon.append(\n                    `<img src=\"${this.options.editIconPath}\">`);\n            } else if (this.options.editIconClass) {\n                this._$editIcon.append(\n                    `<div class=\"${this.options.editIconClass}\" aria-hidden=\"true\"></div>`);\n            }\n\n            if (this.options.showRequiredFlag) {\n                const requiredText = gettext('This field is required');\n                $('<span class=\"required-flag\">*</span>')\n                    .attr({\n                        'aria-label': requiredText,\n                        'title': requiredText,\n                    })\n                    .appendTo(this._$editIcon);\n            }\n\n            if (this.options.multiline && this.$el[0].id) {\n                $(`label[for=\"${this.$el[0].id}\"]`)\n                    .append(this._$editIcon);\n            } else {\n                this._$editIcon.insertAfter(this.$el);\n            }\n        }\n\n        if (!this.options.deferEventSetup) {\n            this.setupEvents();\n        }\n\n        if (this.options.startOpen) {\n            this.startEdit({\n                preventAnimation: true,\n            });\n        }\n\n        if (this.options.enabled) {\n            this.enable();\n        } else {\n            this.disable();\n        }\n\n        return this;\n    },\n\n    /**\n     * Create and return the field to use for the input element.\n     *\n     * Returns:\n     *     jQuery:\n     *     The newly created input element.\n     */\n    createField() {\n        if (this.options.multiline) {\n            return $('<textarea>').autoSizeTextArea();\n        } else {\n            return $('<input type=\"text\">');\n        }\n    },\n\n    /**\n     * Connect events.\n     */\n    setupEvents() {\n        this.$field\n            .keydown(e => {\n                e.stopPropagation();\n\n                switch (e.keyCode || e.charCode || e.which) {\n                    case 13: // Enter\n                        if (!this.options.multiline || e.ctrlKey) {\n                            this.submit();\n                        }\n\n                        if (!this.options.multiline) {\n                            e.preventDefault();\n                        }\n\n                        break;\n\n                    case 27: // Escape\n                        this.cancel();\n                        break;\n\n                    case 83: // S\n                    case 115: // s\n                        if (e.ctrlKey) {\n                            this.submit();\n                            e.preventDefault();\n                        }\n                        break;\n\n                    default:\n                        break;\n                }\n            })\n            .keypress(e => e.stopPropagation())\n            .keyup(e => {\n                e.stopPropagation();\n                e.preventDefault();\n\n                this._scheduleUpdateDirtyState();\n            })\n            .on('cut paste', () => this._scheduleUpdateDirtyState());\n\n        if (!this.options.useEditIconOnly) {\n            /*\n             * Check if the mouse was dragging, so that the editor isn't opened\n             * when text is selected.\n             */\n            let isDragging = true;\n\n            this.$el\n                .on('click', 'a', e => e.stopPropagation())\n                .click(e => {\n                    e.stopPropagation();\n                    e.preventDefault();\n\n                    if (!isDragging) {\n                        this.startEdit();\n                    }\n\n                    isDragging = true;\n                })\n                .mousedown(() => {\n                    isDragging = false;\n                    this.$el.one('mousemove', () => {\n                        isDragging = true;\n                    });\n                })\n                .mouseup(() => {\n                    this.$el.unbind('mousemove');\n                });\n        }\n\n        $(window).resize(this._fitWidthToParent.bind(this));\n    },\n\n    /**\n     * Start editing.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the operation.\n     *\n     * Option Args:\n     *     preventAnimation (boolean, optional):\n     *         Whether to prevent the default animation.\n     */\n    startEdit(options={}) {\n        if (this._editing || !this.options.enabled) {\n            return;\n        }\n\n        let value;\n\n        if (this.options.hasRawValue) {\n            this._initialValue = this.options.rawValue;\n            value = this._initialValue;\n        } else {\n            this._initialValue = this.$el.text();\n            value = this.normalizeText(this._initialValue).htmlDecode();\n        }\n\n        this._editing = true;\n        this.options.setFieldValue(this, value);\n\n        this.trigger('beginEditPreShow');\n        this.showEditor(options);\n        this.trigger('beginEdit');\n    },\n\n    /**\n     * Show the editor.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the operation.\n     *\n     * Options Args:\n     *     preventAnimation (boolean, optional):\n     *         Whether to prevent the default animation.\n     */\n    showEditor(options={}) {\n        if (this.options.multiline && !options.preventAnimation) {\n            this._$editIcon.fadeOut(this.options.animationSpeedMS);\n        } else {\n            this._$editIcon.hide();\n        }\n\n        this.$el.hide();\n        this._$form.show();\n\n        if (this.options.multiline) {\n            const elHeight = this.$el.outerHeight();\n            const newHeight = elHeight + this.options.extraHeight;\n\n            this._fitWidthToParent();\n\n            if (this._isTextArea) {\n                if (this.options.matchHeight) {\n                    // TODO: Set autosize min height\n                    this.$field\n                        .autoSizeTextArea('setMinHeight', newHeight)\n                        .css('overflow', 'hidden');\n\n                    if (options.preventAnimation) {\n                        this.$field.height(newHeight);\n                    } else {\n                        this.$field\n                            .height(elHeight)\n                            .animate({ height: newHeight },\n                                     this.options.animationSpeedMS);\n                    }\n                } else {\n                    /*\n                     * If there's significant processing that happens between\n                     * the text and what's displayed in the element, it's\n                     * likely that the rendered size will be different from the\n                     * editor size. In that case, don't try to match sizes,\n                     * just ask the field to auto-size itself to the size of\n                     * the source text.\n                     */\n                    this.$field.autoSizeTextArea('autoSize', true, false,\n                                                  elHeight);\n                }\n            }\n        }\n\n        this.$buttons.show();\n\n        // Execute this after the animation, if we performed one.\n        this.$field.queue(() => {\n            if (this.options.multiline && this._isTextArea) {\n                this.$field.css('overflow', 'auto');\n            }\n\n            this._fitWidthToParent();\n\n            if (this.options.focusOnOpen) {\n                this.$field.focus();\n            }\n\n            if (!this.options.multiline &&\n                this.$field[0].tagName === 'INPUT') {\n                this.$field[0].select();\n            }\n\n            this.$field.dequeue();\n        });\n    },\n\n    /**\n     * Hide the inline editor.\n     */\n    hideEditor() {\n        this.$field.blur();\n        this.$buttons.hide();\n\n        if (this.options.multiline) {\n            this._$editIcon.fadeIn(this.options.animationSpeedMS);\n        } else {\n            this._$editIcon.show();\n        }\n\n        if (this.options.multiline &&\n            this.options.matchHeight &&\n            this._editing &&\n            this._isTextArea) {\n            this.$field\n                .css('overflow', 'hidden')\n                .animate({ height: this.$el.outerHeight() },\n                        this.options.animationSpeedMS);\n        }\n\n        this.$field.queue(() => {\n            this.$el.show();\n            this._$form.hide();\n            this.$field.dequeue();\n        });\n\n        this._editing = false;\n        this._updateDirtyState();\n    },\n\n    /**\n     * Save the value of the editor.\n     */\n    save() {\n        const value = this.getValue();\n        const initialValue = this._initialValue;\n        const dirty = this.isDirty();\n\n        if (dirty) {\n            this.$el.html(this.options.formatResult(value));\n            this._initialValue = this.$el.text();\n        }\n\n        if (dirty || this.options.notifyUnchangedCompletion) {\n            this.trigger('complete', value, initialValue);\n\n            if (this.options.hasRawValue) {\n                this.options.rawValue = value;\n            }\n        } else {\n            this.trigger('cancel', this._initialValue);\n        }\n    },\n\n    /**\n     * Submit the editor.\n     */\n    submit() {\n        // hideEditor() resets the _dirty flag, so we need to save() first.\n        this.save();\n        this.hideEditor();\n    },\n\n    /**\n     * Cancel the edit.\n     */\n    cancel() {\n        if (!this.isDirty() ||\n            !this.options.promptOnCancel ||\n            confirm(gettext('You have unsaved changes. Are you sure you want to discard them?'))) {\n            this.hideEditor();\n            this.trigger('cancel', this._initialValue);\n        }\n    },\n\n    /**\n     * Return the dirty state of the editor.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the editor is currently dirty.\n     */\n    isDirty() {\n        if (this._dirtyCalcTimeout !== null) {\n            clearTimeout(this._dirtyCalcTimeout);\n            this._updateDirtyState();\n        }\n\n        return this._dirty;\n    },\n\n    /**\n     * Return the value in the field.\n     *\n     * Returns:\n     *     *:\n     *     The current value of the field.\n     */\n    getValue() {\n        return this.options.getFieldValue(this);\n    },\n\n    /**\n     * Set the value in the field.\n     *\n     * Args:\n     *     value (*):\n     *     The new value for the field.\n     */\n    setValue(value) {\n        this.options.setFieldValue(this, value);\n        this._updateDirtyState();\n    },\n\n    /**\n     * Enable the editor.\n     */\n    enable() {\n        if (this._editing) {\n            this.showEditor();\n        }\n\n        this._$editIcon.show();\n        this.options.enabled = true;\n    },\n\n    /**\n     * Disable the editor.\n     */\n    disable() {\n        if (this._editing) {\n            this.hideEditor();\n        }\n\n        this._$editIcon.hide();\n        this.options.enabled = false;\n    },\n\n    /**\n     * Return whether the editor is currently in edit mode.\n     *\n     * Returns:\n     *     boolean:\n     *     true if the inline editor is open.\n     */\n    editing() {\n        return this._editing;\n    },\n\n    /**\n     * Normalize the given text.\n     *\n     * Args:\n     *     text (string):\n     *         The text to normalize.\n     *\n     * Returns:\n     *     string:\n     *     The text with ``<br>`` elements turned into newlines and (in the\n     *     case of multi-line data), whitespace collapsed.\n     */\n    normalizeText(text) {\n        if (this.options.stripTags) {\n            /*\n             * Turn <br> elements back into newlines before stripping out all\n             * other tags. Without this, we lose multi-line data when editing\n             * some legacy data.\n             */\n            text = text.replace(/<br>/g, '\\n');\n            text = text.stripTags().strip();\n        }\n\n        if (!this.options.multiline) {\n            text = text.replace(/\\s{2,}/g, ' ');\n        }\n\n        return text;\n    },\n\n    /**\n     * Schedule an update for the dirty state.\n     */\n    _scheduleUpdateDirtyState() {\n        if (this._dirtyCalcTimeout === null) {\n            this._dirtyCalcTimeout = setTimeout(\n                this._updateDirtyState.bind(this), 200);\n        }\n    },\n\n    /**\n     * Update the dirty state of the editor.\n     */\n    _updateDirtyState() {\n        const newDirtyState = (\n            this._editing &&\n            this.options.isFieldDirty(this, this._initialValue));\n\n        if (this._dirty !== newDirtyState) {\n            this._dirty = newDirtyState;\n            this.trigger('dirtyStateChanged', this._dirty);\n        }\n\n        this._dirtyCalcTimeout = null;\n    },\n\n    /**\n     * Fit the editor width to the parent element.\n     */\n    _fitWidthToParent() {\n        if (!this._editing) {\n            return;\n        }\n\n        if (this.options.multiline) {\n            this.$field.css({\n                '-webkit-box-sizing': 'border-box',\n                '-moz-box-sizing': 'border-box',\n                'box-sizing': 'border-box',\n                'width': '100%',\n            });\n            return;\n        }\n\n        const $formParent = this._$form.parent();\n        const parentTextAlign = $formParent.css('text-align');\n        const isLeftAligned = (parentTextAlign === 'left');\n\n        if (!isLeftAligned) {\n            $formParent.css('text-align', 'left');\n        }\n\n        const boxSizing = this.$field.css('box-sizing');\n        let extentTypes;\n\n        if (boxSizing === 'border-box') {\n            extentTypes = 'm';\n        } else if (boxSizing === 'padding-box') {\n            extentTypes = 'p';\n        } else {\n            extentTypes = 'bmp';\n        }\n\n        let buttonsWidth = 0;\n\n        if (this.$buttons.length !== 0) {\n            const buttonsDisplay = this.$buttons.css('display');\n\n            if (buttonsDisplay === 'inline' ||\n                buttonsDisplay === 'inline-block') {\n                /*\n                 * The buttons are set for the same line as the field, so\n                 * factor the width of the buttons container into the field\n                 * width calculation below.\n                 */\n                buttonsWidth = this.$buttons.outerWidth();\n            }\n        }\n\n        /*\n         * First make the field really small so it will fit without wrapping,\n         * then figure out the offset and use it to calculate the desired\n         * width.\n         */\n        this.$field\n            .width(0)\n            .outerWidth(\n                $formParent.innerWidth() -\n                (this._$form.offset().left - $formParent.offset().left) -\n                this.$field.getExtents(extentTypes, 'lr') -\n                buttonsWidth);\n\n        if (!isLeftAligned) {\n            $formParent.css('text-align', parentTextAlign);\n        }\n    },\n});\n\n\n/**\n * A view for inline editors which use the CodeMirror editor for Markdown.\n */\nRB.RichTextInlineEditorView = RB.InlineEditorView.extend({\n    /**\n     * Defaults for the view options.\n     */\n    defaultOptions: _.defaults({\n        matchHeight: false,\n        multiline: true,\n        setFieldValue: (editor, value) =>\n            editor.textEditor.setText(value || ''),\n        getFieldValue: editor => editor.textEditor.getText(),\n        isFieldDirty: (editor, initialValue) => {\n            initialValue = editor.normalizeText(initialValue);\n\n            return editor.textEditor.isDirty(initialValue);\n        },\n    }, RB.InlineEditorView.prototype.defaultOptions),\n\n    /**\n     * Create and return the field to use for the input element.\n     *\n     * Returns:\n     *     jQuery:\n     *     The newly created input element.\n     */\n    createField() {\n        let origRichText;\n\n        this.textEditor = new RB.TextEditorView(this.options.textEditorOptions);\n        this.textEditor.$el.on('resize', () => this.trigger('resize'));\n\n        this.$el.data('text-editor', this.textEditor);\n\n        this.once('beginEdit', () => {\n            const $span = $('<span class=\"enable-markdown\">');\n            const $checkbox = $('<input type=\"checkbox\">')\n                .attr('id', _.uniqueId('markdown_check'))\n                .change(() => _.defer(() => this._updateDirtyState()))\n                .appendTo($span);\n\n            this.textEditor.bindRichTextCheckbox($checkbox);\n\n            $('<label>')\n                .attr('for', $checkbox[0].id)\n                .text(gettext('Enable Markdown'))\n                .appendTo($span);\n\n            this.$buttons.append($span);\n\n            const $markdownRef = $('<a class=\"markdown-info\" target=\"_blank\">')\n                .attr('href', `${MANUAL_URL}users/markdown/`)\n                .text(gettext('Markdown Reference'))\n                .setVisible(this.textEditor.richText)\n                .appendTo(this.$buttons);\n\n            this.textEditor.bindRichTextVisibility($markdownRef);\n        });\n\n        this.listenTo(this, 'beginEdit', () => {\n            this.textEditor._showEditor();\n            origRichText = this.textEditor.richText;\n        });\n\n        this.listenTo(this, 'cancel', () => {\n            this.textEditor._hideEditor();\n            this.textEditor.setRichText(origRichText);\n        });\n\n        this.listenTo(this, 'complete', () => this.textEditor._hideEditor());\n\n        return this.textEditor.render().$el;\n    },\n});\n"],"mappings":"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"}