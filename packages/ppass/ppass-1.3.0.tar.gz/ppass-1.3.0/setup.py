# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['modules', 'ppass', 'ppass.modules']

package_data = \
{'': ['*']}

install_requires = \
['click>=8.0.4,<9.0.0',
 'pyclip>=0.5.4,<0.6.0',
 'python-gnupg>=0.4.8,<0.5.0',
 'rich>=11.2.0,<12.0.0']

entry_points = \
{'console_scripts': ['ppass = ppass:run']}

setup_kwargs = {
    'name': 'ppass',
    'version': '1.3.0',
    'description': 'GPG Password Manager',
    'long_description': '# Welcome to ppass\n\n[![](https://badgen.net/github/release/sguerri/ppass)](https://github.com/sguerri/ppass/releases/)\n[![](https://img.shields.io/github/workflow/status/sguerri/ppass/Build/v1.3.0)](https://github.com/sguerri/ppass/actions/workflows/build.yml)\n[![](https://badgen.net/github/license/sguerri/ppass)](https://www.gnu.org/licenses/)\n[![](https://badgen.net/pypi/v/ppass)](https://pypi.org/project/ppass/)\n[![](https://badgen.net/pypi/python/ppass)](#)\n[![](https://badgen.net/badge/Open%20Source%20%3F/Yes%21/blue?icon=github)](#)\n\n> GPG Password Manager\n\n**ppass** is heavily inspired from **[pass](https://www.passwordstore.org/)**\n\nI wanted to extend some of its functionnalities, and decided to rewrite the application in Python. It was a good exercice to try Python as I am more used to program in js/ts and c++/qt.\n\nThis beeing said, **ppass** is not as well tested or stable as **[pass](https://www.passwordstore.org/)**. I intend to make it evolve in the future, as I am using it on a daily basis. I am however alone on this one. If you want stability and portability, with a great community, please use **[pass](https://www.passwordstore.org/)**.\n\nStores created with **ppass** are compatible with **[pass](https://www.passwordstore.org/)**. They are thus also compatible with pass clients like [Android Password Store](https://github.com/android-password-store/Android-Password-Store#readme).\n\n\n**Main features**\n* gpg password creation (one file per password)\n* enhanced password file with username, url and comments\n* open web browser from password file\n* automatic fill in username and password to web browser\n* automatic ssh connexion with username and password\n* cli commands shortcuts for fast access to passwords\n* git integration\n* possibility to handle several distinct stores\n* commands and params autocompletion\n* cli user interface or json response\n\n**Roadmap**\n* enhanced filter\n* enhanced clip functionnality\n* test on other platforms\n* code cleaning\n* more to come...\n\n---\n\n- [Welcome to ppass](#welcome-to-ppass)\n  * [Installation](#installation)\n    + [Requirements](#requirements)\n    + [Install from pypi](#install-from-pypi)\n    + [Install from deb package](#install-from-deb-package)\n  * [Usage](#usage)\n    + [Initialise](#initialise)\n    + [Create a folder](#create-a-folder)\n    + [Create a new password](#create-a-new-password)\n    + [Clip username and password](#clip-username-and-password)\n    + [Filter](#filter)\n    + [Add a new store](#add-a-new-store)\n    + [Use a store](#use-a-store)\n    + [Initialise new git repository](#initialise-new-git-repository)\n    + [Initialise from existing git repository](#initialise-from-existing-git-repository)\n    + [Publish to git](#publish-to-git)\n    + [Change output to JSON](#change-output-to-json)\n    + [Create a one time password](#create-a-one-time-password)\n    + [Shortcuts and Aliases](#shortcuts-and-aliases)\n  * [SSH Connexion](#ssh-connexion)\n  * [Build](#build)\n  * [Dependencies](#dependencies)\n  * [Author](#author)\n  * [Issues](#issues)\n  * [License](#license)\n\n## Installation\n\n### Requirements\n\nThe application is developped and used on ubuntu 22.04, with python 3.10.4. Any feedback on other platforms is welcomed.\n\n- python3 >=3.6.2,<4.0\n- xdotool: `sudo apt install xdotool`\n- git: `sudo apt install git`\n- gpg: `sudo apt install gnupg`\n- nano: `sudo apt install nano`\n- xclip: `sudo apt install xclip`\n\n### Install from pypi\n\n```bash\npip install ppass\n```\n\nFor an isolated environment with [pipx](https://pypa.github.io/pipx/):\n\n```bash\npipx install ppass\n```\n\n### Install from deb package\n\nA deb package is available, built using `dh-virtualenv`. Installing this package will create a new Python virtual environment in `opt/venvs`. It will then create the symlink `usr/bin/ppass` pointing to `opt/venvs/ppass/bin/ppass`.\n\nNote that `dh-virtualenv` built packages are dependent of python version. Use this only if you have default python version installed:\n* ubuntu bionic 18.04: Python 3.6\n* ubuntu focal 20.04: Python 3.8\n* ubuntu hirsute 21.04: Python 3.9\n* ubuntu impish 21.10: Python 3.9\n* ubuntu jammy 22.04: Python 3.10\n\nDownload latest `.deb` file from the [release page](https://github.com/sguerri/ppass/releases).\n\n```bash\nsudo dpkg -i ppass_1.3.0_{{os}}_amd64.deb\n```\n\n## Usage\n\n### Initialise\n\nInitialisation is required before using the application, to select GPG identity.\n\n```bash\nppass init\n```\n\nA configuration file `.ppassrc` is created in the user home directory.\n\nBy default, passwords will be stored in `${HOME}/.ppass/` folder.\n\nThe `--edit` option will open configuration file in edit mode.\n\n### Create a folder\n\nA folder needs to be created before creating a password file.\n\n```bash\nppass folders create\n\n# or\n\nppass folders create --name "${NAME}"\n```\n\n### Create a new password\n\nYou can then create a new password file.\n\nIf you want a new password to be generated:\n\n```bash\nppass generate\n```\n\nIf you already know the password:\n\n```bash\nppass insert\n```\n\nIf there is only one folder, it will be selected by default. Otherwise the list of available folders will be prompted for selection.\n\n### Clip username and password\n\n`ppass open` will open a new webbrowser with the saved url\n\n`ppass clip` will copy and paste to the active window the username as well as the password : `{username} {TAB} {password} {RETURN}`\n\n`ppass user` will copy username to clipboard\n\n`ppass pass` will copy password to clipboard\n\nIn case a password is saved with your GPG identity, it will be prompted through a modal window.\n\n### Filter\n\nCurrently password filter is only done on the password name, not on the folder name.\n\nA future enhancement will provide a better filter functionnality.\n\n`ppass <command> <anything>` will filter displayed passwords based on `anything` value (name containing this value).\n\n### Add a new store\n\nYou can create several stores (config sections). Default store path is `${HOME}/.ppass-${NAME}/`\n\n```bash\nppass -c "${STORE}" init --new-section\n```\n\nYou can also select path via the option `--path`. The folder will be created if it does not exist.\n\n```bash\nppass -c "${STORE}" init --new-section --path "${PATH}"\n```\n\n### Use a store\n\nAll functions can be used for a specific store by using the `-c` option from **ppass** application.\n\n```bash\nppass -c "${STORE}" generate ...\nppass -c "${STORE}" insert ...\nppass -c "${STORE}" open ...\nppass -c "${STORE}" clip ...\n# etc.\n```\n\n### Initialise new git repository\n\nYou can initialise a new git repository in store path. It will set automatic git push for every password creation or modification. The git repository needs to be created on your platform before.\n\nA default branch `main` is created.\n\n```bash\nppass -c "${STORE}" init-git\n```\n\nYou can also pass parameter through cli command:\n\n```bash\nppass -c "${STORE}" init-git --repo "${REPO}" --user "${USER}" --mail "${EMAIL}" --branch "${BRANCH}"\n```\n\n### Initialise from existing git repository\n\nIf the git repository already exists, you can restore it in the current store folder by adding the `--pull` option to `init-git` command.\n\nIt will download the latest commit from `main` branch. If the branch name is different, you can update it in the config file through `ppass init --edit` or through `--branch` option.\n\n### Publish to git\n\nWhen a git repository is enabled, all changes to passwords will be pushed to remote. However, there will never be automatic pull to retrieve potential password changes from remote (from other application, computer, user, android app, aso.).\n\nAutomatic pull is not activated so that access to password remain fast.\n\nIt can be done manually through\n\n```bash\nppass -c "${STORE} git pull"\n  # or\nppass -c "${STORE} git sync" # pull then push\n```\n\nIn case a remote change is done but not pulled, the automatic push on password modification will fail. A manual `git sync` will be required to merge local and remote.\n\n### Change output to JSON\n\nDefault application prints in the cli items in a user friendly way: tables, prompts, aso.\n\nIt is however possible to pass all required parameters through command options, and retrieve function results in JSON format.\n\n```bash\nppass --json <command> ...\n```\n\n### Create a one time password\n\nIt is possible to generate a password for direct usage, without saving it to any password file.\n\n```bash\nppass otp\n```\n\n**ppass** does not need to be initialized.\n\nBy default, the password will be saved to clipboard.\n\nIt is possible to output json file: `ppass --json otp`\n\nIt is also possible to output raw text password: `ppass otp --text`\n\n### Shortcuts and Aliases\n\nApplication must give a fast access to passwords to be useful.\n\nAll commands can be called by shortcuts with their first letter(s):\n* `g` for `generate`\n* `c` for `clip`\n* `o` for `open`\n* ...\n\nI personnaly also defined shortcuts in my home `.bashrc` file:\n\n```bash\nalias pp=\'ppass -c PRO\'\nalias ppc=\'ppass -c PRO clip\'\nalias ppo=\'ppass -c PRO open\'\nalias ppp=\'ppass -c PERSO\'\nalias pppc=\'ppass -c PERSO clip\'\nalias pppo=\'ppass -c PERSO open\'\n```\n\n## SSH Connexion\n\nIn case you are using login / password to connect to a server through SSH, it can be done via **ppass**. Please note that we discourage such type of connexion. Prefer a connexion with [SSH keys](https://www.ssh.com/academy/ssh/key) instead.\n\nIn **ppass**, set `"ssh+${DOMAIN}"` in the url field.\n\nThe `open` and `clip` commands will open a new terminal and fill in SSH connexion.\n\nPlease note this is using `gnome-terminal` as an additional application dependency.\n\n\n## Build\n\n**Requirements**\n\n- debhelper: `sudo apt install debhelper`\n- [dh-virtualenv](https://github.com/spotify/dh-virtualenv)\n- [build](https://github.com/pypa/build)\n- [virtualenv](https://virtualenv.pypa.io/en/latest/)\n\n**Commands**\n\n```bash\npoetry install\n\n# build deb\ndpkg-buildpackage -us -uc\ndpkg-buildpackage -Tclean\n\n# build python package\npython3 -m build\n```\n\n## Dependencies\n\n**Python Libraries**\n- [click](https://palletsprojects.com/p/click/)\n- [rich](https://github.com/Textualize/rich)\n- [pyclip](https://pypi.org/project/pyclip/)\n- [python-gnupg](https://docs.red-dove.com/python-gnupg/)\n\n**Python Development Libraries**\n- [poetry](https://python-poetry.org/)\n\n## Author\n\nSébastien Guerri - [github page](https://github.com/sguerri)\n\n## Issues\n\nContributions, issues and feature requests are welcome!\n\nFeel free to check [issues page](https://github.com/sguerri/ppass/issues). You can also contact me.\n\n## License\n\nCopyright (C) 2022 Sebastien Guerri\n\nppass is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.\n\nppass is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with ppass. If not, see <https://www.gnu.org/licenses/>.\n',
    'author': 'Sebastien GUERRI',
    'author_email': 'nierrgu@bmel.fr',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/sguerri/ppass',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.6.2,<4.0',
}


setup(**setup_kwargs)
